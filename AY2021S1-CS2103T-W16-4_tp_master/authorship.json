[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "# ATAS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-4/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* **Addendum for Teaching Assistants (ATAS)** is a desktop applicaton that aims to make users\u0027 teaching experience effortless. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* In the current version, ATAS targets NUS Teaching Assistants (TA) that are teaching the CS1010S module."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* With ATAS, users can mark attendance, track students\u0027 progress, send emails to students and many more."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103t-w16-4.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103t-w16-4.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* [About Us](/https://ay2021s1-cs2103t-w16-4.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "nweiyue": 15,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "mainClassName \u003d \u0027atas.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    archiveName \u003d \u0027atas.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "erisjacey": 6
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "You can reach us at the email `e0406158@u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "### Alvin Chee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cimg src\u003d\"images/codingcookierookie.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "[[github](https://github.com/CodingCookieRookie)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* Role: Integrator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* Responsibilities: Ensures that all the classes that are done by all members are integrated and work as intended."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### Marcus Tan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cimg src\u003d\"images/marcustw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "[[github](http://github.com/marcustw)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* Responsibilities: Looks after testing and ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### Masagca Eris Jacey Dumasis"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003cimg src\u003d\"images/erisjacey.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "[[github](http://github.com/erisjacey)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* Role: Team Lead; Code Quality; Deliverables and Deadlines"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * Responsible for overall project coordination"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * Looks after code quality, ensures adherance to coding standards, etc."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * Ensures project deliverables are done on time and in the right format "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "### Ngoh Wei Yue"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003cimg src\u003d\"images/nweiyue.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "[[github](http://github.com/nweiyue)]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* Role: Documentation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* Responsibilities: Looks after the quality of various project documents like user and developer guides"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### Zhang Sheng Yang"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cimg src\u003d\"images/yuunokun.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "[[github](http://github.com/YuunoKun)]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* Role: Tech lead"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* Responsibilities: Coding"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 5,
      "CodingCookieRookie": 6,
      "MarcusTw": 12,
      "YuunoKun": 4,
      "-": 33,
      "erisjacey": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Setting up, getting started**](#su_gs)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Design**](#design)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Architecture](#architecture)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [UI component](#ui_component)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Logic component](#logic_component)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Model component](#model_component)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Storage component](#storage_component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Common classes](#common_classes)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Implementation**](#implementation)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   * [Switching between tabs](#switching)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * [Design consideration:](#switch_design_consideration)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * [User confirmation](#ucp)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "   * [Adding a session](#adding_a_session)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Entering a session](#enter_session)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [Generating the name of a randomly-selected student](#rng)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * [[Proposed] Undo/redo feature](#undo_redo)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * [Proposed Implementation](#proposed_implementation)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * [Design consideration:](#design_consideration)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "       * [Aspect: How undo \u0026 redo executes](#aspect_undo_redo)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [[Proposed] Data archiving](#data_archiving)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Documentation, logging, testing, configuration, dev-ops**](#documentation_etc)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Appendix: Requirements**](#appendix_requirements)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Product scope](#product_scope)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [User stories](#user_stories)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  * [Use cases](#use_cases)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  * [Non-Functional Requirements](#nfr)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  * [Glossary](#glossary)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* [**Appendix: Instructions for manual testing**](#appendix_manual_testing)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Launch and shutdown](#launch_shutdown)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  * [Deleting a student](#deleting_a_student)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * [Saving data](#saving_data)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"su_gs\"\u003e\u003c/a\u003e**Setting up, getting started**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"design\"\u003e\u003c/a\u003e**Design**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"architecture\"\u003e\u003c/a\u003eArchitecture"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W16-4/tp/blob/master/src/main/java/atas/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W16-4/tp/blob/master/src/main/java/atas/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `addses s/Tutorial 1 d/10/10/2020`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"ui_component\"\u003e\u003c/a\u003eUI component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W16-4/tp/blob/master/src/main/java/atas/ui/Ui.java)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StudentListPanel`, `StatusBarFooterLeft` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class except `Tab`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-W16-4/tp/blob/master/src/main/java/atas/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W16-4/tp/blob/master/src/main/resources/view/MainWindow.fxml)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* Displays results to user if any."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"logic_component\"\u003e\u003c/a\u003eLogic component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W16-4/tp/blob/master/src/main/java/atas/logic/Logic.java)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "1. `Logic` uses the `AtasParser` class to parse the user command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a student)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"enterses 1\")` API call."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "![Interactions Inside the Logic Component for the `enterses 1` Command](images/EnterSessionSequenceDiagram.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"model_component\"\u003e\u003c/a\u003eModel component"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W16-4/tp/blob/master/src/main/java/atas/model/Model.java)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* stores the data of the following: "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * student list in a `StudentList` object "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * session list in a `SessionList` object "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * memo in a `Memo` object."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cStudent\u003e` and `ObservableList\u003cSession\u003e` that can be \u0027observed\u0027. e.g. For each list, the UI can be bound to the list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"storage_component\"\u003e\u003c/a\u003eStorage component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W16-4/tp/blob/master/src/main/java/atas/storage/Storage.java)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* can save the student list data in json format and read it back."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* can save the session list data in json format and read it back."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* can save the memo data in txt file and read it back."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"common_classes\"\u003e\u003c/a\u003eCommon classes"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Classes used by multiple components are in the `seedu.atas.commons` package."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"implementation\"\u003e\u003c/a\u003e**Implementation**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "### \u003ca name\u003d\"switching\"\u003e\u003c/a\u003eSwitching between tabs"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The switching of tabs is facilitated by `SwitchCommand`, `LogicManager`, `MainWindow` and `Tab`. `Tab` is an enum class that represents the various tabs that exist in ATAS."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Given below is an example usage scenario and how the switch mechanism behaves at each step."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Step 1. The user launches the application for the first time. The default \"Students\" tab is displayed."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Step 2. The user executes `switch sessions` command to view the sessions tab. `MainWindow#executeCommand()` is called and `LogicManager` calls `AtasParser#parseCommand()`. This results in the creation of a `SwitchCommandParser` to parse the user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Step 3. `SwitchCommandParser#parse()` checks if there is an argument being passed by the user. If an argument is passed, a `SwitchCommand` will be created and `SwitchCommand#execute()` will be called by the `LogicManager`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If no argument is found, a `ParseException` will be thrown and the execution terminates."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Step 4. `SwitchCommand#execute()` will check if the argument passed in is an existing tab name. If the argument is valid, a `CommandResult` containing a variable `switchTab` with the value of the target `Tab` will be return to `MainWindow`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the argument is not a valid tab name, a `CommandException` will be thrown and the execution terminates."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Step 5. `MainWindow#handleSwitchTab()` will then be called and will check if the current `Tab` is the same as the target `Tab` to switched to. If it is not the same, `MainWindow` will utilise `tabPane` to execute the switch, thus updating the screen for the user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the current `Tab` is the same as the target `Tab`, a `CommandException` will be thrown and the execution terminates."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The following sequence diagram shows how the switch operation works:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "![SwitchTabsSequenceDiagram](images/SwitchTabsSequenceDiagram.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a switch command:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "![SwitchTabsActivityDiagram](images/SwitchTabsActivityDiagram.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "#### \u003ca name\u003d\"switch_design_consideration\"\u003e\u003c/a\u003eDesign consideration:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `Tab` is being implemented as an enum class because there is a fixed set of tabs that are available to be switched to. This prevents invalid values to be assigned to `Tab`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### \u003ca name\u003d\"ucp\"\u003e\u003c/a\u003eGetting user confirmation for commands that changes the local data."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "This feature (henceforth referred to as \u0027user confirmation\u0027) is facilitated by \u0027ConfirmCommand\u0027, \u0027DangerousCommand\u0027, \u0027Logic\u0027, and \u0027Model\u0027."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "There are 6 DangerousCommand(s) that will change the existing local data upon execution, namely:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "1. deletestu (deleting a student)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "2. editstu (editing the particulars of a student)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "3. clearstu (clearing the student list)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "4. deleteses (deleting a sesion)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "5. editses (editing the information of a session)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "6. clearses (clearing the session list)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "`DangerousCommand` implements the method:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* `DangerousCommand#execute(Model)` - Returns a `CommandResult` of the `DangerousCommand`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "`ConfirmationCommand` implements the method:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* `ConfirmationCommand#execute(Model)` - Returns a `CommandResult` containing a user confirmation prompt to confirm the execution of the `DangerousCommand`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u0027ConfirmationAcceptCommand\u0027 implements the method:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* `ConfirmationAcceptCommand#execute(Model)` - Executes the `DangerousCommand` and returns a `CommandResult` from `DangerousCommand#execute(Model)`. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "`ConfirmationRejectCommand` implements the method:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* `ConfirmationRejectCommand#execute(Model)` - Returns a `CommandResult` indicating the `DangerousCommand` is not executed."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Given below is an example usage scenario and how the user confirmation prompt feature behaves at each step."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Step 1. The user launches the application with all his/her students already added to the student list. The `ModelManager` should already contain the list of students assigned to the user."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Step 2. The user executes a dangerous command, for example `deletestu 1`, to delete the first student in the student list. A `DeleteStudentCommandParser` is created by `LogicManager`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "If the input delete command is valid, a `DeleteStudentCommand` will be created by `DeleteStudentCommandParser#parse()` and passed into a `ConfirmationCommand` as a `DangerousCommand`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Step 3. The `ConfirmationCommand` is executed, and the `ResultDisplay` window shows a confirmation prompt `Delete 1? (yes/no)`, where the user needs to input a `yes` or `no` to confirm or reject the execution of the `DangerousCommand` respectively."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Step 4. If the confirmation input is valid, a `ConfirmationCommandParser` is created by the `LogicManager` and either a `ConfirmationAcceptCommand` or `ConfirmationRejectCommand` is returned by `ConfirmationCommandParser#parser()`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Step 5. The `ConfirmationAcceptCommand` or `ConfirmationRejectCommand` is then executed in `LogicManager#execute(String)` and a `CommandResult` is returned, which is displayed on `ResultDisplay`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "The following sequence diagram shows how the user confirmation feature works:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![UserConfirmationSequenceDiagram](images/UserConfirmationSequenceDiagram.png)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a dangerous command (for eg. `DeleteStudentCommand`)."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![DeleteStudentActivityDiagram](images/DeleteStudentActivityDiagram.png)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "### \u003ca name\u003d\"adding_a_session\"\u003e\u003c/a\u003eAdding a session"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Adding a session to a class requires user input from the CLI. Adding a session to a class requires user input from "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "the CLI. The parser will then parse the user input to obtain the name and the date of the session. The newly added "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "session will also be filled with students\u0027 default presence and participation."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "The below example given assumes that the user inputs `addses s/Tutorial 1 d/1/1/2020`, which \u0027Tutorial 1\u0027 and"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u00271/1/2020\u0027 are the name and the date of the session to be added, and `addses` command has already been parsed."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Step 1: Parse input and create session"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "An `AddSessionCommandParser` is created by `LogicManager` and calls `AddSessionCommandParser#parse()` with the given"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "user input. Input is parsed according to the prefix `s/` and `d/` to identify the parts of the "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "user input and split it into `String` slices. If both the name and date are present in the input, "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "those `String` will be used to create a `SessionName` and a `SessionDate` object, which will be used to "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "create and initialize a `Session` object. The `Session` object created will be the one being added to "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "the current session list later."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`AddSessionCommandParser#parse()` returns a `AddSessionCommand` object that contains the session object"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " back to the `LogicManager`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "![AddSessionSequenceDiagram1](images/AddSessionSequenceDiagram1.png)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Step 2: Add session to the model/session list"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`LogicManager` calls `AddSessionCommand#execute()` to proceed on to adding the session to the model."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "The `AddSessionCommand` will first check if the same session is already in the session list, if the "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "session exists in the current session list, then the session will not be added to the session list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Assuming that the session to add is not a session already in the list, `ModelManager` will update"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "the internal student list of the session list, then it uses addSession method to add the session to the "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "![AddSessionSequenceDiagram2](images/AddSessionSequenceDiagram2.png)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an `addses` command:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "![AddSessionActivityDiagram](images/AddSessionActivityDiagram.png)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"enter_session\"\u003e\u003c/a\u003eEntering a session"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "This feature (henceforth referred to as \u0027enter session\u0027) is facilitated by `EnterSessionCommand`, `LogicManager` and `Model`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "`LogicManager` implements the method:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `LogicManager#execute(Model)` — Returns a `CommandResult` containing the session index of the session."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "`EnterSessionCommand` implements the method from `LogicManager`:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `EnterSessionCommand#execute(Model)` — Returns a `CommandResult` containing the session index of the session."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "`Model` implements the method:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `Model#enterSession(Index)` — Enters a session based on session index."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Given below is an example usage scenario and how the enter session mechanism behaves at each step."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Step 1. The user launches the application with all his/her students already added to the student list. The `ModelManager` should already contain the list of students assigned to the user."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Step 2. The user executes `enterses 1` to enter session 1. The `enterses 1` command calls `LogicManager#execute()`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Step 3. `EnterSessionCommandParser#parse()` checks if there argument passed is valid. If the argument is valid, a `EnterSessionCommand` will be created and `EnterSessionCommand#execute()` will be called by the `LogicManager`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If an invalid argument is found, a `ParseException` will be thrown and the execution terminates."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Step 4. `Model#enterSession()` will be called by `EnterSession#execute()` and the displayed tab will be switched to Current Session. Details of session 2 will be displayed to the user."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "The following sequence diagram shows how the enter session operation works:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "![EnterSessionSequenceDiagram](images/EnterSessionSequenceDiagram.png)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an enter session command:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "![EnterSessionActivityDiagram](images/EnterSessionActivityDiagram.png)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"rng\"\u003e\u003c/a\u003eGenerating the name of a randomly-selected student"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "This feature (henceforth referred to as \u0027RNG\u0027) is facilitated by `RngCommand` and `RandomGenerator`. "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "`RngCommand` implements the method:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `RngCommand#execute(Model)` — Returns a `CommandResult` containing the name of a randomly-selected student."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "`RandomGenerator` implements the method:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `RandomGenerator#getNextInt(int)` — Returns the index of the next randomly-generated student."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "The `RandomGenerator` is contained in `Model`. It implements the method:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `ModelManager#generateRandomStudentIndex()` — Returns the index of a randomly-generated student in the student list."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "The operation above is exposed in the `Model` interface as `Model#generateRandomStudentIndex()`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Given below is an example usage scenario and how the RNG mechanism behaves at each step."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Step 1. The user launches the application with all his/her students already added to the student list. The `ModelManager` should already contain the list of students assigned to the user."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Step 2. The user executes `rng` to pick a random student in his/her student list. The `rng` command calls `Model#generateRandomStudentIndex()`, which in turn calls `RandomGenerator#getNextInt(int)`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Step 3. The `Index` returned during the execution of `RngCommand#execute(Model)` is used to fetch the name of the corresponding student (in the student list) to be selected. The student\u0027s name is then displayed to the user."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "The following sequence diagram shows how the RNG operation works:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "![RngSequenceDiagram](images/RngSequenceDiagram.png)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an RNG command:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "![RngActivityDiagram](images/RngActivityDiagram.png)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"undo_redo\"\u003e\u003c/a\u003e\\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### \u003ca name\u003d\"proposed_implementation\"\u003e\u003c/a\u003eProposed Implementation"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th student in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new student. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Step 4. The user now decides that adding the student was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### \u003ca name\u003d\"design_consideration\"\u003e\u003c/a\u003eDesign consideration:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "##### \u003ca name\u003d\"aspect_undo_redo\"\u003e\u003c/a\u003eAspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": " * Pros: Easy to implement."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": " * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": " itself."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Pros: Will use less memory (e.g. for `delete`, just save the student being deleted)."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": " * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"data_archiving\"\u003e\u003c/a\u003e\\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"documentation_etc\"\u003e\u003c/a\u003e**Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"appendix_requirements\"\u003e\u003c/a\u003e**Appendix: Requirements**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"product_scope\"\u003e\u003c/a\u003eProduct scope"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob is a passionate CS1010 TA and he likes to track his students’ progress."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob currently uses Excel to keep track of his student’s particulars."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob finds the features on Excel clunky at times and he finds them difficult to learn."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob is looking for an application with a sleeker and cleaner UI so he doesn’t have to remember where the different features in Excel are."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob has limited memory in his computer and wants to install smaller softwares."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob is a fast typist."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Bob hates to move his mouse at all (to save file, to categorise data fields and student data)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* Bob uses a laptop and doesn’t have a mouse with him all the time(or he doesn’t have a place to use his mouse when on the bus or mrt)."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Manage students faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Sleeker and cleaner UI, less clunky"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Less memory"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Intuitive command-line interface - easy to learn and pick up, especially for technologically savvy individuals"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* CS student-friendly"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Potential Features:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Mass sending of emails/files"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Import/export data files from Excel, csv files"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Track student’s progress (assignments, tests, class participation)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Record student’s attendance"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Profile pictures for recognisability"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Schedule consultations/Zoom meeting"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Automate formation of Telegram groups"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"user_stories\"\u003e\u003c/a\u003eUser stories"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ----------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | see usage instructions         | refer to instructions when I forget how to use the App                  |"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | add a new student              |                                                                         |"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | delete a student               | remove students no longer taking the module                             |"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | track all students in my class | so that I will know who is missing from my class                        |"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | find a student by name         | locate details of students without having to go through the entire list |"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user                                       | hide private contact details   | minimize chance of someone else seeing them by accident                 |"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* * *`  | user with many students in my class        | sort students by name          | locate a student easily                                                 |"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user                                       | track my students\u0027 attendance  | take note of the tutorial participation for each student                |"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user who has trouble putting face to name  | easily identify each student with a profile photo | recognise students through their faces more easily   |"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user who yearns for efficiency due to limited class time | have a random number generator | get a random student to answer my question instead of having to rely on online generators |"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user                                       | add non-registered Christian names or nicknames to my students | remember them more easily               |"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user                                       | send important emails to my students | not have to rely on Microsoft Outlook/LumiNUS                     |"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | user                                       | have diagrams tracking students\u0027 progress | tell from one look that a student is not catching up with lecture material |"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | tutor who can be quite forgetful           | create a list of announcements | remember to convey them to my students                                  |"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | tutor who wants to protect the particulars of my students | encrypt files with passwords | keep the module and students\u0027 data safe                    |"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | tutor who often overshoots the time allocated for my lesson | be reminded at certain intervals | be on track throughout the lesson                    |"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `* *  `  | tutor who wants the class to participate actively in class discussions | quickly record who has/has not spoken yet | call on those who haven\u0027t spoken for subsequent questions |"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `*    `  | user who likes customization               | customize my own keyboard shortcuts |                                                                    |"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "| `*    `  | user who likes colors                      | customize the UI to whatever color scheme I want | enjoy using the App more                              |"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "### \u003ca name\u003d\"use_cases\"\u003e\u003c/a\u003eUse cases"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "(For all use cases below, the **System** is the `ATAS` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC01 - Add a student**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. User requests to add a student with specified Matriculation number and NUS email, as well as any additional tags (if any)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. ATAS adds the student"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC02 - Delete a student**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  ATAS shows a list of students"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  User requests to delete a specific student in the list"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  ATAS deletes the student"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  * 3a1. ATAS shows an error message."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC03 - Clear the class list**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  User requests to clear the class list"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  ATAS clears the class list"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC04 - List the registered students**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. User requests to see the list of students that have been added to ATAS"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. ATAS shows the list of students"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC05 - Find a student**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  User requests to find a student with one or more keywords"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  ATAS searches for students’ names that contain any of the keywords"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1.  ATAS shows the filtered list of students to User"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Use case: UC06 - Exit ATAS**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. User requests to exit ATAS"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. ATAS closes"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "### \u003ca name\u003d\"nfr\"\u003e\u003c/a\u003eNon-Functional Requirements"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "1. Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should be for a single user and not a multi-user product."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should not depend on remote servers."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should be able to function without having to rely on being connected to a network."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should be able to work without requiring an installer."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Should not contain very large file sizes (JAR files - 100Mb, PDF files - 15Mb/file)."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "### \u003ca name\u003d\"glossary\"\u003e\u003c/a\u003eGlossary"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* **Matriculation number**: A unique alphanumeric number attributed to each NUS student. Follows the format A0123456X, where each digit can be from 0-9 and the last letter can be any alphabet A-Z"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## \u003ca name\u003d\"appendix_manual_testing\"\u003e\u003c/a\u003e**Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"launch_shutdown\"\u003e\u003c/a\u003eLaunch and shutdown"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### \u003ca name\u003d\"deleting_a_student\"\u003e\u003c/a\u003eDeleting a student"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "1. Deleting a student while all students are being shown"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  1. Prerequisites: List all students using the `list` command. Multiple students in the list."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "     Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     Expected: No student is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "  1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "     Expected: Similar to previous."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### \u003ca name\u003d\"saving_data\"\u003e\u003c/a\u003eSaving data"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "  1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nweiyue": 121,
      "CodingCookieRookie": 41,
      "MarcusTw": 65,
      "YuunoKun": 45,
      "-": 279,
      "erisjacey": 130
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   1. Run the `atas.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "erisjacey": 1
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   e.g. `atas.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   e.g. `atas.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   e.g. `atas.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "erisjacey": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ start of `table_of_contents` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003cdiv class\u003d\"toc-no-list-style\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  * Table of contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ end of `table_of_contents` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ start of `introduction#elevate_your_efficiency` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 1.1. Elevate your efficiency"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Hello, fellow teaching assistants of CS1010S!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Have you ever struggled with keeping track of _all_ your students\u0027 attendance and participation status for each of your classes? "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Have you ever needed to make a mental note in class, only to forget about it because there was no convenient place to write it in?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Have you ever wished an application would have a more streamlined **Command Line Interface** to suit your typing prowess?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "If you found yourself saying yes to any of the above, then **ATAS (Addendum for Teaching Assistants)** is ***the*** *in-class management application* for you! "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Made by teaching assistants, for teaching assistants, **ATAS** aims to *elevate your efficiency* and make your experience handling administrative tasks while in class as seamless as possible."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ end of `introduction` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ start of `introduction#overview` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 1.2. Overview"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**ATAS** is a **desktop application designed to be your handy in-class companion, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "If you can type really quickly, **ATAS** will help you to manage your in-class administrative needs more efficiently than traditional GUI apps."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ":information_source: Going forward, to minimize ambiguity, the following terms will be named as such: \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `classes` will be henceforth referred to as `sessions`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* `attendance` (of student(s)) will be henceforth referred to as `presence`. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "See the parts under `session` and `presence` in the [glossary](#22-glossary) for more information."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Specifically, **ATAS** allows you to keep track of four different aspects (see [Section 4 - Layout of ATAS](#4-layout-of-atas) for a graphical visualization for each aspect):"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "1. [Students](#41-students)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Keep track of all students assigned to you"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Store their matriculation number, NUS e-mail, and relevant [tag(s)](#22-glossary) (if any)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "1. [Sessions](#42-sessions)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Keep track of all sessions you will be holding for the academic year"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * These will likely mostly consist of tutorial sessions, but can include consultations as well"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "1. [Current session](#43-current-session)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Keep track of student progress within each session itself"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Specifically, for each session, keep track of each student\u0027s [`participation`](#551-toggling-participation-status-of-students--participate) and [`presence`](#552-toggling-presence-status-of-students--presence)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "1. [Memo](#44-memo): "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Keep track of any note you think you will need to remember for later use"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * For example, take note of any interesting question raised by your student so you can follow it up with him/her after the session"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ end of `introduction#overview` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ start of `introduction#preview` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 1.3. Preview"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "The following is the GUI of our application:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    ![UiPreview](images/UiPreview.png)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "GUI Components:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   1. **Command box**: where you enter your commands."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   1. **Result box**: where the result of a command is shown. It can show a success message or a failure message if something wrong happens."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   1. **Tabs**: shows what item type you are viewing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   1. **List box**: where the list of students, sessions or attendance attributes are shown. For example, if you are in `Students` tab, then a list of students and their particulars are shown. It includes a scrollbar for you to scroll down to view more students\u0027 particulars."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ end of `introduction#preview` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ start of `about_this_user_guide` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## 2. About this user guide"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Our aim when writing this user guide is to help you - a new user - to get started with **ATAS** as quickly as possible."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "This includes providing you with all the information you will need as *concisely as possible* to start using **ATAS**."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "This guide features all the available commands, their syntax, as well as specific examples for illustration purposes."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ end of `about_this_user_guide` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ start of `about_this_user_guide#navigation` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 2.1. Navigation"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "To help ease your navigation within this document, we have included numbers for each header, as well as links to their respective part (in the table of contents, and whenever they are referenced) in the guide."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Additionally, here are the relevant places you can go to if you would like to seek clarification on more specific parts:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* If you would like to get started on using **ATAS**, head over to [Section 3 - Quick start](#3-quick-start)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* If you would like to see the features available for **ATAS**, head over to [Section 5 - Features](#5-features)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* If you would like a quick summary of the available commands for **ATAS**, head over to [Section 7 - Command summary](#7-command-summary)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ end of `about_this_user_guide#navigation` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ start of `about_this_user_guide#glossary` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 2.2. Glossary"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "You will come across some of these terms in this document, and it will be good to have a clear understanding of what these terms mean."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|Term |Explanation |"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|-----|------------|"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|command | A line of text that you can type into the command box for the application to execute. |"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|index | The position of an item (student or session) in a displayed list. For simplicity, indexes start from 1.|"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|memo | A brief written message written by you for note-taking. |"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|parameter| Specific information that you input. |"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|participate | An attribute indicating if a student has participated in the session or not. |"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|presence | An attribute indicating if a student is present in the session or not. |"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|session | A tutorial session or lesson that you conduct. |"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|student | A person that is in your tutorial class. |"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "|tag(s) | Keyword(s) tagged to a student for your own identification purpose. |"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ end of `about_this_user_guide#glossary` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 2.3. Symbols and formatting"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "For the good majority of visual learners, we figured to present information in a unique format with symbols of different shapes and colours to help you along reading this guide."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  |Symbol/Format | Explanation |"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " |--------------|-------------|"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " |:bulb: | Tips |"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " |:information_source: | Important information to take note |"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " |``consolas font`` | Representing a keyterm or a command |"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "{ start of `quick_start` written by: Alvin Chee Teck Weng }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## 3. Quick start"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "2. If you do not have Java version `11` and above installed, download it from [here](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html). Remember to choose the installer that fits your computer."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "2. Download the latest `atas.jar` from [here](https://github.com/AY2021S1-CS2103T-W16-4/tp/releases). "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your ATAS. All the data related to ATAS will be stored here."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below image should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   ![StartPage](images/StartPage.png)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   * **`liststu`** : Lists out all the students."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * **`addstu n/John Cena m/A0123456X e/thechamp@u.nus.edu`** : Adds a student named `John Cena` to the student list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   * **`deleteses 3`** : Deletes the 3rd session shown in the current session list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * **`editses 3 s/Tutorial 2`** : Edits the 3rd session name to `Tutorial 2`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "   * **`clearstu`** : Deletes all the students."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * **`bye`** : Exits out of the application."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "{ end of `quick_start` written by: Alvin Chee Teck Weng }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `layout_of_atas` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## 4. Layout of ATAS"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Over here, you can get an idea of how the different aspects of **ATAS** look like. **ATAS** comprises of four different tabs, with each tab supporting [features](#5-features) of the different aspects of **ATAS**."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `layout_of_atas` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `layout_of_atas#students` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 4.1. Students"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The `Students` tab contains a list of the students in your class. In this tab, you can view your students\u0027 particulars such as their name, matriculation number, email and their overall presence and participation scores. The students are arranged in the order that you add them."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The following is how the `Students` tab looks like:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "![StudentsLayout](images/StudentsLayout.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "To find out which features are supported by the `Students` tab, you can head over to [Section 5.3 - Students](#53-students)."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `layout_of_atas#students` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `layout_of_atas#sessions` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 4.2. Sessions"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Over at `Sessions` tab, you can find the list of sessions that you have. Each session will display details like their name, date and the overall percentage of students present and participating in that particular session. The sessions are sorted by their dates, starting from the latest at the top."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The following is how the `Sessions` tab looks like:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "![SessionsLayout](images/SessionsLayout.png)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "To find out which features are supported by the `Sessions` tab, you can head over to [Section 5.4 - Sessions](#54-sessions)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `layout_of_atas#sessions` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `layout_of_atas#current_session` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 4.3. Current session"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Similar to the `Students` tab, you can also view the list of your students in the `Current Session` tab. The difference is that you can only view the students name and also whether they are present or have participated for that particular session. Students are sorted base on the student list in the `Students` tab."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The following is how the `Current Session` tab looks like:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "![CurrentSessionLayout](images/CurrentSessionLayout.png)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "To find out which features are supported by the `Current Session` tab, you can head over to [Section 5.5 - Current session](#55-current-session)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `layout_of_atas#current_session` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `layout_of_atas#memo` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 4.4. Memo"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The `Memo` tab contains a text box where you can input any notes that you need for future references. The outline of the text box will change color when u click into it."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The following is how the `Memo` tab looks like:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "![MemoLayout](images/MemoLayout.png)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "To find out which features are supported by the `Memo` tab, you can head over to [Section 5.6 - Memo](#56-memo)."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `layout_of_atas#memo` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## 5. Features"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `features#overview` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 5.1. Overview"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "In this secton, you can find the details of all the available features in **ATAS**. We have grouped the features into 7 main groups, namely [General](#52-general), [Students](#53-students), [Sessions](#54-sessions), [Current session](#55-current-session), [Memo](#56-memo), [User confirmation](#57-user-confirmation), and [Saving the data](#58-saving-the-data). "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "There are 2 main types of features:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Commands that you can execute in the command box or through keyboard shortcuts"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "1. Features that are already inplace and require no actions from you"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "With the exception of [save memo](#562-save-memo), all commands that are available can be executed regardless of which tab you are in."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* Words in `UPPER_CASE` are placeholders to be replaced by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  e.g. you should change `addstu n/STUDENT_NAME` to `addstu n/John Cena`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  e.g you can use `n/NAME [t/TAG]` as `n/John Cena t/foreigner` or simply as `n/John Cena`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "  e.g. you can use `[t/TAG]…​` as ` ` (i.e. 0 times), `t/foreigner`(i.e. 1 time), `t/foreigner t/enthusiastic`(i.e. 2 times) etc."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  e.g. if the command specifies `n/NAME m/MATRICULATION_NUMBER`, `m/MATRICULATION_NUMBER n/NAME` is also acceptable. "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `features#overview` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `features#general` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 5.2. General"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "This category consists of conventional features (`help`, `exit`, `undo` and `redo`) that you can find in most applications. It also consists of features that are  responsible for navigating through **ATAS** (`switch`) and those that have no specific relation to any of the other categories below (`rng`)."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `features#general` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `features#general#help` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.2.1. Viewing help : `help`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Opens a popup window to show the list of available commands and a link to access this user guide."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "The following is how the help window looks like:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "![HelpWindow](images/helpWindow.png)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "help"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Opened help window"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `features#general#help` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `features#general#switch` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.2.2. Switching between tabs : `switch`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Switches between tabs."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "switch TAB_NAME"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `TAB_NAME` is case-insensitive."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `Current` replaces `Current Session` as `TAB_NAME` here for simplicity."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `TAB_NAME` must be an existing tab (`Students`, `Sessions`, `Current` or `Memo`)."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Switched to TAB_NAME tab"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `switch sessions` switches to the `Sessions` tab."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `features#general#switch` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ start of `features#general#rng` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.2.3. Generating the name of a randomly-selected student : `rng`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Chooses a student at random from the student list."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "rng"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Student selected: NAME_OF_RANDOMLY_SELECTED_STUDENT"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ end of `features#general#rng` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ start of `features#general#undo` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.2.4. Undo-ing a command : `undo`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Undoes a command and essentially returns ATAS to the state prior to performing that command."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* An `undo` is done *per command* and not per change. If you make multiple changes to a student, for example, using a single `editstu` command, then `undo` will revert *all* the changes."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Commands that can be undone are:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Adding a student/session: `addstu` / `addses`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Deleting a student/session: `deletestu` / `deleteses`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Editing a student/session: `editstu` / `editses`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Clearing all students/sessions: `clearstu` / `clearses`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Toggling the participation status of students: `participate`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "   * Toggling the presence status of students: `presence`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Commands not stated above make no change to the application state and thus cannot be undone."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Successive `undo` commands will bring the application state further back, until there are no more changes to `undo`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* You cannot `undo` if there is no previous state to return to."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "undo"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Previous command successfuly undone!"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ end of `features#general#undo` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ start of `features#general#redo` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.2.5. Redo-ing a command : `redo`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Redoes a command that was most recently undone and returns ATAS to the state after having performed that command."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Essentially the reverse of undo-ing a command."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* A `redo` is done *per command* and not per change. If you undo a command that makes multiple changes (like `editstu`), then `redo` will recover *all* changes."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* If any of [the commands that support `undo`](#524-undo-ing-a-command--undo) is performed after an `undo`, then all states currently available for `redo` will be erased and you will not be able to go to those states anymore."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* You cannot `redo` if there is no forward state to go to."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "redo"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Previous command successfuly redone!"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ end of `features#general#redo` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "{ start of `features#general#exit` written by: Alvin Chee Teck Weng }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "#### 5.2.6. Exiting the program : `exit`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "exit"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Program window will be closed."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "{ end of `features#general#exit` written by: Alvin Chee Teck Weng }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 5.3. Students"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{ start of `features#students` written by: Zhang Sheng Yang }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "With ATAS, you can easily manage your students in your class!"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "- First, at the start of a semester, you can use `addstu` and `deletestu` to include or remove "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "students in your class. You can also edit student\u0027s particulars with `editstu` if you want to change any of"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "the student\u0027s details."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "- Next, if you want to find any student or students, you can try `findstu` to search the class for "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "the student you are looking for with a keyword, your class will now only show the the student or students you\u0027ve "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "searched for. When you are done, you can simply use `liststu` to view the entire class again!"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "- Finally, you might want to have an empty class to get ready for the next semester. In this case, instead of removing "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "the students one by one, you can utilize `clearstu` to empty the class."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{ end of `features#students` written by: Zhang Sheng Yang }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.3.1. Adding a student : `addstu`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Adds a student to the student list."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "addstu n/NAME m/MATRICULATION_NUMBER e/NUS_EMAIL_ADDRESS [t/TAG]…"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ":bulb: **Tip:**\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "A student can have any number of tags (including 0) "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/div\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `addstu n/John Cena m/A0123456J e/thechamp@u.nus.edu`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `addstu n/Alvina Handsome m/A0123456X e/handsome.alvina@u.nus.edu t/new`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.3.2. Listing all students : `liststu`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Shows a list of all students in the current student list."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "liststu"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.3.3. Locating students by name : `findstu`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Finds students whose names contain any of the given keywords."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "findstu KEYWORD [MORE_KEYWORDS]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "````"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* The search is case-insensitive. e.g `john` will match `John`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* The order of the keywords does not matter. e.g. `John Cena` will match `Cena John`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Only full words will be matched e.g. `Jon` will not match `John` "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Students matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  e.g. `John Cena` will return `John Tan`, `Mark Cena`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `findstu John` returns `john` and `John Cena`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `findstu kent ridge` returns `Kent Tan` and `Mark Ridge`\u003cbr\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "[Insert image of an example of result of `findstu Cena`]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ start of `features#student#deletestu` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#### 5.3.4. Deleting a student : `deletestu`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Removes a student from the student list."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* Deletes the student at the specified `INDEX`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* You will then be prompted for a confirmation input **`(yes/no)`**."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * If yes: deletes the specified student from the student list."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * If no: the specified student remains in the student list."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "deletestu INDEX"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Delete INDEX? (yes/no)"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ":information_source: After receiving the confirmation prompt, enter `yes` to confirm the removal of student at the specified `INDEX`, or reject the command by entering `no`."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "yes"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Deleted student: PARTICULARS_OF_STUDENT_AT_SPECIFIED_INDEX"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   ![ScreenshotDeletestu](images/ScreenshotDeletestu.png)"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* `liststu` followed by `deletestu 2` followed by `yes` deletes the 2nd student in the student list."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* `findstu Betsy` followed by `deletestu 1` followed by `y` deletes the 1st student in the results of the `findstu Betsy` command."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ end of `features#student#deletestu` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ start of `features#student#editstu` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#### 5.3.5. Editing a student\u0027s particulars : `editstu`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* Edits the student at the specified `INDEX` with the specified updated particular to be updated."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* You will then be prompted for a confirmation input **`(yes/no)`**."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * If yes: edits and updates the particulars of the specified student from the student list."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * If no: the specified student\u0027s particulars remains the same."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "editstu INDEX n/UPDATED_NAME"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Edit INDEX? (yes/no)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ":information_source: After receiving the confirmation prompt, enter `yes` to confirm the editing of student\u0027s particulars at the specified `INDEX`, or reject the command by entering `no`."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "yes"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Edited student: PARTICULARS_OF_STUDENT_AT_SPECIFIED_INDEX"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   ![ScreenshotEditstu](images/ScreenshotEditstu.png)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* `editstu 2 n/John Cena` followed by `yes` edits the 2nd student in the student list with an updated name `John Cena`."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* `editstu 3 t/Joker` followed by `y` edits the 3rd student in the student list with an updated tag `Joker`."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ end of `features#student#editstu` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ start of `features#student#clearstu` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.3.6. Clearing the student list : `clearstu`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Clears and removes all students from the student list."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "* You will be prompted to confirm their decision here."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * If yes: removes all students from the student list."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   * If no: student list remains unchanged and no removal of students occurs."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "clearstu"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "```"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Clear list? (yes/no)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ":information_source: After receiving the confirmation prompt, enter `yes` to confirm the removal of all students from the student list, or reject the command by entering `no`."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "yes"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "ATAS has cleared all students from your list."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ end of `features#student#clearstu` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "{ start of `sessions` written by: Alvin Chee Teck Weng }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "### 5.4. Sessions"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "With **ATAS**, you can also manage each tutorial session efficiently!"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "- First, at the start of each tutorial, you can use `addses` to add a tutorial session. If you have mistyped the session details, simply use `editses` or `deleteses` on the wrongly-typed session."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "- Next, if you wish to change the presence and participation status of your students of a particular session, simply use `enterses` to enter that session to do so."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "- Finally, you may want to take up the same teaching assistant job again for a different class in the next semester. All the tutorial sessions may now contain inaccurate details. In this case, instead of removing "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "the sessions one by one, you can utilize `clearses` to remove all existing sessions."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.4.1. Adding a session : `addses`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Adds a session to the session list."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "addses s/SESSION_NAME d/SESSION_DATE"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "New session added: Tutorial 4 @ 12/07/2020"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* Adds a session with the specified name and date to the displayed session list."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ":bulb: **Tip:** Two sessions cannot have the same name but they can have the same date"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `addses s/tut1 d/12/7/2020`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.4.2. Deleting a session : `deleteses`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Deletes a session from the session list."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "deleteses INDEX"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Delete INDEX? (yes/no)"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ":information_source: After receiving the confirmation prompt, enter `yes` to confirm the removal of session at the specified `INDEX` or reject the command by entering `no`."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* Deletes the session from the displayed session list at the specified `INDEX`."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* The index refers to the index number shown in the session list."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* You will be prompted for a confirmation input **`(yes/no)`**."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "   * If yes: the specified session will be removed from the session list."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "   * If no: the specified session will not be removed from the session list."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `deleteses 1` followed by `no` results in nothing changed."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `deleteses 2` followed by `yes` deletes the 2nd session in the session list."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "#### 5.4.3. Editing a session : `editses`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Edits a session in the session list."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "editses INDEX s/UPDATED_NAME d/UPDATED_DATE"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Edit INDEX? (yes/no)"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ":information_source: After receiving the confirmation prompt, enter `yes` to confirm the update of session at the specified `INDEX` or reject the command by entering `no`."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ":bulb: **Tip:** The updated session cannot have the same name as any of the other sessions in the list but they can have the same date"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* Edits the session in the displayed session list at the specified `INDEX` with the specified details."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* The index refers to the index number shown in the session list."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* You will be prompted for a confirmation input **`(yes/no)`**."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "   * If yes: the specified session will be updated with the specified details."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "   * If no: the specified session will not be updated."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `editses 2 s/Tutorial1 d/10/10/2020` followed by `yes` edits the 2nd session in the session list with a new session name `Tutorial1` and a new session date `10/10/2020`."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "#### 5.4.4. Clearing the session list : `clearses`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Deletes all the sessions in the session list."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "clearses"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Clear session list? (yes/no)"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ":information_source: After receiving the confirmation prompt, enter `yes` to confirm the clearance of all sessions or reject the command by entering `no`."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* Clears all the sessions in the displayed session list."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* You will be prompted for a confirmation input **`(yes/no)`**."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "   * If yes: all sessions will be removed from the session list."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "   * If no: no sessions will be removed from the session list."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "   "
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `clearses` followed by `yes` deletes all the sessions in the session list. "
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.4.5. Entering a session : `enterses`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Enters a session in the session list."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "enterses INDEX"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Session entered: INDEX"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "**:information_source: Notes about the usage of this command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* Enters the session in the displayed session list at the specified `INDEX`."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* The index refers to the index number shown in the session list."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `enterses 1` enters the first session and allows you to use PARTICIPATE and PRESENCE commands."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "{ end of `sessions` written by: Alvin Chee Teck Weng }"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 5.5. Current session"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{ start of `features#current_session` written by: Zhang Sheng Yang }"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "After entering a session, which is mentioned above, you can now edit the presence and participation details"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "of a student. `participate` allows you to toggle the participation status (from absent to present or from "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "present to absent), and `presence` allows you to toggle the presence status of a student (from not "
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "participated to participated or from participated to not participated)."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{ end of `features#current_session` written by: Zhang Sheng Yang }"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.5.1. Toggling participation status of students : `participate`"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Toggles the participation status of the students in the student list of the session."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "participate INDEX_RANGE"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* Toggles the participation status of the students at the specified `INDEX_RANGE`."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* The index range refers to the range of index numbers shown in the displayed student list of the session."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* The index range **must be a positive integer** 1, 2, 3, … OR **a positive index range** 1-4, 2-5, 2-9 … "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `participate 1-4` toggles the participation status of students 1 to 4."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "#### 5.5.2. Toggling presence status of students : `presence`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Toggles the presence status of students in the student list of the session."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "presence INDEX_RANGE"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "```"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* Toggles the presence status of the students at the specified `INDEX_RANGE`."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* The index range refers to the range of index numbers shown in the displayed student list of the session."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* The index range **must be a positive integer** 1, 2, 3, … OR **a positive index range** 1-4, 2-5, 2-9 … "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "* `presence 1-4` toggles the presence status of students 1 to 4."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `features#memo` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 5.6. Memo"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Under the `Memo` section, you can choose to `addnote` and save them when needed. "
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `features#memo` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `features#memo#addnote` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "#### 5.6.1. Adding a note : `addnote`"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Adds a note to a new line at the end of memo."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "addnote NOTE"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Note added to memo!"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `addnote clarify qn 3 with prof` adds \"clarify qn 3 with prof\" to memo."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `features#memo#addnote` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `features#memo#save_memo` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "#### 5.6.2. Save memo"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Saves the content of the memo in the hard disk."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Keyboard shortcut:**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Click on the text box in memo tab to bring focus to the text box. Text box should have a bright green outline when under focus."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "![MemoTextBox](images/MemoTextBox.png)"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Windows/Linux:"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "ctrl + s"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "MacOs:"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "cmd + s"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Memo saved!"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "```"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `features#memo#save_memo` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ start of `features#userconfirmation#clearstu` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 5.7. User confirmation"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Some commands have the ability to alter the data stored in the hard disk."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "ATAS aims to make careful decisions and further prompts user to confirm the execution of those commands."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "These commands are: `deletestu`, `editstu`,`clearstu`, `deleteses`, `editses`."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ":bulb: **Tip:**\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Both `yes` and `y` are accepted when confirming the execution of a command while `no` and `n` are both accepted when rejecting the execution of a command."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `deletestu 3` is followed with `Delete 3? (yes/no)`."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `editses 3 s/SESSION_NAME` is followed with `Edit 3? (yes/no)`."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* `clearstu` is followed with `Clear list? (yes/no)`."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "For example, confirmation of `deletestu` is shown above at [Section 5 - Features](#534-deleting-a-student--deletestu). In this case, we will show an example of rejection a `deletestu` command."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "deletestu INDEX"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Delete INDEX? (yes/no)"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   ![DeletestuConfirmationExample](images/ScreenshotDeletestuConfirmationExample.png)"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "no"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected result:**"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Delete INDEX is not executed"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "```"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   ![DeletestuNotExecuted](images/ScreenshotDeletestuNotExecuted.png)"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ end of `features#userconfirmation#clearstu` written by: Marcus Tan Wei }"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `features#saving_the_data` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 5.8. Saving the data"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "`Students`, `Sessions` and `Memo` data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually. However, you can also choose to manually save the `Memo` data if you want as described in [Section 5.6.2 - Save Memo](#562-save-memo)."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `features#saving_the_data` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `faq` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## 6. FAQ"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**A**: Install **ATAS** in the other computer and overwrite the empty data files it creates with the files that contains the data of your previous **ATAS** home folder. The previous data files can be found in the *data* folder in the same directory as your `atas.jar` file."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `faq` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ start of `command_summary` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## 7. Command summary"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "The following is a summary of all available commands for your reference."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ end of `command_summary` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ start of `command_summary#general` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 7.1. General"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Command | Format, Examples"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Switch** | `switch TAB_NAME`\u003cbr\u003e e.g., `switch sessions`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Random Name Generation** | `rng`"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Undo** | `undo`"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Redo** | `redo`"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Exit** | `bye`"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "{ end of `command_summary#general` written by: Masagca Eris Jacey }"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 7.2. Students"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{ start of `command_summary#students` written by: Zhang Sheng Yang }"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "The following is a summary of commands related to students."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Command | Format, Examples"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "**Add** | `addstu n/NAME m/MATRICULATION_NUMBER e/NUS_EMAIL_ADDRESS [t/TAG]…` \u003cbr/\u003e e.g.,\u003cbr/\u003e `addstu n/John Cena m/A0123456J e/thechamp@u.nus.edu`,\u003cbr/\u003e `addstu n/Alvina Handsome m/A0123456X e/handsome.alvina@u.nus.edu t/new`"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "**Find** | `findstu KEYWORD [MORE_KEYWORDS]` \u003cbr/\u003e e.g.,\u003cbr/\u003e `findstu John`,\u003cbr/\u003e `findstu kent ridge`"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "**Edit** | `editstu INDEX n/UPDATED_NAME` \u003cbr/\u003e e.g.,\u003cbr/\u003e `editstu 2 n/John Cena`,\u003cbr/\u003e `editstu 3 t/Joker`"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "**Delete** | `deletestu INDEX` \u003cbr/\u003e e.g.,\u003cbr/\u003e `deletestu 2`"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{ end of `command_summary#students` written by: Zhang Sheng Yang }"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ start of `command_summary#sessions` written by: Marcus Tan Wei}"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 7.3. Sessions"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Command | Format, Examples"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Add Session** | `addses s/SESSION_NAME d/SESSION_DATE` \u003cbr\u003e e.g., `addses s/Tutorial 1 d/11/11/2020`"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Clear Sessions** | `clearses`"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Delete Session** | `deleteses INDEX`"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Edit Session** | `editses` \u003cbr\u003e e.g., `editses 1 s/Lab 1`"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Enter Session** | `enterses INDEX`"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "{ end of `command_summary#sessions` written by: Marcus Tan Wei}"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 7.4. Current session"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{ start of `command_summary#current_session` written by: Zhang Sheng Yang }"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "The following is a summary relevant commands after entering a session."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Command | Format, Examples"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "**Participate** | `participate INDEX_RANGE` \u003cbr/\u003e e.g., `participate 1-4`, `participate 3`"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "**Presence** | `presence INDEX_RANGE` \u003cbr/\u003e e.g., `presence 2-3`, `presence 7`"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{ end of `command_summary#current_session` written by: Zhang Sheng Yang }"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ start of `command_summary#memo` written by: Ngoh Wei Yue }"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "### 7.5. Memo"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "Command | Format, Examples"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Add Note** | `addnote NOTE`\u003cbr\u003e e.g., `addnote clarify qn 3 with prof`"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "**Save Memo** | Keyboard shortcut: `Ctrl + s` for Windows/Linux or `Cmd + s` for MacOs"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{ end of `command_summary#memo` written by: Ngoh Wei Yue }"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 184,
      "CodingCookieRookie": 167,
      "MarcusTw": 183,
      "YuunoKun": 60,
      "-": 133,
      "erisjacey": 295
    }
  },
  {
    "path": "docs/_sass/minima/_layout.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " * Site header"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ".site-header {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  border-top: 5px solid $brand-color-dark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  border-bottom: 1px solid $brand-color-light;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  min-height: $spacing-unit * 1.865;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  line-height: $base-line-height * $base-font-size * 2.25;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  // Positioning context for the mobile navigation icon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  position: relative;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".site-title {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(1.625);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  font-weight: 300;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  letter-spacing: -1px;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  float: left;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  @include media-query($on-palm) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-right: 45px;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0026,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0026:visited {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    color: $brand-color-dark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".site-nav {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  position: absolute;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  top: 9px;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  right: $spacing-unit / 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  background-color: $background-color;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  border: 1px solid $brand-color-light;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  border-radius: 5px;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  text-align: right;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  .nav-trigger {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      display: none;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  .menu-icon {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    float: right;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 36px;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 26px;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 10px;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003e svg path {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      fill: $brand-color-dark;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  label[for\u003d\"nav-trigger\"] {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    float: right;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 36px;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 36px;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    z-index: 2;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    cursor: pointer;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  input ~ .trigger {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    clear: both;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  input:checked ~ .trigger {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 5px;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  .page-link {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    color: $text-color;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: $base-line-height;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 5px 10px;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    // Gaps between nav items, but not on the last one"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0026:not(:last-child) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "      margin-right: 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 20px;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  @media screen and (min-width: $on-medium) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    position: static;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    float: right;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: inherit;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    label[for\u003d\"nav-trigger\"] {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "      display: none;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    .menu-icon {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      display: none;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    input ~ .trigger {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      display: block;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    .page-link {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "      display: inline;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "      padding: 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0026:not(:last-child) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-right: 20px;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      margin-left: auto;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": " * Page content"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".page-content {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "  padding: $spacing-unit 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "  flex: 1 0 auto;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".page-heading {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".post-list-heading {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(1.75);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".post-list {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-left: 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "  list-style: none;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e li {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: $spacing-unit;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".post-meta {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "  font-size: $small-font-size;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "  color: $brand-color;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".post-link {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "  display: block;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(1.5);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * Posts"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".post-header {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: $spacing-unit;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".post-title,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".post-content h1 {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(2.625);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "  letter-spacing: -1px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "  line-height: 1.15;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "  @media screen and (min-width: $on-large) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(2.625);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".post-content {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: $spacing-unit;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "  h1, h2, h3 { margin-top: $spacing-unit * 2 }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "  h4, h5, h6 { margin-top: $spacing-unit }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "  h2 {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(1.75);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @media screen and (min-width: $on-large) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "      @include relative-font-size(2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "  h3 {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(1.375);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @media screen and (min-width: $on-large) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      @include relative-font-size(1.625);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "  h4 {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(1.25);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "  h5 {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(1.125);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "  h6 {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(1.0625);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".social-media-list {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  display: table;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "  margin: 0 auto;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "  li {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 5px 10px 5px 0;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0026:last-of-type { margin-right: 0 }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    a {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "      display: block;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "      padding: $spacing-unit / 4;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "      border: 1px solid $brand-color-light;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0026:hover { border-color: darken($brand-color-light, 10%) }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * Pagination navbar"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".pagination {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: $spacing-unit;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  @extend .social-media-list;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  li {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    a, div {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "      min-width: 41px;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "      text-align: center;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "      box-sizing: border-box;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    div {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "      display: block;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "      padding: $spacing-unit / 4;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      border: 1px solid transparent;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0026.pager-edge {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        color: darken($brand-color-light, 5%);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        border: 1px dashed;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Table of Contents with no list style (empty bullets)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ".toc-no-list-style ul, .toc-no-list-style ol {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  list-style-type: none;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": " * Grid helpers"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen and (min-width: $on-large) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "  .one-half {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    width: calc(50% - (#{$spacing-unit} / 2));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 262,
      "erisjacey": 6
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(studentList)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 1,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "Class StatusBarFooterLeft"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooterLeft"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "StatusBarFooterLeft --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooterLeft"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 4,
      "-": 56
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "ecp -\u003e ec ++: index, editStudentDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 1,
      "-": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "title: ATAS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W16-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W16-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "**Addendum for Teaching Assistants (ATAS)** is a desktop applicaton that aims to make users\u0027 teaching experience effortless. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "In the current version, ATAS targets NUS Teaching Assistants (TA) that are teaching the CS1010S module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "With ATAS, users can mark attendance, track students\u0027 progress, send emails to students and many more."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* If you are interested in using ATAS, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* If you are interested in developing ATAS, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103t-w16-4.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103t-w16-4.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "* [About Us](/https://ay2021s1-cs2103t-w16-4.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 3,
      "-": 12,
      "erisjacey": 12
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "This command allows users of the StudentList application to add optional remarks to people in their student list and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/atas/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Changes the remark of an existing student in the student list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `StudentListParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the student identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            + \"by the index number used in the last student listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index of the student in the filtered student list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param remark of the student to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ":information_source: Don’t forget to update `StudentListParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of student data. We achieve that by working with the `Student` model. Each field in a Student is implemented as a separate class (e.g. a `Name` object represents the student’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a student."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Create a new `Remark` in `seedu.address.model.student`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each student."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "Simply add the following to [`atas.ui.studentlist.StudentCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**`StudentCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Then insert the following into [`main/resources/view/StudentListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**`StudentListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "## Modify `Student` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Since `StudentCard` displays data from a `Student`, we need to update `Student` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### Modify `Student`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "We change the constructor of `Student` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### Update other usages of `Student`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Unfortunately, a change to `Student` will cause other commands to break, you will have to modify these commands to use the updated `Student`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Student` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "StudentList stores data by serializing `JsonAdaptedStudent` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedStudent` to work with our new `Student`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ":exclamation: You must delete StudentList’s storage file located at `/data/studentlist.json` before running it! Not doing so will cause StudentList to default to an empty student list!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Now that we have finalized the `Student` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**`StudentCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    remark.setText(student.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Student`. Since all fields in a `Student` are immutable, we create a new instance of a `Student` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "save it with `Model#setStudent()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Student: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Student: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d new Student(studentToEdit.getName(), studentToEdit.getPhone(), studentToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                studentToEdit.getAddress(), remark, studentToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStudent));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * {@code studentToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private String generateSuccessMessage(Student studentToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return String.format(message, studentToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "This concludes the tutorial for adding a new `Command` to StudentList."
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 43,
      "-": 347,
      "erisjacey": 4
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.student.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 2,
      "-": 101
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `atas.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "       Person studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "       Person editedStudent \u003d createEditedPerson(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "       if (!studentToEdit.isSamePerson(editedStudent) \u0026\u0026 model.hasPerson(editedStudent)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "       model.setPerson(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "       students.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 6,
      "-": 243,
      "erisjacey": 1
    }
  },
  {
    "path": "src/main/java/atas/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.FileUtil.isValidPath;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 5,
      "-": 60
    }
  },
  {
    "path": "src/main/java/atas/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "// This comment is just to initiate the PR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 3,
      "-": 24
    }
  },
  {
    "path": "src/main/java/atas/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.ConfigUtil.readConfig;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.ConfigUtil.saveConfig;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.ReadOnlySessionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.storage.AtasStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.storage.JsonAtasStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.storage.JsonSessionListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.storage.MemoStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.storage.SessionListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.storage.TxtMemoStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ATAS ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        AtasStorage atasStorage \u003d new JsonAtasStorage(userPrefs.getStudentListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionListStorage sessionListStorage \u003d new JsonSessionListStorage(userPrefs.getSessionListFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        MemoStorage memoStorage \u003d new TxtMemoStorage(userPrefs.getMemoFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        storage \u003d new StorageManager(sessionListStorage, atasStorage, userPrefsStorage, memoStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s student list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The data from the sample student list will be used instead if {@code storage}\u0027s student list is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * or an empty student list will be used instead if errors occur when reading {@code storage}\u0027s student list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Optional\u003cReadOnlySessionList\u003e sessionListOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Optional\u003cReadOnlyStudentList\u003e studentListOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ReadOnlyStudentList initialDataAb;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ReadOnlySessionList initialDataSl;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String memoContent;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            sessionListOptional \u003d storage.readSessionList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            studentListOptional \u003d storage.readStudentList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            memoContent \u003d storage.readMemo();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (sessionListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample SessionList\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (studentListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample StudentList\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            initialDataAb \u003d studentListOptional.orElseGet(SampleDataUtil::getSampleStudentList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ReadOnlyStudentList finalInitialDataAb \u003d initialDataAb;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            initialDataSl \u003d sessionListOptional.orElseGet(SampleDataUtil::getSampleSessionList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            initialDataSl.updateStudentList(finalInitialDataAb.getStudentList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty StudentList,\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    + \" SessionList and default Memo content\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            initialDataAb \u003d new StudentList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            initialDataSl \u003d new SessionList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            memoContent \u003d MemoStorage.DEFAULT_MEMO_CONTENT;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty StudentList,\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                            + \" SessionList and default Memo content\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            initialDataAb \u003d new StudentList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            initialDataSl \u003d new SessionList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            memoContent \u003d MemoStorage.DEFAULT_MEMO_CONTENT;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(initialDataSl, initialDataAb, userPrefs, memoContent);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        modelManager.refreshStatistics();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return modelManager;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty StudentList\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        logger.info(\"Starting ATAS \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping ATAS ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 12,
      "MarcusTw": 17,
      "YuunoKun": 16,
      "erisjacey": 30,
      "-": 137
    }
  },
  {
    "path": "src/main/java/atas/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/atas/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/atas/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final String LOG_FILE \u003d \"atas.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/atas/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final String MESSAGE_INVALID_SESSION_DISPLAYED_INDEX \u003d \"The session index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX_RANGE \u003d \"The student index range\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \" provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_SESSION_DOES_NOT_EXIST \u003d \"The session does not exist\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_SINGLE_STUDENT_LISTED_OVERVIEW \u003d \"%1$d student listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_INVALID_CONFIRMATION_INPUT \u003d \"Confirmation input is invalid! \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            + \"Try again? (yes/no)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_NOT_ON_CURRENT_SESSION \u003d \"You can only use this on the current session tab!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_NOT_IN_SESSION_TAB \u003d \"You have to be in the session tab to use this!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Retrieves the correct message to be displayed to the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * based on the number of students in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param numberOfStudents Number of students in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @return message to be displayed to user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static String getStudentListedMessage(int numberOfStudents) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (numberOfStudents \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return MESSAGE_SINGLE_STUDENT_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            // all other cases including 0 students"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return MESSAGE_MULTIPLE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 18,
      "CodingCookieRookie": 1,
      "MarcusTw": 4,
      "YuunoKun": 3,
      "erisjacey": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/atas/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/atas/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void increaseZeroBasedIndexByOne() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        zeroBasedIndex +\u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Decreases zero based index by 1."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void decreaseZeroBasedIndexByOne() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (!(zeroBasedIndex \u003e 0)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            zeroBasedIndex -\u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns zero based index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Returns zero based index."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns one based index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Returns one based index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return String.valueOf(zeroBasedIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 22,
      "MarcusTw": 5,
      "erisjacey": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/atas/commons/core/random/RandomGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core.random;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a psuedo-random number generator."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Makes use of the {@code Random} Java class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class RandomGenerator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final int SEED \u003d 1; // arbitrary number chosen for some consistency"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Random rng;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private RandomGenerator(int seed) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        rng \u003d new Random(seed);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns a new {@code RandomGenerator} with arbitrary seed 1."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static RandomGenerator makeRandomGenerator() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new RandomGenerator(SEED);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns the zero-based index of the next randomly-selected student."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Index getNextIndex(int max) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Index.fromZeroBased(rng.nextInt(max));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 36
    }
  },
  {
    "path": "src/main/java/atas/commons/core/statistics/StatisticalValues.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.commons.core.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A set of state values representing statistical states of certain data."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class StatisticalValues {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final int STAT_NULL \u003d -1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final int STAT_NOTFULL \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final int STAT_FULL \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final int STAT_INVALID \u003d -2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static int getValue(int actual, int expected) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (actual \u003c 0 || expected \u003c 0) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return STAT_INVALID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (expected \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return STAT_NULL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else if (actual \u003c expected) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return STAT_NOTFULL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else if (actual \u003d\u003d expected) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return STAT_FULL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return STAT_INVALID;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 28
    }
  },
  {
    "path": "src/main/java/atas/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/atas/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/atas/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/atas/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/atas/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/atas/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/atas/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.FileUtil.readFromFile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.FileUtil.writeToFile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return fromJsonString(readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 7,
      "-": 138
    }
  },
  {
    "path": "src/main/java/atas/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/atas/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the StudentList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @see Model#getStudentList()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    ReadOnlyStudentList getStudentList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of sessions */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    ObservableList\u003cSession\u003e getFilteredSessionList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of student attributes */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    ObservableList\u003cAttributes\u003e getFilteredAttributesList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /** Sets currentSession to be false */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void disableCurrentSession();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /** Sets currentSession to be false */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void enableCurrentSession();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the user prefs\u0027 student list file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Path getStudentListFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Returns the Memo content."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    String getMemoContent();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns the name and date of the current entered session."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    String getLeftSessionDetails();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns the stats of the current entered session."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    String getRightSessionDetails();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Saves content into the Memo."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param memoContent The String content that should be saved into the Memo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    void saveMemoContent(String memoContent) throws CommandException;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 13,
      "CodingCookieRookie": 24,
      "MarcusTw": 8,
      "erisjacey": 9,
      "-": 34
    }
  },
  {
    "path": "src/main/java/atas/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.parser.AtasParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final AtasParser atasParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        atasParser \u003d new AtasParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Command command \u003d atasParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            storage.saveSessionList(model.getSessionList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            storage.saveStudentList(model.getStudentList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            storage.saveMemo(model.getMemo());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ReadOnlyStudentList getStudentList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return model.getStudentList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return model.getFilteredSessionList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public ObservableList\u003cAttributes\u003e getFilteredAttributesList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return model.getCurrentAttributesList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Path getStudentListFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return model.getStudentListFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void disableCurrentSession() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.setCurrentSessionFalse();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void enableCurrentSession() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public String getMemoContent() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return model.getMemoContent();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String getLeftSessionDetails() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return model.getLeftSessionDetails();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String getRightSessionDetails() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return model.getRightSessionDetails();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void saveMemoContent(String content) throws CommandException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        model.saveMemoContent(content);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            storage.saveMemo(model.getMemo());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 16,
      "CodingCookieRookie": 33,
      "MarcusTw": 12,
      "YuunoKun": 1,
      "erisjacey": 13,
      "-": 54
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /** The application should switch tab. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final Tab switchTab;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /** The user is editing the memo. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final boolean editMemo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /** The user is entering a session. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final boolean isEnterSession;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this(feedbackToUser, false, null, false, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                         boolean showHelp, Tab switchTab, boolean editMemo, boolean exit, boolean isEnterSession) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.switchTab \u003d switchTab;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.editMemo \u003d editMemo;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.isEnterSession \u003d isEnterSession;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return switchTab;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public boolean isSwitchTab() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return switchTab !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public boolean isEditMemo() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return editMemo;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public boolean isEnterSession() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return isEnterSession;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 switchTab \u003d\u003d otherCommandResult.switchTab"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 editMemo \u003d\u003d otherCommandResult.editMemo"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 isEnterSession \u003d\u003d otherCommandResult.isEnterSession;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, switchTab, editMemo, exit, isEnterSession);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"feedbackToUser: \" + feedbackToUser + \", \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"showHelp: \" + showHelp + \", \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"switchTab: \" + switchTab + \", \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"exit: \" + exit + \", \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"isEnterSession: \" + isEnterSession);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 26,
      "CodingCookieRookie": 14,
      "MarcusTw": 2,
      "erisjacey": 16,
      "-": 57
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/atas/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Bye beautiful :(\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXIT_ACKNOWLEDGEMENT), false, null, false, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 1,
      "CodingCookieRookie": 1,
      "erisjacey": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/atas/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, null, false, false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 1,
      "erisjacey": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/atas/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.model.Model.PREDICATE_SHOW_ALL_SESSIONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.exceptions.UnableToRedoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Undoes a the effects of the previous command, if possible."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Previous command successfully redone!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(Model model) throws UnableToRedoException, CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            model.redo();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            model.updateFilteredSessionList(PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (UnableToRedoException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 30
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/atas/RngCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Generates the name of a random student."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class RngCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rng\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generates the name of a random student.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Student selected: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_NO_STUDENTS \u003d \"There are no students to choose from!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            studentIndex \u003d model.generateRandomStudentIndex();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new CommandException(MESSAGE_NO_STUDENTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assert studentIndex !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Student student \u003d studentList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, student.getName()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 43
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/atas/SwitchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.Tab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Switches tab using the name of the destination tab."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Name of destination tab is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches to the specified tab (case-insensitive).\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Parameters: TAB_NAME (must be an existing tab)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Examples: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + COMMAND_WORD + \" students, \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + COMMAND_WORD + \" sessions, \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + COMMAND_WORD + \" current, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + COMMAND_WORD + \" memo\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_SWITCH_TAB_SUCCESS \u003d \"Switched to %1$s tab\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_INVALID_TAB \u003d \"Tab does not exist!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_ALREADY_ON_TAB \u003d \"Already at %1$s tab!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final String tabName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public SwitchCommand(String tabName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Tab tab;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(tabName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String trimmedTab \u003d tabName.toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        switch(trimmedTab) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        case \"students\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            tab \u003d Tab.STUDENTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        case \"sessions\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            tab \u003d Tab.SESSIONS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        case \"current\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            tab \u003d Tab.CURRENT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        case \"memo\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            tab \u003d Tab.MEMO;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SWITCH_TAB_SUCCESS, tab.toDisplayName()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, tab, false, false, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 tabName.equals(((SwitchCommand) other).tabName)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 56,
      "CodingCookieRookie": 5,
      "erisjacey": 9
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/atas/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.model.Model.PREDICATE_SHOW_ALL_SESSIONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.exceptions.UnableToUndoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Undoes a the effects of the previous command, if possible."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Previous command successfully undone!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(Model model) throws UnableToUndoException, CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            model.undo();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            model.updateFilteredSessionList(PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (UnableToUndoException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 30
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/confirmation/ConfirmCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.confirmation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public abstract class ConfirmCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final DangerousCommand dangerousCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmCommand(DangerousCommand dangerousCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.dangerousCommand \u003d dangerousCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DangerousCommand getDangerousCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.dangerousCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 23,
      "erisjacey": 5
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/confirmation/ConfirmationAcceptCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.confirmation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Confirms an execution of a DangerousCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationAcceptCommand extends ConfirmCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Constructs a {@code ConfirmationAcceptCommand} with the specified DangerousCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationAcceptCommand(DangerousCommand dangerousCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(dangerousCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DangerousCommand dangerousCommand \u003d this.getDangerousCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(dangerousCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return dangerousCommand.execute(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!(other instanceof ConfirmationAcceptCommand)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // calls for checks between the dangerousCommands"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DangerousCommand otherDangerousCommand \u003d ((ConfirmationAcceptCommand) other).getDangerousCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.getDangerousCommand().equals(otherDangerousCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 2,
      "MarcusTw": 43,
      "erisjacey": 4
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/confirmation/ConfirmationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.confirmation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Confirms whether or not to execute a command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationCommand extends ConfirmCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION \u003d \"(yes/no)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION_DELETE \u003d \"Delete %1$d? \" + MESSAGE_CONFIRMATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION_EDIT \u003d \"Edit %1$d? \" + MESSAGE_CONFIRMATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION_CLEAR \u003d \"Clear list? \" + MESSAGE_CONFIRMATION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String ACCEPT_COMMAND_FULL \u003d \"yes\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String ACCEPT_COMMAND_SHORT \u003d \"y\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String REJECT_COMMAND_FULL \u003d \"no\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String REJECT_COMMAND_SHORT \u003d \"n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Constructs a {@code ConfirmationCommand} with the specified DangerousCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationCommand(DangerousCommand dangerousCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(dangerousCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new CommandResult(String.format(\"%s? %s\", getDangerousCommand(), MESSAGE_CONFIRMATION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationAcceptCommand accept() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new ConfirmationAcceptCommand(getDangerousCommand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationRejectCommand reject() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new ConfirmationRejectCommand(getDangerousCommand());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!(other instanceof ConfirmationCommand)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // calls for checks between the dangerousCommands"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DangerousCommand otherDangerousCommand \u003d ((ConfirmationCommand) other).getDangerousCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.getDangerousCommand().equals(otherDangerousCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 2,
      "MarcusTw": 59,
      "erisjacey": 3
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/confirmation/ConfirmationRejectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.confirmation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Rejects the execution of a DangerousCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationRejectCommand extends ConfirmCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_REJECT_COMMAND \u003d \"%1$s is not executed\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Constructs a {@code ConfirmationRejectCommand} with the specified DangerousCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationRejectCommand(DangerousCommand dangerousCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(dangerousCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DangerousCommand dangerousCommand \u003d this.getDangerousCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(dangerousCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REJECT_COMMAND, dangerousCommand.toString()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!(other instanceof ConfirmationRejectCommand)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // calls for checks between the dangerousCommands"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DangerousCommand otherDangerousCommand \u003d ((ConfirmationRejectCommand) other).getDangerousCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.getDangerousCommand().equals(otherDangerousCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 2,
      "MarcusTw": 45,
      "erisjacey": 3
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/confirmation/DangerousCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.confirmation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public abstract class DangerousCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 13,
      "erisjacey": 5
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/memo/AddNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.logic.commands.memo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Appends a note on a new line to the end of {@code Memo}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addnote\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Appends a note on a new line to the end of the memo.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"NOTE\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"clarify qn 4 with prof\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Note added to memo!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_EMPTY_NOTE \u003d \"Note is empty!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final String toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Creates an AddNoteCommand to add the specified String of text."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public AddNoteCommand(String note) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        toAdd \u003d note;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (toAdd.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_NOTE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        model.addNoteToMemo(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, null, true, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                || (other instanceof AddNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddNoteCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 54
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/sessionlist/AddSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Creates a new class session."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class AddSessionCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addses\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a session to the class. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + CliSyntax.PREFIX_SESSION_NAME + \"SESSION_NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + CliSyntax.PREFIX_SESSION_DATE + \"SESSION_DATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + CliSyntax.PREFIX_SESSION_NAME + \"Tutorial 1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + CliSyntax.PREFIX_SESSION_DATE + \"12/7/2020 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New session added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSION \u003d \"This session already exists in this class.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final Session toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Creates an AddSessionCommand to add the specified {@code Session}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public AddSessionCommand(Session session) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        toAdd \u003d session;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (model.hasSession(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        model.addSession(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || (other instanceof AddSessionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddSessionCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 6,
      "CodingCookieRookie": 2,
      "YuunoKun": 46,
      "erisjacey": 8
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/sessionlist/ClearSessionsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.confirmation.DangerousCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Clears the session list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ClearSessionsCommand extends DangerousCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearses\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"ATAS has cleared all sessions from your list!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        model.resetSessionList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return other instanceof ClearSessionsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return \"Clear session list\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "CodingCookieRookie": 2,
      "MarcusTw": 7,
      "YuunoKun": 20,
      "erisjacey": 4
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/sessionlist/DeleteSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.DangerousCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DeleteSessionCommand extends DangerousCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteses\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \": Deletes the session identified by the index number used in the displayed session list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_DELETE_SESSION_SUCCESS \u003d \"Deleted session: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_SESSION_NOT_FOUND \u003d \"Session not found.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Creates a DeleteSessionCommand to delete the specified {@code Session}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public DeleteSessionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        List\u003cSession\u003e lastShownList \u003d model.getFilteredSessionList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session sessionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (!model.hasSession(sessionToDelete)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(MESSAGE_SESSION_NOT_FOUND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        model.deleteSession(sessionToDelete, targetIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SESSION_SUCCESS, sessionToDelete));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || (other instanceof DeleteSessionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteSessionCommand) other).targetIndex));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String oneBasedIndex \u003d String.valueOf(targetIndex.getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return \"Delete \" + oneBasedIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 31,
      "CodingCookieRookie": 7,
      "YuunoKun": 29,
      "erisjacey": 7
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/sessionlist/EditSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.CollectionUtil.isAnyNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.confirmation.DangerousCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class EditSessionCommand extends DangerousCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editses\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the session identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"by the index number used in the displayed session list. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_SESSION_NAME + \"SESSION_NAME] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_SESSION_DATE + \"DATE] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + CliSyntax.PREFIX_SESSION_NAME + \"Tutorial 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + CliSyntax.PREFIX_SESSION_DATE + \"10/10/2020\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_EDIT_SESSION_SUCCESS \u003d \"Edited session: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSION \u003d \"This session already exists in the session list.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final EditSessionCommand.EditSessionDescriptor editSessionDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parameterized Constructor."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param index The Index of the session in the filtered session list to edit."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param editSessionDescriptor details to edit the session with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public EditSessionCommand(Index index,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                              EditSessionCommand.EditSessionDescriptor editSessionDescriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(editSessionDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.editSessionDescriptor \u003d new EditSessionCommand.EditSessionDescriptor(editSessionDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        List\u003cSession\u003e lastShownList \u003d model.getFilteredSessionList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session sessionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session editedSession \u003d createEditedSession(sessionToEdit, editSessionDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!sessionToEdit.isSameSession(editedSession) \u0026\u0026 model.hasSession(editedSession)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        model.setSession(sessionToEdit, editedSession);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SESSION_SUCCESS, editedSession));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String oneBasedIndex \u003d String.valueOf(index.getOneBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return \"Edit \" + oneBasedIndex;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Creates and returns a {@code Session} with the details of {@code sessionToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * edited with {@code editSessionDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static Session createEditedSession(Session sessionToEdit,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                                              EditSessionCommand.EditSessionDescriptor editSessionDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assert sessionToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionName updatedSessionName \u003d editSessionDescriptor.getSessionName().orElse(sessionToEdit.getSessionName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionDate updatedSessionDate \u003d editSessionDescriptor.getSessionDate().orElse(sessionToEdit.getSessionDate());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session editedSession \u003d new Session(updatedSessionName, updatedSessionDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedSession.getAttributeList().setAll(sessionToEdit.getAttributeList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return editedSession;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!(other instanceof EditSessionCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand e \u003d (EditSessionCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 editSessionDescriptor.equals(e.editSessionDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Stores the details to edit the session with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static class EditSessionDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        private SessionName sessionName;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        private SessionDate sessionDate;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public EditSessionDescriptor() {}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public EditSessionDescriptor(EditSessionCommand.EditSessionDescriptor toCopy) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            setSessionName(toCopy.sessionName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            setSessionDate(toCopy.sessionDate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return isAnyNonNull(sessionName, sessionDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public Optional\u003cSessionName\u003e getSessionName() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return Optional.ofNullable(sessionName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void setSessionName(SessionName sessionName) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public Optional\u003cSessionDate\u003e getSessionDate() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return Optional.ofNullable(sessionDate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void setSessionDate(SessionDate sessionDate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            this.sessionDate \u003d sessionDate;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            // instanceof handles different types"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (!(other instanceof EditSessionCommand.EditSessionDescriptor)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            EditSessionCommand.EditSessionDescriptor e \u003d (EditSessionCommand.EditSessionDescriptor) other;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return getSessionName().equals(e.getSessionName())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    \u0026\u0026 getSessionDate().equals(e.getSessionDate());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 31,
      "CodingCookieRookie": 4,
      "MarcusTw": 5,
      "YuunoKun": 127,
      "erisjacey": 11
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/sessionlist/EnterSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.Tab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class EnterSessionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"enterses\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters a specified session. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Session entered: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_ALREADY_IN_SESSION \u003d \"Already in session %d!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    //sessionIndex should be zero-based here due to parser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private final Index sessionIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Creates an AddSessionCommand to add the specified {@code Session}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public EnterSessionCommand(Index sessionIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        requireNonNull(sessionIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.sessionIndex \u003d sessionIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (sessionIndex.getZeroBased() \u003e\u003d model.getFilteredSessionList().size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.enterSession(sessionIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sessionIndex.getOneBased()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            false, Tab.CURRENT, false, false, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                || (other instanceof EnterSessionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u0026\u0026 sessionIndex.equals(((EnterSessionCommand) other).sessionIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String oneBasedIndex \u003d String.valueOf(sessionIndex.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return \"Enter \" + oneBasedIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 8,
      "CodingCookieRookie": 44,
      "erisjacey": 9
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/sessionlist/session/ParticipateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX_RANGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Toggles the participation status of certain students in particular sessions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ParticipateCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"participate\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles the participation status of students in a \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"session.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"Parameters: INDEX_RANGE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + IndexRange.MESSAGE_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" 3, \" + COMMAND_WORD + \" 1-4\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Participation status changed\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final IndexRange range;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final SessionName sessionName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Creates an ParticipateCommand to add the specified {@code IndexRange}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ParticipateCommand(SessionName sessionName, IndexRange range) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(range);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.range \u003d range;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Creates an ParticipateCommand to add the specified {@code IndexRange}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public ParticipateCommand(IndexRange range) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.range \u003d range;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.sessionName \u003d new SessionName(\"DEFAULT\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (!model.returnCurrentSessionEnabledStatus()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_IN_SESSION_TAB);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cAttributes\u003e lastShownList \u003d model.getCurrentAttributesList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (range.getZeroBasedUpper() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX_RANGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        model.updateParticipationBySessionName(sessionName, range);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || (other instanceof ParticipateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 range.equals(((ParticipateCommand) other).range)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 sessionName.equals(((ParticipateCommand) other).sessionName));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 11,
      "CodingCookieRookie": 12,
      "YuunoKun": 45,
      "erisjacey": 10
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/sessionlist/session/PresenceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX_RANGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Toggles the participation status of certain students in particular sessions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class PresenceCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"presence\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles the presence status of students in a \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"session.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"Parameters: INDEX_RANGE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + IndexRange.MESSAGE_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" 3, \" + COMMAND_WORD + \" 1-4\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Presence status changed\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final IndexRange range;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final SessionName sessionName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Creates an PresenceCommand to add the specified {@code IndexRange}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public PresenceCommand(SessionName sessionName, IndexRange range) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(range);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.range \u003d range;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Creates an PresenceCommand to add the specified {@code IndexRange}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public PresenceCommand(IndexRange range) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        requireNonNull(range);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.range \u003d range;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.sessionName \u003d new SessionName(\"DEFAULT\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (!model.returnCurrentSessionEnabledStatus()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_IN_SESSION_TAB);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cAttributes\u003e lastShownList \u003d model.getCurrentAttributesList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (range.getZeroBasedUpper() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX_RANGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        model.updatePresenceBySessionName(sessionName, range);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || (other instanceof PresenceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 range.equals(((PresenceCommand) other).range)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 sessionName.equals(((PresenceCommand) other).sessionName));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 11,
      "CodingCookieRookie": 13,
      "YuunoKun": 45,
      "erisjacey": 10
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/studentlist/AddStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Adds a student to the class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class AddStudentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addstu\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to the class. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + CliSyntax.PREFIX_MATRICULATION + \"MATRICULATION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + CliSyntax.PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + CliSyntax.PREFIX_MATRICULATION + \"A1234567X \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + CliSyntax.PREFIX_EMAIL + \"johnd@u.nus.edu \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"absent \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"foreigner\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the class\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public AddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                || (other instanceof AddStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddStudentCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 6,
      "CodingCookieRookie": 2,
      "MarcusTw": 10,
      "YuunoKun": 1,
      "erisjacey": 16,
      "-": 29
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/studentlist/ClearStudentListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.DangerousCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Clears the student list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ClearStudentListCommand extends DangerousCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearstu\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"ATAS has cleared all students from your list!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.clearStudentList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return \"Clear list\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "CodingCookieRookie": 1,
      "MarcusTw": 7,
      "erisjacey": 6,
      "-": 14
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/studentlist/DeleteStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.DangerousCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the student list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class DeleteStudentCommand extends DangerousCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletestu\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted student: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public DeleteStudentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.deleteStudent(studentToDelete, targetIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                || (other instanceof DeleteStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteStudentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String oneBasedIndex \u003d String.valueOf(targetIndex.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return \"Delete \" + oneBasedIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 6,
      "MarcusTw": 15,
      "erisjacey": 7,
      "-": 34
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/studentlist/EditStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.CollectionUtil.isAnyNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.DangerousCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Edits the details of an existing student in the student list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class EditStudentCommand extends DangerousCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editstu\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_MATRICULATION + \"MATRICULATION] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + CliSyntax.PREFIX_MATRICULATION + \"A7654321X \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + CliSyntax.PREFIX_EMAIL + \"johndoe@u.nus.edu\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited student: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the student list.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Creates an EditStudentCommand to edit the person at specified Index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The Index of the student in the filtered student list to edit."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param editStudentDescriptor The details to edit the student with."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public EditStudentCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.commit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String oneBasedIndex \u003d String.valueOf(index.getOneBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return \"Edit \" + oneBasedIndex;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Matriculation updatedMatriculation \u003d editStudentDescriptor.getMatriculation()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                .orElse(studentToEdit.getMatriculation());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new Student(updatedName, updatedMatriculation, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (!(other instanceof EditStudentCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditStudentCommand e \u003d (EditStudentCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        private Matriculation matriculation;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            setMatriculation(toCopy.matriculation);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return isAnyNonNull(name, matriculation, email, tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void setMatriculation(Matriculation matriculation) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            this.matriculation \u003d matriculation;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public Optional\u003cMatriculation\u003e getMatriculation() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return Optional.ofNullable(matriculation);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    \u0026\u0026 getMatriculation().equals(e.getMatriculation())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 10,
      "MarcusTw": 47,
      "YuunoKun": 7,
      "erisjacey": 16,
      "-": 140
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/studentlist/FindStudentsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Finds and lists all students in student list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class FindStudentsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findstu\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public FindStudentsCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        int numberOfStudents \u003d model.getFilteredStudentList().size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(Messages.getStudentListedMessage(numberOfStudents), numberOfStudents));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                || (other instanceof FindStudentsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindStudentsCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 7,
      "CodingCookieRookie": 2,
      "MarcusTw": 4,
      "erisjacey": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/atas/logic/commands/studentlist/ListStudentsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Lists all students in the student list to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class ListStudentsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"liststu\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "MarcusTw": 3,
      "erisjacey": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/AddNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.memo.AddNoteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.memo.AddNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Parses input arguments and creates a new AddNoteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class AddNoteCommandParser implements Parser\u003cAddNoteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Parses the given {@code String} of argument in the context of the AddNoteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * and returns an AddNoteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public AddNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (args.length() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // substring() to get rid of additional whitespace after command word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new AddNoteCommand(args.substring(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 29
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/AddSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.sessionlist.AddSessionCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_SESSION_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.model.session.SessionDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.AddSessionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Parses input arguments and creates a new AddSessionCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class AddSessionCommandParser implements Parser\u003cAddSessionCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddSessionCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * and returns an AddSessionCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public AddSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SESSION_DATE, PREFIX_SESSION_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SESSION_DATE, PREFIX_SESSION_NAME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SessionName sessionName \u003d ParserUtil.parseSessionName(argMultimap.getValue(PREFIX_SESSION_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionDate sessionDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            sessionDate \u003d ParserUtil.parseSessionDate(argMultimap.getValue(PREFIX_SESSION_DATE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d new Session(sessionName, sessionDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new AddSessionCommand(session);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 6,
      "CodingCookieRookie": 4,
      "YuunoKun": 37,
      "erisjacey": 11
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/AddStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.studentlist.AddStudentCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_MATRICULATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.AddStudentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Parses input arguments and creates a new AddStudentCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class AddStudentCommandParser implements Parser\u003cAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStudentCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * and returns an AddStudentCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public AddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRICULATION, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MATRICULATION, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Matriculation matriculation \u003d ParserUtil.parseMatriculation(argMultimap.getValue(PREFIX_MATRICULATION).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student student \u003d new Student(name, matriculation, email, tagList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new AddStudentCommand(student);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 7,
      "CodingCookieRookie": 4,
      "MarcusTw": 6,
      "YuunoKun": 3,
      "erisjacey": 9,
      "-": 29
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/AtasParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.atas.HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.RedoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.RngCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.SwitchCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.ConfirmationCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.memo.AddNoteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.AddSessionCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.ClearSessionsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.DeleteSessionCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.EditSessionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.EnterSessionCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.session.ParticipateCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.session.PresenceCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.AddStudentCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.FindStudentsCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.ListStudentsCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class AtasParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /** The command to be executed after confirmation prompt*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Optional\u003cConfirmationCommand\u003e previousCommand \u003d Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Tab inClassTab;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Removes the previous confirmation command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private void removePreviousCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.previousCommand \u003d Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert userInput !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert matcher !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        final String arguments;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (commandWord.equals(AddNoteCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            arguments \u003d userInput.substring(AddNoteCommand.COMMAND_WORD.length());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // If there is an edit, delete or clear, there should be a previous command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (previousCommand.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Command result \u003d new ConfirmationParser(previousCommand.get()).parse(userInput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            // Remove previous command if the result is able to be executed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            removePreviousCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            case AddStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            case EditStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                //Sets the previous command to a confirmation edit student command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                this.previousCommand \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        Optional.of(new ConfirmationCommand(new EditStudentCommandParser().parse(arguments)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return previousCommand.get();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            case DeleteStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                //Sets the previous command to a confirmation delete student command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                this.previousCommand \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        Optional.of(new ConfirmationCommand(new DeleteStudentCommandParser().parse(arguments)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return previousCommand.get();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            case ClearStudentListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                //Sets the previous command to a confirmation clear students command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                this.previousCommand \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        Optional.of(new ConfirmationCommand(new ClearStudentListCommand()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return previousCommand.get();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            case FindStudentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                return new FindStudentsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            case ListStudentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                return new ListStudentsCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                return new RedoCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            case AddSessionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                return new AddSessionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            case DeleteSessionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                this.previousCommand \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        Optional.of(new ConfirmationCommand(new DeleteSessionCommandParser().parse(arguments)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return previousCommand.get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            case EditSessionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                this.previousCommand \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        Optional.of(new ConfirmationCommand(new EditSessionCommandParser().parse(arguments)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return previousCommand.get();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case ClearSessionsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                this.previousCommand \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        Optional.of(new ConfirmationCommand(new ClearSessionsCommand()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return previousCommand.get();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            case ParticipateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                return new ParticipateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            case PresenceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                return new PresenceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case EnterSessionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                return new EnterSessionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            case AddNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                return new AddNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            case RngCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                return new RngCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 30,
      "CodingCookieRookie": 14,
      "MarcusTw": 41,
      "YuunoKun": 14,
      "erisjacey": 31,
      "-": 43
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Prefix PREFIX_MATRICULATION \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final Prefix PREFIX_SESSION_NAME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final Prefix PREFIX_SESSION_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "YuunoKun": 1,
      "erisjacey": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/ConfirmationParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_CONFIRMATION_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.confirmation.ConfirmationCommand.ACCEPT_COMMAND_FULL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.confirmation.ConfirmationCommand.ACCEPT_COMMAND_SHORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.confirmation.ConfirmationCommand.REJECT_COMMAND_FULL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.confirmation.ConfirmationCommand.REJECT_COMMAND_SHORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.ConfirmCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.ConfirmationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationParser implements Parser\u003cConfirmCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final ConfirmationCommand confirmationCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmationParser(ConfirmationCommand confirmationCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.confirmationCommand \u003d confirmationCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ConfirmCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String lowerCaseInput \u003d userInput.toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (lowerCaseInput.equals(ACCEPT_COMMAND_FULL) || lowerCaseInput.equals(ACCEPT_COMMAND_SHORT)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return confirmationCommand.accept();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (lowerCaseInput.equals(REJECT_COMMAND_FULL) || lowerCaseInput.equals(REJECT_COMMAND_SHORT)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return confirmationCommand.reject();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_CONFIRMATION_INPUT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 28,
      "erisjacey": 9
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/DeleteSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.DeleteSessionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Parses input arguments and creates a new DeleteSessionCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DeleteSessionCommandParser implements Parser\u003cDeleteSessionCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteSessionCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * and returns a DeleteSessionCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DeleteSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return new DeleteSessionCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSessionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 4,
      "YuunoKun": 21,
      "erisjacey": 4
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/DeleteStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.studentlist.DeleteStudentCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Parses input arguments and creates a new DeleteStudentCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class DeleteStudentCommandParser implements Parser\u003cDeleteStudentCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStudentCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * and returns a DeleteStudentCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public DeleteStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return new DeleteStudentCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 8,
      "erisjacey": 5,
      "-": 17
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/EditSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.sessionlist.EditSessionCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_SESSION_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.model.session.SessionDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.EditSessionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Parses input arguments and creates a new EditSessionCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class EditSessionCommandParser implements Parser\u003cEditSessionCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditSessionCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * and returns an EditSessionCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public EditSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SESSION_NAME, PREFIX_SESSION_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, EditSessionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor \u003d new EditSessionCommand.EditSessionDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SESSION_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            descriptor.setSessionName(ParserUtil.parseSessionName(argMultimap.getValue(PREFIX_SESSION_NAME).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SESSION_DATE).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                descriptor.setSessionDate(ParserUtil.parseSessionDate(argMultimap.getValue(PREFIX_SESSION_DATE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!descriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new EditSessionCommand(index, descriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 12,
      "CodingCookieRookie": 3,
      "YuunoKun": 35,
      "erisjacey": 9
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/EditStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.studentlist.EditStudentCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.studentlist.EditStudentCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_MATRICULATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Parses input arguments and creates a new EditStudentCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class EditStudentCommandParser implements Parser\u003cEditStudentCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditStudentCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * and returns an EditStudentCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public EditStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRICULATION, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MATRICULATION).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            editStudentDescriptor.setMatriculation(ParserUtil.parseMatriculation("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    argMultimap.getValue(PREFIX_MATRICULATION).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new EditStudentCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 8,
      "CodingCookieRookie": 7,
      "MarcusTw": 8,
      "YuunoKun": 3,
      "erisjacey": 11,
      "-": 44
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/EnterSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.EnterSessionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class EnterSessionCommandParser implements Parser \u003cEnterSessionCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EnterSessionCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * and returns an EnterSessionCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public EnterSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new EnterSessionCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterSessionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "CodingCookieRookie": 17,
      "erisjacey": 5
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/FindStudentsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.studentlist.FindStudentsCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.FindStudentsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Parses input arguments and creates a new FindStudentsCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class FindStudentsCommandParser implements Parser\u003cFindStudentsCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindStudentsCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * and returns a FindStudentsCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public FindStudentsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new FindStudentsCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 8,
      "MarcusTw": 1,
      "erisjacey": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.StringUtil.isNonZeroUnsignedInteger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (!isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parses {@code range} into an {@code IndexRange} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static IndexRange parseIndexRange(String range) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(range);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String trimmedIndexRange \u003d range.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new IndexRange(trimmedIndexRange);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static Matriculation parseMatriculation(String matriculation) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(matriculation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String trimmedMatriculation \u003d matriculation.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!Matriculation.isValidMatriculation(trimmedMatriculation)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new ParseException(Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Matriculation(trimmedMatriculation);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parses a {@code String sessionName} into an {@code SessionName}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws ParseException if the given {@code sessionName} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static SessionName parseSessionName(String sessionName) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(sessionName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String trimmedSessionName \u003d sessionName.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!SessionName.isValidSessionName(trimmedSessionName)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new ParseException(SessionName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new SessionName(trimmedSessionName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parses a {@code String sessionDate} into an {@code SessionDate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws ParseException if the given {@code sessionDate} is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static SessionDate parseSessionDate(String sessionDate) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(sessionDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String trimmedSessionDate \u003d sessionDate.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!SessionDate.isValidSessionDate(trimmedSessionDate)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new ParseException(SessionDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new SessionDate(trimmedSessionDate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "MarcusTw": 3,
      "YuunoKun": 45,
      "erisjacey": 9,
      "-": 93
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/ParticipateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.sessionlist.session.ParticipateCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.session.ParticipateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Parses input arguments and creates a new ParticipateCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ParticipateCommandParser implements Parser\u003cParticipateCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ParticipateCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * and returns an ParticipateCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ParticipateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            indexRange \u003d ParserUtil.parseIndexRange(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // TODO: supposed to get sessionName internally"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        //SessionName sessionName \u003d new SessionName(argMultimap.getValue(PREFIX_SESSIONNAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return new ParticipateCommand(indexRange);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 5,
      "CodingCookieRookie": 3,
      "YuunoKun": 23,
      "erisjacey": 6
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/PresenceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.sessionlist.session.PresenceCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.session.PresenceCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Parses input arguments and creates a new PresenceCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class PresenceCommandParser implements Parser\u003cPresenceCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PresenceCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * and returns an PresenceCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public PresenceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            indexRange \u003d ParserUtil.parseIndexRange(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // TODO: supposed to get sessionName internally"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        //SessionName sessionName \u003d new SessionName(argMultimap.getValue(PREFIX_SESSIONNAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return new PresenceCommand(indexRange);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 3,
      "CodingCookieRookie": 7,
      "YuunoKun": 23,
      "erisjacey": 5
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/SwitchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.atas.SwitchCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.SwitchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * and returns a SwitchCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new SwitchCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 22,
      "CodingCookieRookie": 1,
      "erisjacey": 6
    }
  },
  {
    "path": "src/main/java/atas/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/atas/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    Predicate\u003cSession\u003e PREDICATE_SHOW_ALL_SESSIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the user prefs\u0027 student list file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Path getStudentListFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Sets the user prefs\u0027 student list file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    void setStudentListFilePath(Path studentListFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns the user prefs\u0027 session list file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    Path getSessionListFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sets the user prefs\u0027 session list file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void setSessionListFilePath(Path sessionListFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Returns the user prefs\u0027 memo file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    Path getMemoFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Sets the user prefs\u0027 memo file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    void setMemoFilePath(Path memoPadFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Clears the student list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    void clearStudentList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /** Returns the StudentList */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    ReadOnlyStudentList getStudentList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the student list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The student must exist in the student list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    void deleteStudent(Student target, Index id);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * {@code student} must not already exist in the student list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * {@code target} must exist in the student list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The identity of {@code editedStudent} must not be the same as another existing student in the student list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * CLear the sessions existing in the current session list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * The link between the students and the session list will not be disrupted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void resetSessionList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /** Returns the SessionList */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    SessionList getSessionList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns true if a session with the same identity as {@code session} exists in the session list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    boolean hasSession(Session session);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Deletes the given session."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * The session must exist in the session list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    void deleteSession(Session target, Index id);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Adds the given session."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * {@code session} must not already exist in the session list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void addSession(Session session);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds the given session Index."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * {@code session index} must not already exist in the session list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void enterSession(Index sessionIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Replaces the given session {@code target} with {@code editedSession}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * {@code target} must exist in the session list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * The session identity of {@code editedSession} must not be the same as another"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * existing session in the session list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void setSession(Session target, Session editedSession);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Updates participation status of the given session."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void updateParticipationBySessionName(SessionName sessionName, IndexRange indexRange);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Updates presence status of the given session."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void updatePresenceBySessionName(SessionName sessionName, IndexRange indexRange);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns the {@code Session} currently in."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    Session getCurrentSession();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns attributes of the students given session."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * The session must exist in the session list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return Attributes of the students in the session."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    ObservableList\u003cAttributes\u003e getCurrentAttributesList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Updates the attribute list in current session if a session has been entered into."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    void updateCurrentAttributesList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered session list */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    ObservableList\u003cSession\u003e getFilteredSessionList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Updates the filter of the filtered session list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void updateFilteredSessionList(Predicate\u003cSession\u003e predicate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Returns the session index."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    Index getSessionId();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Sets currentSession to be false."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void setCurrentSessionFalse();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Sets currentSession to be true."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void setCurrentSessionTrue();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Returns currentSession status."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    boolean returnCurrentSessionEnabledStatus();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Returns the Memo."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    Memo getMemo();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Retrieves the String content in the memo."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @return String of text present in the memo."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    String getMemoContent();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Writes a String of text into the memo."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param content Sting of text to be written."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    void saveMemoContent(String content);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Appends a String of text at the end of the Memo."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param note String text to be appended."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    void addNoteToMemo(String note);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns the index of a randomly selected student in the student list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    Index generateRandomStudentIndex();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Recalculates the current statistics using the existing model components."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void refreshStatistics();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Recalculates the current student statistics."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void refreshStudentStatistics();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Recalculates the current session statistics."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void refreshSessionStatistics();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns the name and date of the current entered session."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    String getLeftSessionDetails();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns the stats of the current entered session."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    String getRightSessionDetails();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    * Saves the current entities in their respective history."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    void commit();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if this {@code Model} can be undone, returns \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    boolean canUndo();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns this {@code Model} back to a previous history state if possible."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    void undo();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if this {@code Model} can be redone, returns \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    boolean canRedo();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns this {@code Model} forward to a later history state if possible."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    void redo();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 43,
      "CodingCookieRookie": 46,
      "MarcusTw": 24,
      "YuunoKun": 70,
      "erisjacey": 56,
      "-": 56
    }
  },
  {
    "path": "src/main/java/atas/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.random.RandomGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.ReadOnlySessionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.VersionedAttributesList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.VersionedSessionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.VersionedStudentList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Represents the in-memory model of the student list, session list, userPrefs and memo data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final VersionedStudentList studentList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final VersionedSessionList sessionList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final VersionedAttributesList attributesList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private final FilteredList\u003cSession\u003e filteredSessions;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Index sessionId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private boolean isCurrentSessionEnabled;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final Memo memo;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final RandomGenerator rng;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Initializes a ModelManager with the given sessionList, studentList, userPrefs and memo content."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public ModelManager(ReadOnlySessionList sessionList, ReadOnlyStudentList studentList,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs, String memoContent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireAllNonNull(studentList, userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        logger.fine(\"Initializing with student list: \" + studentList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.sessionList \u003d new VersionedSessionList(sessionList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.studentList \u003d new VersionedStudentList(studentList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.attributesList \u003d new VersionedAttributesList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.filteredStudents \u003d new FilteredList\u003c\u003e(this.studentList.getStudentList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.filteredSessions \u003d new FilteredList\u003c\u003e(this.sessionList.getSessions());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.memo \u003d new Memo(memoContent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.rng \u003d RandomGenerator.makeRandomGenerator();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        isCurrentSessionEnabled \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this(new SessionList(), new StudentList(), new UserPrefs(), \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return studentList.equals(other.studentList)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 sessionList.equals(other.sessionList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 filteredSessions.equals(other.filteredSessions)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 memo.equals(other.memo);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"\\n\" + \"- student list: \" + studentList + \"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"- filtered session list: \" + filteredStudents + \"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"- session list: \" + sessionList + \"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"- filtered sessions: \" + filteredSessions + \"\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"- memo: \" + memo + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Path getStudentListFilePath() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return userPrefs.getStudentListFilePath();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudentListFilePath(Path studentListFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(studentListFilePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        userPrefs.setStudentListFilePath(studentListFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StudentList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void clearStudentList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        studentList.resetData(new StudentList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sessionList.updateStudentList(studentList.getStudentList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sessionList.updateAllSessionsAfterClear();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        updateCurrentAttributesList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ReadOnlyStudentList getStudentList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return studentList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return studentList.hasStudent(student);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void deleteStudent(Student target, Index id) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentList.removeStudent(target);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        sessionList.updateStudentList(studentList.getStudentList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateAllSessionsAfterDelete(id);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        updateCurrentAttributesList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshSessionStatistics();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentList.addStudent(student);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        sessionList.updateStudentList(studentList.getStudentList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateAllSessionsAfterAdd();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        updateCurrentAttributesList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshSessionStatistics();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentList.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        sessionList.updateStudentList(studentList.getStudentList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        updateCurrentAttributesList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SessionList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void resetSessionList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionList.clearSessions();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionList getSessionList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this.sessionList;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Path getSessionListFilePath() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return userPrefs.getSessionListFilePath();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setSessionListFilePath(Path sessionListFilePath) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(sessionListFilePath);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        userPrefs.setSessionListFilePath(sessionListFilePath);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionList.contains(session);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void deleteSession(Session target, Index id) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        sessionList.updateStudentList(studentList.getStudentList());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        sessionList.deleteSession(target);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshStudentStatistics();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void addSession(Session session) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        sessionList.updateStudentList(studentList.getStudentList());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.addSession(session);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        updateFilteredSessionList(PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshStudentStatistics();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.setSession(target, editedSession);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updateParticipationBySessionName(SessionName sessionName, IndexRange indexRange) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Session session \u003d getCurrentSession();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sessionName \u003d session.getSessionName();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentParticipation(sessionName, indexRange);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        attributesList.setCurrentAttributeList(sessionName.value, session.getAttributeList());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshStatistics();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updatePresenceBySessionName(SessionName sessionName, IndexRange indexRange) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Session session \u003d getCurrentSession();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sessionName \u003d session.getSessionName();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentPresence(sessionName, indexRange);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        attributesList.setCurrentAttributeList(sessionName.value, session.getAttributeList());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshStatistics();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Current Session Attribute List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Session getCurrentSession() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assert sessionId !\u003d null : \"Attempted to get current session when session ID is null\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return sessionList.getSessionBasedOnId(sessionId);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public ObservableList\u003cAttributes\u003e getCurrentAttributesList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return attributesList.getCurrentAttributeList();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void updateCurrentAttributesList() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (sessionId !\u003d null) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            attributesList.resetData(getCurrentSession().getAttributeList());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * {@code versionedStudentList}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Session List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return filteredSessions;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        filteredSessions.setPredicate(predicate);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Session Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Index getSessionId() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return sessionId;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void enterSession(Index sessionId) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.sessionId \u003d sessionId;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        SessionName sessionName \u003d sessionList.getSessionBasedOnId(sessionId).getSessionName();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.attributesList.setCurrentAttributeList(sessionName.value, getCurrentSession().getAttributeList());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        setCurrentSessionTrue();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void setCurrentSessionFalse() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.isCurrentSessionEnabled \u003d false;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void setCurrentSessionTrue() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.isCurrentSessionEnabled \u003d true;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public boolean returnCurrentSessionEnabledStatus() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return isCurrentSessionEnabled;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String getLeftSessionDetails() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (sessionId \u003d\u003d null) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String nullSessionDetails \u003d \"Currently not in any session\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return nullSessionDetails;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            requireNonNull(sessionList);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            Session currentEnteredSession \u003d getCurrentSession();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            requireNonNull(currentEnteredSession);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String sessionName \u003d currentEnteredSession.getSessionName().toString();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String sessionDate \u003d currentEnteredSession.getSessionDate().toString();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return String.format(\"Current Session: %s   Date: %s\", sessionName, sessionDate);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String getRightSessionDetails() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (sessionId \u003d\u003d null) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String nullSessionDetails \u003d \"\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return nullSessionDetails;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            requireNonNull(sessionList);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            Session currentEnteredSession \u003d getCurrentSession();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            requireNonNull(currentEnteredSession);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String presenceStats \u003d currentEnteredSession.getSessionStats()"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                .getPresenceStatistics().getDataAsPercentage();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String participationStats \u003d currentEnteredSession.getSessionStats()"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                .getParticipationStatistics().getDataAsPercentage();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return String.format(\"%s    %s\", presenceStats, participationStats);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Memo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Path getMemoFilePath() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return userPrefs.getMemoFilePath();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void setMemoFilePath(Path memoFilePath) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(memoFilePath);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        userPrefs.setMemoFilePath(memoFilePath);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Memo getMemo() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return memo;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public String getMemoContent() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return memo.getContent();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void saveMemoContent(String content) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireAllNonNull(content);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memo.setContent(content);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void addNoteToMemo(String note) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memo.addNote(note);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RandomGenerator \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Index generateRandomStudentIndex() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return rng.getNextIndex(filteredStudents.size());"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void refreshStatistics() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshStudentStatistics();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshSessionStatistics();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void refreshStudentStatistics() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        studentList.refreshStudentListStatistics(sessionList);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        updateFilteredStudentList(x -\u003e false);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        updateFilteredStudentList(x -\u003e true);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void refreshSessionStatistics() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.refreshSessionListStatistics();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        updateFilteredSessionList(x -\u003e false);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        updateFilteredSessionList(x -\u003e true);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        studentList.commit();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sessionList.commit();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        attributesList.commit();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return studentList.canUndo()"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 sessionList.canUndo()"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 attributesList.canUndo();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        studentList.undo();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sessionList.undo();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        attributesList.undo();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        refreshStatistics();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return studentList.canRedo()"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 sessionList.canRedo()"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 attributesList.canRedo();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        studentList.redo();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sessionList.redo();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        attributesList.redo();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        refreshStatistics();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 51,
      "CodingCookieRookie": 77,
      "MarcusTw": 39,
      "YuunoKun": 84,
      "erisjacey": 140,
      "-": 83
    }
  },
  {
    "path": "src/main/java/atas/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Path getStudentListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    Path getSessionListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    Path getMemoFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 1,
      "MarcusTw": 1,
      "YuunoKun": 2,
      "erisjacey": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/atas/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Path studentListFilePath \u003d Paths.get(\"data\" , \"studentlist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Path sessionListFilePath \u003d Paths.get(\"data\", \"sessionlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private Path memoFilePath \u003d Paths.get(\"data\", \"memo.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        setStudentListFilePath(newUserPrefs.getStudentListFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        setSessionListFilePath(newUserPrefs.getSessionListFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        setMemoFilePath(newUserPrefs.getMemoFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Path getStudentListFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return studentListFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void setStudentListFilePath(Path studentListFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(studentListFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.studentListFilePath \u003d studentListFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Path getSessionListFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionListFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setSessionListFilePath(Path sessionListFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(sessionListFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionListFilePath \u003d sessionListFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Path getMemoFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return memoFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void setMemoFilePath(Path memoFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(memoFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.memoFilePath \u003d memoFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 studentListFilePath.equals(o.studentListFilePath)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 sessionListFilePath.equals(o.sessionListFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 memoFilePath.equals(o.memoFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return Objects.hash(guiSettings, studentListFilePath, sessionListFilePath, memoFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + studentListFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sb.append(\"\\nLocal session data file location : \" + sessionListFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        sb.append(\"\\nLocal memo data file location : \" + memoFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 15,
      "MarcusTw": 2,
      "YuunoKun": 12,
      "erisjacey": 9,
      "-": 75
    }
  },
  {
    "path": "src/main/java/atas/model/VersionedEntity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Enables behavior that enables saving and going back and forth between different history states."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public interface VersionedEntity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Saves the current entity state in its history."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    void commit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if entity has states to undo, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    boolean canUndo();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Restores the previous entity state from its history."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    void undo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if entity has states to redo, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    boolean canRedo();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns a previously undone entity from its history."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    void redo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 33
    }
  },
  {
    "path": "src/main/java/atas/model/exceptions/UnableToRedoException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Signals that the redo operation is unable to be performed due to reaching the latest history state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class UnableToRedoException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public UnableToRedoException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"Unable to redo\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 10
    }
  },
  {
    "path": "src/main/java/atas/model/exceptions/UnableToUndoException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Signals that the undo operation is unable to be performed due to reaching the earliest history state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class UnableToUndoException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public UnableToUndoException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"Unable to undo\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "erisjacey": 11
    }
  },
  {
    "path": "src/main/java/atas/model/memo/Memo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.model.memo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Represents a Memo pad."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Each {@code Memo} contains a String of content that users can make changes to through a text area."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class Memo {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /** Represents the content stored in a Memo */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Constructs a Memo object with an empty content."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Memo() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        content \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Constructs a Memo object with a specified content."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param content String content to be shown in Memo."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Memo(String content) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Returns the content of the Memo."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @return content of the Memo."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Sets the content of the Memo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param content String content to be written to the Memo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void setContent(String content) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireAllNonNull(content);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Appends a String of text at the end of the Memo."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param note String text to be appended."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void addNote(String note) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireAllNonNull(note);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String newContent \u003d getContent().concat(\"\\n\").concat(note);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        setContent(newContent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                || (other instanceof Memo // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u0026\u0026 content.equals(((Memo) other).content)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 66,
      "erisjacey": 5
    }
  },
  {
    "path": "src/main/java/atas/model/session/Attributes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents the things to keep track for each student for each class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Guarantees: immutability"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Attributes {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final String DEFAULT_NAME \u003d \"DEFAULT\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Presence presence;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Participation participation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private final Name studentName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Parameterized constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Attributes(Presence presence, Participation participation, Name studentName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.presence \u003d presence;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Sets to the default values for each field."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Attributes() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this(new Presence(), new Participation(), new Name(DEFAULT_NAME));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Sets to the default values for each field but instantiate with name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Attributes(Name name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this(new Presence(), new Participation(), name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Attributes getCopy() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new Attributes(presence, participation, studentName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Causes the presence field to be true."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Attributes togglePresence() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return new Attributes(presence.togglePresence(), participation, studentName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Causes the participation field to be true."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Attributes toggleParticipation() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return new Attributes(presence, participation.toggleParticipation(), studentName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns a new attributes with the new name."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Attributes setName(Name name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Attributes(presence, participation, name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean getPresenceStatus() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return presence.isPresent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean getParticipationStatus() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return participation.hasParticipated();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return studentName.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } else if (other instanceof Attributes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return this.presence.equals(((Attributes) other).presence)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    \u0026\u0026 this.participation.equals(((Attributes) other).participation);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"Presence: \" + presence.isPresent() + \" Participation: \" + participation.hasParticipated();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 19,
      "MarcusTw": 1,
      "YuunoKun": 21,
      "erisjacey": 51
    }
  },
  {
    "path": "src/main/java/atas/model/session/IndexRange.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Represents the range of index of students in a session."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Guarantees: immutability"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class IndexRange {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Index range should be either a number or value range. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"It should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"1. Number or range should be greater than 0 and smaller or equal to the largest index.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"2. Range of values should be in the form of VALUE1-VALUE2.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"3. Range must be in an increasing order,\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \" where the second number is bigger than or equals to the first.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String VALIDATION_REGEX_1 \u003d \"^0*[1-9][0-9]*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String VALIDATION_REGEX_2 \u003d \"^0*[1-9][0-9]*[-]0*[1-9][0-9]*$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final String range;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private int lower;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private int upper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Constructs an {@code IndexRange}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param range Range of value in the form of a string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public IndexRange(String range) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(range);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.range \u003d range;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        checkArgument(isValidIndexRange(), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns if a given string is a valid index range."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private boolean isValidIndexRange() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (range.matches(VALIDATION_REGEX_1)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            lower \u003d Integer.parseInt(range);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            upper \u003d lower;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        } else if (range.matches(VALIDATION_REGEX_2)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return isIncreasingRange(range);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Checks if a given range of two numbers is in increasing order."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param range Range to be checked."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private boolean isIncreasingRange(String range) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String[] splitRangeString \u003d range.split(\"-\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        lower \u003d Integer.parseInt(splitRangeString[0]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        upper \u003d Integer.parseInt(splitRangeString[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return lower \u003c\u003d upper;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getOneBasedLower() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return lower;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getOneBasedUpper() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return upper;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getZeroBasedLower() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return lower - 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getZeroBasedUpper() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return upper - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"Range: \" + this.lower + \"-\" + this.upper;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || (other instanceof IndexRange // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 lower \u003d\u003d (((IndexRange) other).lower)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 upper \u003d\u003d (((IndexRange) other).upper));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return lower + upper;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 28,
      "YuunoKun": 69,
      "erisjacey": 2
    }
  },
  {
    "path": "src/main/java/atas/model/session/Participation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents whether or not a student has participated in the particular class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Guarantees: immutability"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Participation {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Participation should be either true or false\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean PARTICIPATED \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean NOT_PARTICIPATED \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final boolean hasParticipated;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Participation(boolean hasParticipated) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.hasParticipated \u003d hasParticipated;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Sets to the default value of false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Participation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this(NOT_PARTICIPATED);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Toggles the status of participation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Participation toggleParticipation() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (hasParticipated \u003d\u003d PARTICIPATED) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return new Participation(NOT_PARTICIPATED);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new Participation(PARTICIPATED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns the participation status of the student."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean hasParticipated() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return hasParticipated;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                || (other instanceof Participation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 (hasParticipated \u003d\u003d ((Participation) other).hasParticipated));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return Boolean.toString(hasParticipated);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 25,
      "erisjacey": 32
    }
  },
  {
    "path": "src/main/java/atas/model/session/Presence.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents whether a student is present during a particular class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Guarantees: immutability"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Presence {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Presence should be either true or false\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean PRESENT \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean ABSENT \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final boolean isPresent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Presence(boolean isPresent) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.isPresent \u003d isPresent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Sets to the default value of false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Presence() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this(ABSENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Toggles the status of presence."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Presence togglePresence() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (isPresent \u003d\u003d PRESENT) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return new Presence(ABSENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new Presence(PRESENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns the presence status of a student."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isPresent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return isPresent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                || (other instanceof Presence"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u0026\u0026 (isPresent \u003d\u003d ((Presence) other).isPresent));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return Boolean.toString(isPresent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 23,
      "erisjacey": 34
    }
  },
  {
    "path": "src/main/java/atas/model/session/ReadOnlySessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Unmodifiable view of a session list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public interface ReadOnlySessionList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns sessions in the sessionList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    ObservableList\u003cSession\u003e getSessions();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns an unmodifiable view of the student list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    ObservableList\u003cStudent\u003e getInternalStudentList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    ReadOnlySessionList getCopy();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Updates the current student list with the given list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    void updateStudentList(List\u003cStudent\u003e list);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 3,
      "MarcusTw": 5,
      "YuunoKun": 20,
      "erisjacey": 3
    }
  },
  {
    "path": "src/main/java/atas/model/session/Session.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.statistics.ParticipationStatistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.statistics.PresenceStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.statistics.SessionStatistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a particular session at a particular date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Each {@code Session} contains a list of details for each student in ATAS for the TA to keep track of."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Session implements Comparable\u003cSession\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final SessionName sessionName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final SessionDate sessionDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final ObservableList\u003cAttributes\u003e attributeList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Index sessionIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private SessionStatistics sessionStats;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Parametrized constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Session(SessionName sessionName, SessionDate sessionDate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionDate \u003d sessionDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.attributeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.sessionIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionStats \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parametrized constructor."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Session(SessionName sessionName, SessionDate sessionDate, List\u003cAttributes\u003e attributeList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionDate \u003d sessionDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.attributeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.attributeList.addAll(attributeList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.sessionIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionStats \u003d new SessionStatistics(attributeList.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ObservableList\u003cAttributes\u003e getAttributeList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.attributeList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Session getCopy() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cAttributes\u003e attributesListCopy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        for (Attributes a : attributeList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            attributesListCopy.add(a.getCopy());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new Session(sessionName.getCopy(), sessionDate.getCopy(), attributesListCopy);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Toggles student\u0027s presence status. Finds the correct corresponding attribute"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * using the given index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toggleStudentPresence(Index studentId) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Attributes attributes \u003d attributeList.get(studentId.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        attributeList.set(studentId.getZeroBased(), attributes.togglePresence());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Toggles student\u0027s participation status. Finds the correct corresponding attribute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * using the given index."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toggleStudentParticipation(Index studentId) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Attributes attributes \u003d attributeList.get(studentId.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        attributeList.set(studentId.getZeroBased(), attributes.toggleParticipation());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Updates the session after the deletion of a student (with a given student ID)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void updateSessionAfterDelete(Index studentId, List\u003cStudent\u003e masterList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireAllNonNull(studentId, masterList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // shift the values down by 1, starting from deleted student ID"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        for (int i \u003d studentId.getZeroBased(); i \u003c masterList.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Attributes temp \u003d attributeList.get(i + 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            attributeList.set(i, temp);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        attributeList.remove(masterList.size()); // remove last key-value pair from hashmap"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshSessionStatistics();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Updates the session after adding a student"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void updateSessionAfterAdd(List\u003cStudent\u003e masterList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireAllNonNull(masterList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Name studentName \u003d masterList.get(masterList.size() - 1).getName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        attributeList.add(masterList.size() - 1, new Attributes(studentName));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshSessionStatistics();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Updates the participation given a range of index."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updateParticipation(IndexRange indexRange) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(indexRange);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // find students that have index in range"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (int i \u003d indexRange.getZeroBasedLower(); i \u003c\u003d indexRange.getZeroBasedUpper(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Attributes temp \u003d attributeList.get(i);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            // exclude invalid index"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (temp !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                toggleStudentParticipation(Index.fromZeroBased(i));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshSessionStatistics();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Updates the presence given a range of index."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updatePresence(IndexRange indexRange) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(indexRange);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // find students that have index in range"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (int i \u003d indexRange.getZeroBasedLower(); i \u003c\u003d indexRange.getZeroBasedUpper(); i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Attributes temp \u003d attributeList.get(i);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            // exclude invalid index"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (temp !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                toggleStudentPresence(Index.fromZeroBased(i));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        refreshSessionStatistics();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Recalculates the participation and presence statistics of this session."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void refreshSessionStatistics() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionStats.replaceStatistics("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new ParticipationStatistics().getSessionStatistics(this),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new PresenceStatistics().getSessionStatistics(this));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Initializes the studentList using the given masterList."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void initializeSession(List\u003cStudent\u003e masterList) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (int i \u003d 0; i \u003c masterList.size(); i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            attributeList.add(new Attributes(masterList.get(i).getName()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Updates the student name after editing a student\u0027s name."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updateAttributeName(Name name, int index) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Attributes original \u003d attributeList.get(index);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        attributeList.set(index, original.setName(name));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String returnStudentNameStringByIndex(int index) throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return attributeList.get(index).getName();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void resetAttributeList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        setAttributeList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void setAttributeList(List\u003cAttributes\u003e attributeList) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.attributeList.setAll(attributeList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns true if both sessions have the same session name."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * This defines a weaker notion of equality between two sessions."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean isSameSession(Session otherSession) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (otherSession \u003d\u003d this) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return otherSession !\u003d null"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 otherSession.sessionName.equals(this.sessionName);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionName getSessionName() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionName;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionDate getSessionDate() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionDate;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Index getSessionIndex() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return sessionIndex;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionStatistics getSessionStats() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionStats;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || (other instanceof Session \u0026\u0026 this.sessionDate.equals(((Session) other).sessionDate)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 this.sessionName.equals(((Session) other).sessionName));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public int compareTo(Session other) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this.sessionDate.compareTo(other.sessionDate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionName.toString() + \" @ \" + sessionDate.toString();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 14,
      "MarcusTw": 23,
      "YuunoKun": 112,
      "erisjacey": 78
    }
  },
  {
    "path": "src/main/java/atas/model/session/SessionDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Represents a date of a session in the session list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSessionDate(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SessionDate implements Comparable\u003cSessionDate\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The date of a session should be in the form of dd/MM/yyyy \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"corresponding to a valid date.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"Example : 10/2/2019\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{1,2}/[0-9]{1,2}/[0-9]{4,4}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String PLACEHOLDER_DATE \u003d \"1/1/2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Constructs a {@code SessionDate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionDate(String date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        checkArgument(isValidSessionDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        value \u003d LocalDate.parse(standardizeDateString(date), DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Constructs a {@code SessionDate}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public SessionDate(LocalDate date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public SessionDate getCopy() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new SessionDate(this.value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns if a given string is a valid date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static boolean isValidSessionDate(String date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return date.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Standardize date string into the format of dd/MM/yyyy."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * This method transforms date strings such as \"1/2/1900\" into"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * \"01/02/1900\" for parsing purposes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param date date string to be processed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return standardized date string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String standardizeDateString(String date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String[] dateSegments \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (dateSegments[i].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                dateSegments[i] \u003d \"0\" + dateSegments[i];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return dateSegments[0] + \"/\" + dateSegments[1] + \"/\" + dateSegments[2];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns a valid SessionDate that can act as a placeholder."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static SessionDate getPlaceholderSessionDate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new SessionDate(PLACEHOLDER_DATE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return value.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || (other instanceof SessionDate // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 value.equals(((SessionDate) other).value)); // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int compareTo(SessionDate other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return other.value.compareTo(this.value);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 1,
      "YuunoKun": 84,
      "erisjacey": 16
    }
  },
  {
    "path": "src/main/java/atas/model/session/SessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.exceptions.DuplicateSessionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.exceptions.SessionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a collection of all the sessions in the semester."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SessionList implements Iterable\u003cSession\u003e, ReadOnlySessionList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private final ObservableList\u003cSession\u003e sessions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalStudentList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Creates an SessionList using the sessions in the {@code list}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        sessions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        internalStudentList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Creates an SessionList using the sessions in the {@code list}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public SessionList(List\u003cStudent\u003e list) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        sessions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        internalStudentList \u003d FXCollections.observableArrayList(list);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Copies the session in {@code toBeCopied} in to a new list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionList(ReadOnlySessionList toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Replaces the contents of the session list with {@code sessions}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * {@code sessions} must not contain duplicate students."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void resetData(ReadOnlySessionList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        setSessions(newData.getCopy().getSessions());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        setStudents(newData.getInternalStudentList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Replaces the contents of this list with {@code sessions}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * {@code sessions} must not contain duplicate sessions."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void setSessions(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireAllNonNull(sessions);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (!sessionsAreUnique(sessions)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.sessions.setAll(sessions);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        FXCollections.sort(this.sessions);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns true if {@code sessions} contains only unique sessions."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private boolean sessionsAreUnique(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        for (int i \u003d 0; i \u003c sessions.size() - 1; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            for (int j \u003d i + 1; j \u003c sessions.size(); j++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                if (sessions.get(i).isSameSession(sessions.get(j))) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.internalStudentList.setAll(students);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public SessionList getCopy() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        SessionList copy \u003d new SessionList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cSession\u003e sessionListCopy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        for (Session s : sessions) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            sessionListCopy.add(s.getCopy());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        copy.sessions.addAll(sessionListCopy);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        copy.internalStudentList.addAll(internalStudentList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Replaces the current list with the given one."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void updateStudentList(List\u003cStudent\u003e list) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (list.size() \u003d\u003d internalStudentList.size()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Name oldName \u003d internalStudentList.get(i).getName();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Name newName \u003d list.get(i).getName();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (!oldName.equals(newName)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    for (Session session: sessions) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        session.updateAttributeName(newName, i);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        internalStudentList.clear();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        internalStudentList.addAll(list);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Adds a session to the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * The session must not already exist in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void addSession(Session session) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (contains(session)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        session.initializeSession(internalStudentList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessions.add(session);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        FXCollections.sort(this.sessions);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Deletes a session from the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * The session must be already in the list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void deleteSession(Session target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (!sessions.remove(target)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new SessionNotFoundException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        FXCollections.sort(this.sessions);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setSession(Session oldSession, Session newSession) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(oldSession);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(newSession);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!contains(oldSession)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new SessionNotFoundException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessions.removeIf(oldSession::isSameSession);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessions.add(newSession);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        FXCollections.sort(this.sessions);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Session getSessionBasedOnId(Index index) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return sessions.get(index.getZeroBased());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns true if the collection contains an equivalent session as the given argument."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean contains(Session toCheck) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return sessions.stream().anyMatch(toCheck::isSameSession);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Updates all sessions after the deletion of a student (with a given student ID)."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updateAllSessionsAfterDelete(Index studentId) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        for (Session s : sessions) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            s.updateSessionAfterDelete(studentId, internalStudentList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        FXCollections.sort(this.sessions);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Updates all sessions after adding a student."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updateAllSessionsAfterAdd() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session s : sessions) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            s.updateSessionAfterAdd(internalStudentList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        FXCollections.sort(this.sessions);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Updates all sessions after clearing all students."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void updateAllSessionsAfterClear() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        for (Session s : sessions) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            s.resetAttributeList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        FXCollections.sort(this.sessions);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Updates all sessions after the deletion of a session (with a given session ID)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void updateAllSessionsAfterDeleteSession(Index sessionId) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        requireNonNull(sessionId);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (int i \u003d sessionId.getZeroBased(); i \u003c sessions.size(); i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            sessions.get(i).getSessionIndex().decreaseZeroBasedIndexByOne();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Finds the session using the given {@code sessionName} and students\u0027 participation status"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * according to the {@code indexRange}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updateStudentParticipation(SessionName sessionName, IndexRange indexRange) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(sessionName);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(indexRange);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session session: sessions) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (session.getSessionName().equals(sessionName)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                session.updateParticipation(indexRange);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Finds the session using the given {@code sessionName} and students\u0027 presence status"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * according to the {@code indexRange}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updateStudentPresence(SessionName sessionName, IndexRange indexRange) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(sessionName);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(indexRange);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session session: sessions) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (session.getSessionName().equals(sessionName)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                session.updatePresence(indexRange);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Recalculates the participation and presence statistics of the current sessions in the"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * session list."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void refreshSessionListStatistics() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session session: sessions) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            session.refreshSessionStatistics();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Clears all the existing sessions in the session list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void clearSessions() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessions.clear();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public int returnSize() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return sessions.size();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public ObservableList\u003cSession\u003e getSessions() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessions;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ObservableList\u003cStudent\u003e getInternalStudentList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return internalStudentList;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Iterator\u003cSession\u003e iterator() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessions.iterator();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (other instanceof SessionList) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (sessions.size() !\u003d ((SessionList) other).getSessions().size()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Session[] testArray1 \u003d new Session[sessions.size()];"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Session[] testArray2 \u003d new Session[sessions.size()];"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int j \u003d 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (Session s: sessions) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                testArray1[i] \u003d s;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (Session s: ((SessionList) other).getSessions()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                testArray2[j] \u003d s;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (int k \u003d 0; k \u003c sessions.size(); k++) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (!testArray1[k].isSameSession(testArray2[k])) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return \"SessionList{\" + \"sessions\u003d\" + sessions + \", internalStudentList\u003d\" + internalStudentList + \u0027}\u0027;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 1,
      "CodingCookieRookie": 37,
      "MarcusTw": 14,
      "YuunoKun": 158,
      "erisjacey": 111
    }
  },
  {
    "path": "src/main/java/atas/model/session/SessionName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Represents a Session\u0027s Name in a class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSessionName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SessionName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"SessionNames should only consists of numbers, letters, dashes, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"underscores and whitespaces. The total number of characters should be at least 1 to form a valid \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"session name\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"The session name should also start with either a number or a letter and should not end with \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"a whitespace.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Constructs an {@code SessionName}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param sessionName A valid session name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionName(String sessionName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(sessionName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        checkArgument(isValidSessionName(sessionName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        value \u003d sessionName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public SessionName getCopy() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new SessionName(this.value);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns if a given string is a valid session name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static boolean isValidSessionName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || (other instanceof SessionName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 value.equals(((SessionName) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 52,
      "erisjacey": 6
    }
  },
  {
    "path": "src/main/java/atas/model/session/VersionedAttributesList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.VersionedEntity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.exceptions.UnableToRedoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.exceptions.UnableToUndoException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class VersionedAttributesList implements VersionedEntity {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final ObservableList\u003cAttributes\u003e currentAttributeList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final List\u003cList\u003cAttributes\u003e\u003e attributeStateList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /* Tracks all the session names of the sessions entered */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Optional\u003cString\u003e currentSessionName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Creates a VersionedStudentList with an empty initial state."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public VersionedAttributesList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        currentAttributeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        attributeStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        attributeStateList.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        currentSessionName \u003d Optional.empty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public List\u003cList\u003cAttributes\u003e\u003e getAttributeStateList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return attributeStateList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.attributeStateList.add(new ArrayList\u003c\u003e(currentAttributeList));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new UnableToUndoException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        resetData(attributeStateList.get(--currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return currentStatePointer \u003c this.attributeStateList.size() - 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new UnableToRedoException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        resetData(attributeStateList.get(++currentStatePointer));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public ObservableList\u003cAttributes\u003e getCurrentAttributeList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return currentAttributeList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setCurrentAttributeList(String name, List\u003cAttributes\u003e attributeList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(attributeList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.currentAttributeList.setAll(attributeList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // If no sessions were entered or user enters a different session"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (currentSessionName.isEmpty() || !currentSessionName.get().equals(name)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            saveInitialCommitAfterEnterSession(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates an initial commit when entering a different session."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param name Session name."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private void saveInitialCommitAfterEnterSession(String name) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        currentSessionName \u003d Optional.of(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        commit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Resets the current attribute list to a new set of attribute list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param newData The new set of attribute list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void resetData(List\u003cAttributes\u003e newData) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.currentAttributeList.setAll(newData);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cList\u003cAttributes\u003e\u003e subList \u003d attributeStateList.subList(currentStatePointer + 1, attributeStateList.size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        subList.clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 32,
      "erisjacey": 80
    }
  },
  {
    "path": "src/main/java/atas/model/session/VersionedSessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.VersionedEntity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.exceptions.UnableToRedoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.exceptions.UnableToUndoException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class VersionedSessionList extends SessionList implements VersionedEntity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final List\u003cReadOnlySessionList\u003e sessionStateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Creates a VersionedStudentList using the students in the {@code initialState}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public VersionedSessionList(ReadOnlySessionList initialState) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sessionStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sessionStateList.add(new SessionList(initialState));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public List\u003cReadOnlySessionList\u003e getSessionStateList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return sessionStateList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.sessionStateList.add(new SessionList(this.getCopy()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new UnableToUndoException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        resetData(sessionStateList.get(--currentStatePointer));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return currentStatePointer \u003c this.sessionStateList.size() - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new UnableToRedoException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        resetData(sessionStateList.get(++currentStatePointer));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.sessionStateList.subList(currentStatePointer + 1, sessionStateList.size()).clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 67
    }
  },
  {
    "path": "src/main/java/atas/model/session/exceptions/DuplicateSessionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Signals that the operation will result in duplicate sessions (Sessions are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * if they have the same date and name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DuplicateSessionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public DuplicateSessionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"Operation would result in duplicate classes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 2,
      "erisjacey": 9
    }
  },
  {
    "path": "src/main/java/atas/model/session/exceptions/SessionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Signals that the session does not exists."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SessionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 5,
      "erisjacey": 1
    }
  },
  {
    "path": "src/main/java/atas/model/statistics/ParticipationStatistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.statistics.StatisticalValues;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Represents the statistical participation data of a student or students in the student list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * This statistics data is represented in the form of a ratio or fraction, which"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * consists of an actual value and expected value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ParticipationStatistics implements Statistics {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private int actual;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private int expected;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A constructor with default init value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ParticipationStatistics() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.actual \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.expected \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A parameterized constructor."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ParticipationStatistics(int actual, int expected) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.actual \u003d actual;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.expected \u003d expected;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getDataAsRatio() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"Participation : \" + this.actual + \"/\" + this.expected;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getDataAsPercentage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (this.expected \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return \"Participation : \" + this.expected + \"%\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return \"Participation : \" + (this.actual * 100) / this.expected + \"%\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ParticipationStatistics getSessionStatistics(Session session) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cAttributes\u003e list \u003d session.getAttributeList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int totalActual \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int totalExpected \u003d list.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Attributes attr: list) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (attr.getParticipationStatus()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                totalActual++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new ParticipationStatistics(totalActual, totalExpected);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ParticipationStatistics getStudentStatistics(SessionList sessionList, Index index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cSession\u003e list \u003d sessionList.getSessions();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int totalActual \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int totalExpected \u003d list.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session session: list) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (session.getAttributeList().get(index.getZeroBased()).getParticipationStatus()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                totalActual++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new ParticipationStatistics(totalActual, totalExpected);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isSameStats(Statistics statistics) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (this \u003d\u003d statistics || (statistics !\u003d null \u0026\u0026 getClass() \u003d\u003d statistics.getClass())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getStatValue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return StatisticalValues.getValue(actual, expected);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getActual() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return actual;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ParticipationStatistics setActual(int actual) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new ParticipationStatistics(actual, this.expected);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getExpected() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return expected;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ParticipationStatistics setExpected(int expected) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new ParticipationStatistics(this.actual, expected);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 113
    }
  },
  {
    "path": "src/main/java/atas/model/statistics/PresenceStatistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.statistics.StatisticalValues;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Represents the statistical presence/absence data of a student or students in the student list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * This statistics data is represented in the form of a ratio or fraction, which"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * consists of an actual value and expected value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class PresenceStatistics implements Statistics {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private int actual;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private int expected;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A constructor with default init value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public PresenceStatistics() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.actual \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.expected \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A parameterized constructor."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public PresenceStatistics(int actual, int expected) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.actual \u003d actual;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.expected \u003d expected;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getDataAsRatio() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"Presence : \" + this.actual + \"/\" + this.expected;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getDataAsPercentage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (this.expected \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return \"Presence : \" + this.expected + \"%\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return \"Presence : \" + (this.actual * 100) / this.expected + \"%\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public PresenceStatistics getSessionStatistics(Session session) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cAttributes\u003e list \u003d session.getAttributeList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int totalActual \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int totalExpected \u003d list.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Attributes attr: list) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (attr.getPresenceStatus()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                totalActual++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new PresenceStatistics(totalActual, totalExpected);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public PresenceStatistics getStudentStatistics(SessionList sessionList, Index index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cSession\u003e list \u003d sessionList.getSessions();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int totalActual \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int totalExpected \u003d list.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session session: list) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (session.getAttributeList().get(index.getZeroBased()).getPresenceStatus()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                totalActual++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new PresenceStatistics(totalActual, totalExpected);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isSameStats(Statistics statistics) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (this \u003d\u003d statistics || (statistics !\u003d null \u0026\u0026 getClass() \u003d\u003d statistics.getClass())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getStatValue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return StatisticalValues.getValue(actual, expected);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getActual() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return actual;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public PresenceStatistics setActual(int actual) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new PresenceStatistics(actual, this.expected);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getExpected() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return expected;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public PresenceStatistics setExpected(int expected) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new PresenceStatistics(this.actual, expected);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 113
    }
  },
  {
    "path": "src/main/java/atas/model/statistics/SessionStatistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Represents a set of statistical data of students in a session."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SessionStatistics {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final Set\u003cStatistics\u003e stats;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A constructor which initializes with default statistical values."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionStatistics() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats.add(new PresenceStatistics());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats.add(new ParticipationStatistics());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A constructor which initializes with given sample size."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionStatistics(int sampleSize) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats.add(new PresenceStatistics(0, sampleSize));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats.add(new ParticipationStatistics(0, sampleSize));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Adds the given statistic to the current set of statistics in the session."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void addStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats.add(statistics);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Adds the given statistics to the current set of statistics in the session."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void addStatistics(Statistics... statistics) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // do not change this to Collections.addAll, they are not the same."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics stat: statistics) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            stats.add(stat);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Replaces statistic in the set with the given one."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * If there is already a statistic of the same type, it will be replaced with the new one. Or else"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * if there isn\u0027t a static of the same type, it will be added to the set."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void replaceStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats.removeIf(statistics::isSameStats);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats.add(statistics);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Replaces statistics in the set with the given collection of statistics."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Statistic type that already exists in the set will be removed and replaced with the new one."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A new one will be added to the set if does not exist."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void replaceStatistics(Statistics... statistics) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics stat: statistics) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            stats.removeIf(stat::isSameStats);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            stats.add(stat);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Updates the current participation statistic data with the given session."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updateParticipationStatistics(Session session) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        replaceStatistics(new ParticipationStatistics().getSessionStatistics(session));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Updates the current presence statistic data with the given session."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updatePresenceStatistics(Session session) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        replaceStatistics(new PresenceStatistics().getSessionStatistics(session));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Searches the set of statistics for a {@code ParticipationStatistics}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Statistics getParticipationStatistics() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Statistics participationStatistics \u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics statistics: stats) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (statistics instanceof ParticipationStatistics) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                participationStatistics \u003d statistics;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return participationStatistics;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Searches the set of statistics for a {@code PresenceStatistics}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Statistics getPresenceStatistics() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Statistics presenceStatistics \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics statistics: stats) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (statistics instanceof PresenceStatistics) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                presenceStatistics \u003d statistics;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return presenceStatistics;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Set\u003cStatistics\u003e getStats() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return stats;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Checks if the set of statistics contain the same type of given statistics."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean contains(Statistics statistics) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics stat: stats) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (statistics.getClass() \u003d\u003d stat.getClass()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (o \u003d\u003d null || o.getClass() !\u003d getClass()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (Statistics stat: ((SessionStatistics) o).getStats()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (!contains(stat)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 144
    }
  },
  {
    "path": "src/main/java/atas/model/statistics/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An API that supports statistical behaviour and provide statistical"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * data under different conditions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public interface Statistics {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns statistics data of students in the sesssion."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    Statistics getSessionStatistics(Session session);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns statistics data of a student in the student list given the session list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    Statistics getStudentStatistics(SessionList sessionList, Index index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns a String representing the current presence statistics in the form of ratio."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    String getDataAsRatio();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns a String representing the current presence statistics in the form of percentage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    String getDataAsPercentage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Determines if the statistics are the same"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    boolean isSameStats(Statistics statistics);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Obtains the statistical value of current statistics."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    int getStatValue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 42
    }
  },
  {
    "path": "src/main/java/atas/model/statistics/StudentStatistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Represents a set of statistical data of a student summarising all sessions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class StudentStatistics {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final Set\u003cStatistics\u003e stats;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A constructor which initializes with default statistical values."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public StudentStatistics() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats.add(new PresenceStatistics());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats.add(new ParticipationStatistics());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A constructor which initializes with given sample size."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public StudentStatistics(int sampleSize) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats.add(new PresenceStatistics(0, sampleSize));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats.add(new ParticipationStatistics(0, sampleSize));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Adds the given statistic to the current set of statistics in the session."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void addStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats.add(statistics);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Adds the given statistics to the current set of statistics in the session."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void addStatistics(Statistics... statistics) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Collections.addAll(stats, statistics);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Replaces statistic in the set with the given one."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * If there is already a statistic of the same type, it will be replaced with the new one. Or else"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * if there isn\u0027t a static of the same type, it will be added to the set."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void replaceStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats.removeIf(statistics::isSameStats);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats.add(statistics);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Replaces statistics in the set with the given collection of statistics."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Statistic type that already exists in the set will be removed and replaced with the new one."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A new one will be added to the set if does not exist."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void replaceStatistics(Statistics... statistics) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics stat: statistics) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            stats.removeIf(stat::isSameStats);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            stats.add(stat);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Searches the set of statistics for a {@code ParticipationStatistics}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Statistics getParticipationStatistics() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Statistics participationStatistics \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics statistics: stats) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (statistics instanceof ParticipationStatistics) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                participationStatistics \u003d statistics;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return participationStatistics;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Searches the set of statistics for a {@code PresenceStatistics}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Statistics getPresenceStatistics() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Statistics presenceStatistics \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics statistics: stats) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (statistics instanceof PresenceStatistics) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                presenceStatistics \u003d statistics;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return presenceStatistics;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Set\u003cStatistics\u003e getStats() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return stats;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Checks if the set of statistics contain the same type of given statistics."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean contains(Statistics statistics) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics stat: stats) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (statistics.getClass() \u003d\u003d stat.getClass()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (o \u003d\u003d null || o.getClass() !\u003d getClass()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (Statistics stat: ((StudentStatistics) o).getStats()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (!contains(stat)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 126
    }
  },
  {
    "path": "src/main/java/atas/model/student/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Student\u0027s email in the student list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@u.nus.edu \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"2. This is followed by a \u0027@u.nus.edu\u0027. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String DOMAIN_REGEX \u003d \"u.nus.edu\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "MarcusTw": 2,
      "YuunoKun": 2,
      "-": 53,
      "erisjacey": 1
    }
  },
  {
    "path": "src/main/java/atas/model/student/Matriculation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Student\u0027s matriculation number."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatriculation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Matriculation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            \"Matriculation Number should be in the form of A1234567X, starting with \u0027A\u0027, followed by \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            + \"7 digits, ends with another letter.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"A[0-9]{7}[A-Z]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Constructs a {@code Matriculation}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param matriculation A valid Matriculation number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Matriculation(String matriculation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(matriculation);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        checkArgument(isValidMatriculation(matriculation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        value \u003d matriculation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns true if a given string is a valid Matriculation number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static boolean isValidMatriculation(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                || (other instanceof Matriculation // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \u0026\u0026 value.equals(((Matriculation) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 2,
      "YuunoKun": 51,
      "erisjacey": 1
    }
  },
  {
    "path": "src/main/java/atas/model/student/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Student\u0027s name in the student list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 2,
      "-": 56,
      "erisjacey": 1
    }
  },
  {
    "path": "src/main/java/atas/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 5,
      "-": 25,
      "erisjacey": 1
    }
  },
  {
    "path": "src/main/java/atas/model/student/ReadOnlyStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Unmodifiable view of an student list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public interface ReadOnlyStudentList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 5,
      "erisjacey": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/atas/model/student/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.statistics.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.statistics.StudentStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Student in the student list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final Matriculation matriculation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    // Statistic fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final StudentStatistics stats;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Student(Name name, Matriculation matriculation, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireAllNonNull(name, matriculation, email, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.matriculation \u003d matriculation;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats \u003d new StudentStatistics();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Matriculation getMatriculation() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return matriculation;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public StudentStatistics getStats() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this.stats;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setStats(Statistics... statistics) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stats.replaceStatistics(statistics);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns true if both students of the same name have the same matriculation number."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // unique students should not have the same matriculation number and email address"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u0026\u0026 (otherStudent.getMatriculation().equals(getMatriculation())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                || otherStudent.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u0026\u0026 otherStudent.getMatriculation().equals(getMatriculation())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return Objects.hash(name, matriculation, email, tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .append(\" Matriculation: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .append(getMatriculation())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 20,
      "YuunoKun": 22,
      "-": 81,
      "erisjacey": 2
    }
  },
  {
    "path": "src/main/java/atas/model/student/StudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.statistics.ParticipationStatistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.statistics.PresenceStatistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Wraps all data at the student-list level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Duplicates are not allowed(same name and matriculation number) (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class StudentList implements ReadOnlyStudentList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentList() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates a StudentList using the students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentList(ReadOnlyStudentList toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Resets the existing data of this {@code StudentList} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void resetData(ReadOnlyStudentList newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    //// student-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the student list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Adds a student to the student list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The student must not already exist in the student list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * {@code target} must exist in the student list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The identity of {@code editedStudent} must not be the same as another existing student in the student list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Removes {@code key} from this {@code StudentList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * {@code key} must exist in the student list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Recalculate student statistics using the given session list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void refreshStudentListStatistics(SessionList sessionList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Student student: students) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Index index \u003d Index.fromZeroBased(counter);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            student.setStats(new ParticipationStatistics().getStudentStatistics(sessionList, index),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    new PresenceStatistics().getStudentStatistics(sessionList, index));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ObservableList\u003cStudent\u003e getModifiableStudentList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return students.asModifiableObservableList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                || (other instanceof StudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u0026\u0026 students.equals(((StudentList) other).students));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 121,
      "YuunoKun": 17,
      "erisjacey": 1
    }
  },
  {
    "path": "src/main/java/atas/model/student/UniqueStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * As such, adding and updating of students uses Student#isSameStudent(Student) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * so as to ensure that the student being added or updated is unique in terms of identity"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * in the UniqueStudentList. However, the removal of a student uses Student#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the backing list as a modifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ObservableList\u003cStudent\u003e asModifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 149
    }
  },
  {
    "path": "src/main/java/atas/model/student/VersionedStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.VersionedEntity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.exceptions.UnableToRedoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.exceptions.UnableToUndoException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class VersionedStudentList extends StudentList implements VersionedEntity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final List\u003cReadOnlyStudentList\u003e studentStateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Creates a VersionedStudentList using the students in the {@code initialState}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public VersionedStudentList(ReadOnlyStudentList initialState) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        studentStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        studentStateList.add(new StudentList(initialState));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public List\u003cReadOnlyStudentList\u003e getStudentStateList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return studentStateList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.studentStateList.add(new StudentList(this));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new UnableToUndoException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        resetData(studentStateList.get(--currentStatePointer));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return currentStatePointer \u003c this.studentStateList.size() - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new UnableToRedoException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        resetData(studentStateList.get(++currentStatePointer));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.studentStateList.subList(currentStatePointer + 1, studentStateList.size()).clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 67
    }
  },
  {
    "path": "src/main/java/atas/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Signals that the operation will result in duplicate Students."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Students are considered duplicates if they have the same identity."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 11
    }
  },
  {
    "path": "src/main/java/atas/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 6
    }
  },
  {
    "path": "src/main/java/atas/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Tag in the student list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 1,
      "erisjacey": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/atas/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.ReadOnlySessionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Contains utility methods for populating {@code StudentList} or {@code SessionList} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Student(new Name(\"Alvin Lee\"), new Matriculation(\"A1234567X\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new Email(\"alvinlee@u.nus.edu\"), getTagSet(\"active\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Student(new Name(\"Bobby Bob\"), new Matriculation(\"A7654321X\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new Email(\"bobbob@u.nus.edu\"), getTagSet(\"active\", \"helpful\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Student(new Name(\"Clement Koh\"), new Matriculation(\"A0962345D\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new Email(\"fruitman@u.nus.edu\"), getTagSet(\"helpful\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Student(new Name(\"Dianne Loh\"), new Matriculation(\"A0155555C\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new Email(\"diannecap5@u.nus.edu\"), getTagSet(\"smart\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Student(new Name(\"Elon Gates\"), new Matriculation(\"A0123123X\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new Email(\"tesloft@u.nus.edu\"), getTagSet()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Student(new Name(\"Faramir Ring\"), new Matriculation(\"A9873210G\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new Email(\"forgondor@u.nus.edu\"), getTagSet()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Student(new Name(\"Gary Tan\"), new Matriculation(\"A0234123T\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new Email(\"garytan@u.nus.edu\"), getTagSet()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Student(new Name(\"Harsha Vardna\"), new Matriculation(\"A0420690X\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new Email(\"harsha@u.nus.edu\"), getTagSet(\"active\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Student(new Name(\"Iman Shumpert\"), new Matriculation(\"A1023956S\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new Email(\"shumps@u.nus.edu\"), getTagSet()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Student(new Name(\"Julius Erving\"), new Matriculation(\"A6666666J\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new Email(\"doctorj@u.nus.edu\"), getTagSet(\"helpful\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static ReadOnlyStudentList getSampleStudentList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList sampleAb \u003d new StudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            sampleAb.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static Session[] getSampleSessions() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Session[] {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            new Session(new SessionName(\"Tutorial 1\"), new SessionDate(\"12/8/2020\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            new Session(new SessionName(\"Tutorial 2\"), new SessionDate(\"19/8/2020\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Session(new SessionName(\"Tutorial 3\"), new SessionDate(\"26/8/2020\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Session(new SessionName(\"Tutorial 4\"), new SessionDate(\"26/8/2020\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Session(new SessionName(\"Tutorial 5\"), new SessionDate(\"2/9/2020\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Session(new SessionName(\"Tutorial 6\"), new SessionDate(\"9/9/2020\")),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Session(new SessionName(\"Tutorial 7\"), new SessionDate(\"23/9/2020\")),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Session(new SessionName(\"Tutorial 8\"), new SessionDate(\"30/9/2020\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Session(new SessionName(\"Tutorial 9\"), new SessionDate(\"7/10/2020\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            new Session(new SessionName(\"Tutorial 10\"), new SessionDate(\"14/10/2020\"))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        };"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static ReadOnlySessionList getSampleSessionList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList sampleSl \u003d new SessionList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sampleSl.updateStudentList(getSampleStudentList().getStudentList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session sampleSession : getSampleSessions()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            sampleSl.addSession(sampleSession);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sampleSl;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 10,
      "YuunoKun": 17,
      "erisjacey": 37,
      "-": 26
    }
  },
  {
    "path": "src/main/java/atas/storage/AtasStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a storage for {@link StudentList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public interface AtasStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Path getStudentListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns StudentList data as a {@link ReadOnlyStudentList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Optional\u003cReadOnlyStudentList\u003e readStudentList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @see #getStudentListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Optional\u003cReadOnlyStudentList\u003e readStudentList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Saves the given {@link ReadOnlyStudentList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param studentList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    void saveStudentList(ReadOnlyStudentList studentList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @see #saveStudentList(ReadOnlyStudentList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    void saveStudentList(ReadOnlyStudentList studentList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 12,
      "erisjacey": 4,
      "-": 30
    }
  },
  {
    "path": "src/main/java/atas/storage/JsonAdaptedAttributes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Participation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Presence;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Jackson-friendly version of {@link Attributes}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class JsonAdaptedAttributes {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String attributeIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String presence;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String participation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Constructs a {@code JsonAdaptedAttributes} with the given {@code attributeIndex},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * {@code presence} and {@code presence}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public JsonAdaptedAttributes(@JsonProperty(\"attributeIndex\") String attributeIndex,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                                 @JsonProperty(\"presence\") String presence,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                                 @JsonProperty(\"participation\") String participation,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                                 @JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.attributeIndex \u003d attributeIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.presence \u003d presence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public JsonAdaptedAttributes(int index, List\u003cAttributes\u003e source, String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.attributeIndex \u003d Integer.toString(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Attributes attributes \u003d source.get(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.presence \u003d Boolean.toString(attributes.getPresenceStatus());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.participation \u003d Boolean.toString(attributes.getParticipationStatus());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getAttributeIndex() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this.attributeIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getPresence() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this.presence;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getParticipation() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this.participation;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Converts this Jackson-friendly adapted attribute object into the model\u0027s {@code Attribute} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted attribute."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Attributes toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (this.presence \u003d\u003d null || !this.presence.equals(\"true\") \u0026\u0026 !this.presence.equals(\"false\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(Presence.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (this.participation \u003d\u003d null || !this.participation.equals(\"true\") \u0026\u0026 !this.participation.equals(\"false\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(Participation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Presence presence \u003d new Presence(Boolean.parseBoolean(this.presence));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Participation participation \u003d new Participation(Boolean.parseBoolean(this.participation));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Name studentName \u003d new Name(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return new Attributes(presence, participation, studentName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 14,
      "MarcusTw": 3,
      "YuunoKun": 63,
      "erisjacey": 5
    }
  },
  {
    "path": "src/main/java/atas/storage/JsonAdaptedSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Jackson-friendly version of {@link Session}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class JsonAdaptedSession {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Session\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String sessionName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String sessionDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final List\u003cJsonAdaptedAttributes\u003e attributesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public JsonAdaptedSession(@JsonProperty(\"sessionName\") String sessionName,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                             @JsonProperty(\"sessionDate\") String sessionDate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                             @JsonProperty(\"attributesList\") List\u003cJsonAdaptedAttributes\u003e attributesList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionDate \u003d sessionDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.attributesList.addAll(attributesList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Converts a given {@code Session} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public JsonAdaptedSession(Session source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionName \u003d source.getSessionName().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionDate \u003d source.getSessionDate().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (int i \u003d 0; i \u003c source.getAttributeList().size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                JsonAdaptedAttributes jsonAdaptedAttributes \u003d new JsonAdaptedAttributes("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        i, source.getAttributeList(), source.returnStudentNameStringByIndex(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                attributesList.add(jsonAdaptedAttributes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Session} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted session."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Session toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        final List\u003cAttributes\u003e studentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (JsonAdaptedAttributes attr : attributesList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            Attributes attributes \u003d new Attributes();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            if (attr.getName() !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                attributes \u003d new Attributes(new Name(attr.getName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (Boolean.parseBoolean(attr.getPresence())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                attributes \u003d attributes.togglePresence();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (Boolean.parseBoolean(attr.getParticipation())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                attributes \u003d attributes.toggleParticipation();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            studentList.add(Integer.parseInt(attr.getAttributeIndex()), attributes);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (sessionName \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(SessionName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!SessionName.isValidSessionName(sessionName)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(SessionName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        final SessionName name \u003d new SessionName(sessionName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (sessionDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(SessionDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!SessionDate.isValidSessionDate(sessionDate)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(SessionDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionDate date;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            date \u003d new SessionDate(sessionDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(SessionDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Session(name, date, studentList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 15,
      "MarcusTw": 7,
      "YuunoKun": 79,
      "erisjacey": 6
    }
  },
  {
    "path": "src/main/java/atas/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String matriculation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String matriculation,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                              @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.matriculation \u003d matriculation;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        matriculation \u003d source.getMatriculation().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Converts this Jackson-friendly adapted Student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (matriculation \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    Matriculation.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!Matriculation.isValidMatriculation(matriculation)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new IllegalValueException(Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        final Matriculation modelMatriculation \u003d new Matriculation(matriculation);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new Student(modelName, modelMatriculation, modelEmail, modelTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 20,
      "YuunoKun": 9,
      "erisjacey": 4,
      "-": 66
    }
  },
  {
    "path": "src/main/java/atas/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/atas/storage/JsonAtasStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.FileUtil.createIfMissing;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.JsonUtil.saveJsonFile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A class to access Atas data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class JsonAtasStorage implements AtasStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAtasStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public JsonAtasStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Path getStudentListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Optional\u003cReadOnlyStudentList\u003e readStudentList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return readStudentList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Similar to {@link #readStudentList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Optional\u003cReadOnlyStudentList\u003e readStudentList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Optional\u003cJsonSerializableStudentList\u003e jsonStudentList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                filePath, JsonSerializableStudentList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!jsonStudentList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return Optional.of(jsonStudentList.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void saveStudentList(ReadOnlyStudentList studentList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        saveStudentList(studentList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Similar to {@link #saveStudentList(ReadOnlyStudentList)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void saveStudentList(ReadOnlyStudentList studentList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        requireNonNull(studentList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        saveJsonFile(new JsonSerializableStudentList(studentList), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 19,
      "erisjacey": 9,
      "-": 53
    }
  },
  {
    "path": "src/main/java/atas/storage/JsonSerializableSessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.ReadOnlySessionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An Immutable SessionList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "@JsonRootName(value \u003d \"sessionlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "class JsonSerializableSessionList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSION \u003d \"Session list contains duplicate session(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final List\u003cJsonAdaptedSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Constructs a {@code JsonSerializableSessionList} with the given sessions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public JsonSerializableSessionList(@JsonProperty(\"sessions\") List\u003cJsonAdaptedSession\u003e sessions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessions.addAll(sessions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Converts a given {@code ReadOnlySessionList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSessionList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public JsonSerializableSessionList(ReadOnlySessionList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessions.addAll(source.getSessions().stream().map(JsonAdaptedSession::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Converts this session list into the model\u0027s {@code SessionList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList sessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (JsonAdaptedSession jas : sessions) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Session session \u003d jas.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (sessionList.contains(session)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            sessionList.addSession(session);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 5,
      "YuunoKun": 51,
      "erisjacey": 5
    }
  },
  {
    "path": "src/main/java/atas/storage/JsonSerializableStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * An Immutable StudentList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "@JsonRootName(value \u003d \"students\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "class JsonSerializableStudentList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Student list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Constructs a {@code JsonSerializableStudentList} with the given students."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public JsonSerializableStudentList(@JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Converts a given {@code ReadOnlyStudentList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableStudentList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public JsonSerializableStudentList(ReadOnlyStudentList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Converts this student list into the model\u0027s {@code StudentList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList studentList \u003d new StudentList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (studentList.hasStudent(student)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            studentList.addStudent(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return studentList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 22,
      "erisjacey": 4,
      "-": 34
    }
  },
  {
    "path": "src/main/java/atas/storage/JsonSessionListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.FileUtil.createIfMissing;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.JsonUtil.saveJsonFile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.ReadOnlySessionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class JsonSessionListStorage implements SessionListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSessionListStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public JsonSessionListStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Path getSessionListFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Optional\u003cReadOnlySessionList\u003e readSessionList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return readSessionList(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Optional\u003cReadOnlySessionList\u003e readSessionList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Optional\u003cJsonSerializableSessionList\u003e jsonSessionList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                filePath, JsonSerializableSessionList.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (jsonSessionList.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return Optional.of(jsonSessionList.get().toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void saveSessionList(ReadOnlySessionList sessionList) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        saveSessionList(sessionList, filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void saveSessionList(ReadOnlySessionList sessionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(sessionList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createIfMissing(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        saveJsonFile(new JsonSerializableSessionList(sessionList), filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 59,
      "erisjacey": 10
    }
  },
  {
    "path": "src/main/java/atas/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/atas/storage/MemoStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Represents a storage for {@link Memo}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public interface MemoStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /** Message to be shown if data file does not exist when application starts */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    String DEFAULT_MEMO_CONTENT \u003d \"Here is a free working space. Press \\\"Ctrl + s\\\" or \\\"Cmd + s\\\" for MacOS to save.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    Path getMemoFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Returns the memo content as a String."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @return memo content."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    String readMemo() throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @see #getMemoFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    String readMemo(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Saves the given {@link Memo} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param memo Memo to be saved."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    void saveMemo(Memo memo) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @see #saveMemo(Memo)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    void saveMemo(Memo memo, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 47
    }
  },
  {
    "path": "src/main/java/atas/storage/SessionListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.ReadOnlySessionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a storage for {@link SessionList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public interface SessionListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    Path getSessionListFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns SessionList data as a {@link ReadOnlySessionList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    Optional\u003cReadOnlySessionList\u003e readSessionList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @see #getSessionListFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    Optional\u003cReadOnlySessionList\u003e readSessionList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Saves the given {@link ReadOnlySessionList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param sessionList cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void saveSessionList(ReadOnlySessionList sessionList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @see #saveSessionList(ReadOnlySessionList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void saveSessionList(ReadOnlySessionList sessionList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 42,
      "erisjacey": 5
    }
  },
  {
    "path": "src/main/java/atas/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.ReadOnlySessionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public interface Storage extends SessionListStorage, AtasStorage, UserPrefsStorage, MemoStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Path getStudentListFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Optional\u003cReadOnlyStudentList\u003e readStudentList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    void saveStudentList(ReadOnlyStudentList studentList) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    Path getSessionListFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    Optional\u003cReadOnlySessionList\u003e readSessionList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    void saveSessionList(ReadOnlySessionList sessionList) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    Path getMemoFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    String readMemo() throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    void saveMemo(Memo memo) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 11,
      "MarcusTw": 3,
      "YuunoKun": 9,
      "erisjacey": 6,
      "-": 23
    }
  },
  {
    "path": "src/main/java/atas/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.ReadOnlySessionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Manages storage of Atas data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private SessionListStorage sessionListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private AtasStorage atasStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private MemoStorage memoStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code SessionListStorage}, {@code StudentListStorage},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * {@code UserPrefStorage} and {@code MemoStorage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StorageManager(SessionListStorage sessionListStorage, AtasStorage atasStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                          UserPrefsStorage userPrefsStorage, MemoStorage memoStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionListStorage \u003d sessionListStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.atasStorage \u003d atasStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.memoStorage \u003d memoStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StudentList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Path getStudentListFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return atasStorage.getStudentListFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Optional\u003cReadOnlyStudentList\u003e readStudentList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return readStudentList(atasStorage.getStudentListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Optional\u003cReadOnlyStudentList\u003e readStudentList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return atasStorage.readStudentList(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void saveStudentList(ReadOnlyStudentList studentList) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        saveStudentList(studentList, atasStorage.getStudentListFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void saveStudentList(ReadOnlyStudentList studentList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        atasStorage.saveStudentList(studentList, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SessionList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Path getSessionListFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionListStorage.getSessionListFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Optional\u003cReadOnlySessionList\u003e readSessionList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return readSessionList(sessionListStorage.getSessionListFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Optional\u003cReadOnlySessionList\u003e readSessionList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionListStorage.readSessionList(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void saveSessionList(ReadOnlySessionList sessionList) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        saveSessionList(sessionList, sessionListStorage.getSessionListFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void saveSessionList(ReadOnlySessionList sessionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionListStorage.saveSessionList(sessionList, filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Memo methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Path getMemoFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return memoStorage.getMemoFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public String readMemo() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return readMemo(memoStorage.getMemoFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public String readMemo(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return memoStorage.readMemo(filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void saveMemo(Memo memo) throws IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        saveMemo(memo, memoStorage.getMemoFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void saveMemo(Memo memo, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memoStorage.saveMemo(memo, filePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 35,
      "MarcusTw": 15,
      "YuunoKun": 31,
      "erisjacey": 8,
      "-": 57
    }
  },
  {
    "path": "src/main/java/atas/storage/TxtMemoStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * A class to access Memo\u0027s data stored as a txt file on the hard disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class TxtMemoStorage implements MemoStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(TxtMemoStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public TxtMemoStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Path getMemoFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public String readMemo() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return readMemo(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public String readMemo(Path filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            File file \u003d new File(String.valueOf(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            if (file.createNewFile()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Memo\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                return DEFAULT_MEMO_CONTENT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            byte[] memoContentInByte \u003d Files.readAllBytes(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            String memoContent \u003d new String(memoContentInByte);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return memoContent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return DEFAULT_MEMO_CONTENT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void saveMemo(Memo memo) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(memo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        saveMemo(memo, filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void saveMemo(Memo memo, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(memo);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        FileWriter fw \u003d new FileWriter(String.valueOf(filePath));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String memoContent \u003d memo.getContent();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        fw.write(memoContent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 71
    }
  },
  {
    "path": "src/main/java/atas/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/atas/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (CommandException | ParseException | InterruptedException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, InterruptedException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 2,
      "erisjacey": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/atas/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w16-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String LINK_MESSAGE \u003d \"Link to the full user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String COMMAND_LIST_GENERAL \u003d \"General:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Get help: help\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Switch between tabs: switch TAB_NAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Generate the name of a randomly selected student: rng\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Undo a command: undo\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Redo a command: redo\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Exit the application: exit\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String COMMAND_LIST_STUDENTS \u003d \"Students: \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Add a student: addstu n/NAME m/MATRICULATION_NUMBER e/NUS_EMAIL_ADDRESS [t/TAG]…\\u200B\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"List all students: liststu\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Find student(s): findstu KEYWORD [MORE_KEYWORDS]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Edit a student\u0027s particulars: editstu INDEX [n/NAME] [m/MATRICULATION_NUMBER] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"[e/NUS_EMAIL_ADDRESS] [t/TAG]…\\u200B\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Delete a student: deletestu INDEX\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Clear the student list: clearstu\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String COMMAND_LIST_SESSIONS \u003d \"Sessions:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Add a session: addses s/SESSION_NAME d/SESSION_DATE\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Delete a session: deleteses INDEX\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Clear the session list: clearses\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Edit a session: editses INDEX [s/SESSION_NAME] [d/SESSION_DATE]\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Enter a session: enterses INDEX\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String COMMAND_LIST_CURRENT_SESSION \u003d \"Current Session:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Toggle the presence status of student(s): presence INDEX_RANGE\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + \"Toggle the participation status of student(s): participate INDEX_RANGE\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String COMMAND_LIST_MEMO \u003d \"Memo:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Add a note: addnote NOTE\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + \"Save memo: Keyboard shortcut: \\\"Ctrl + s\\\" or \\\"Cmd + s\\\" for MacOs\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String COMMAND_LIST \u003d \"Here is the list of commands you can try with ATAS:\\n\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + COMMAND_LIST_GENERAL + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + COMMAND_LIST_STUDENTS + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            + COMMAND_LIST_SESSIONS + \"\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + COMMAND_LIST_CURRENT_SESSION + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            + COMMAND_LIST_MEMO + \"\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private Label linkMessage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private Label commandList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        linkMessage.setText(LINK_MESSAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        commandList.setText(COMMAND_LIST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 22,
      "erisjacey": 27,
      "-": 96
    }
  },
  {
    "path": "src/main/java/atas/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.atas.SwitchCommand.MESSAGE_ALREADY_ON_TAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.atas.SwitchCommand.MESSAGE_INVALID_TAB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.sessionlist.SessionListPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.sessionlist.session.SessionStudentListPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.studentlist.StudentListPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.scene.input.KeyCodeCombination;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final int SLEEP_TIME \u003d 50;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private SessionListPanel sessionListPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private SessionStudentListPanel sessionStudentListPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private MemoBox memoBox;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private StackPane sessionListPanelPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private StackPane sessionStudentListPanelPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private javafx.scene.control.Tab currentSessionTab;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private StackPane memoBoxPlaceholder;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private TextArea memoTextBox;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        sessionListPanel \u003d new SessionListPanel(logic.getFilteredSessionList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        sessionListPanelPlaceholder.getChildren().add(sessionListPanel.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            logic.getLeftSessionDetails(), logic.getRightSessionDetails());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memoBox \u003d new MemoBox(logic.getMemoContent());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memoBoxPlaceholder.getChildren().add(memoBox.getRoot());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Sets up listener for keyboard command to save Memo."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void setSaveMemoListener() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memoTextBox \u003d memoBox.getMemoTextBox();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memoTextBox.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            if (new KeyCodeCombination(KeyCode.S, KeyCombination.SHORTCUT_DOWN).match(event)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    logger.info(\"----------------[USER COMMAND][SHORTCUT_DOWN + KeyCode.S)]\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    logic.saveMemoContent(memoTextBox.getText());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    resultDisplay.setFeedbackToUser(\"Memo saved!\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                } catch (CommandException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    logger.info(\"Saving memory failed\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        });"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // auto saves memo upon changes"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memoTextBox.textProperty().addListener(new ChangeListener\u003cString\u003e() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            public void changed(ObservableValue\u003c? extends String\u003e observable, String oldValue, String newValue) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    logic.saveMemoContent(memoTextBox.getText());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                } catch (CommandException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    logger.info(\"Unable to save memo content\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        });"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Switches to the specified tab."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param tab tab to switch to."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private void handleSwitchTab(Tab tab) throws CommandException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        int currentTabIndex \u003d tabPane.getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assert currentTabIndex \u003e\u003d 0 : \"currentTabIndex should not be negative.\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        int toSwitchTabIndex \u003d tab.getIndex().getZeroBased();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assert toSwitchTabIndex \u003e\u003d 0 : \"toSwitchTabIndex should not be negative.\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (currentTabIndex \u003d\u003d toSwitchTabIndex) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ALREADY_ON_TAB, tab.toDisplayName()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (tab.isValid()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            tabPane.getSelectionModel().select(toSwitchTabIndex);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Updates the content in memoTextBox with new content form {@code Memo}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private void handleEditMemo() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String newContent \u003d logic.getMemoContent();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memoTextBox.setText(newContent);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private void handleEnterSessionTab(Tab tab) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int toSwitchTabIndex \u003d tab.getIndex().getZeroBased();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        logic.enableCurrentSession();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        sessionStudentListPanel \u003d new SessionStudentListPanel(logic.getFilteredAttributesList());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        sessionStudentListPanelPlaceholder.getChildren().add(sessionStudentListPanel.getRoot());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        tabPane.getSelectionModel().select(toSwitchTabIndex);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            logic.getLeftSessionDetails(), logic.getRightSessionDetails());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.hide();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.hide();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Displays the command result feedback."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param commandResult Command result of the user command."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void displayResult(CommandResult commandResult) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            CommandException, ParseException, InterruptedException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            Task displayResultTask \u003d new Task() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                protected Object call() throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    displayResult(commandResult);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            };"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            displayResultTask.run();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            if (commandResult.isSwitchTab() \u0026\u0026 !commandResult.isEnterSession()) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                handleSwitchTab(commandResult.getTab());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            if (commandResult.isEditMemo()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                handleEditMemo();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            if (commandResult.isEnterSession()) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                handleEnterSessionTab(commandResult.getTab());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                Thread.sleep(SLEEP_TIME);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 92,
      "CodingCookieRookie": 60,
      "MarcusTw": 5,
      "erisjacey": 12,
      "-": 170
    }
  },
  {
    "path": "src/main/java/atas/ui/MemoBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * A ui for the memo box that is displayed at the middle of the memo tab."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class MemoBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private static final String FXML \u003d \"MemoBox.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private TextArea memoTextBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Creates a memo box to display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param content String content of the Memo of the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public MemoBox(String content) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memoTextBox.setText(content);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Writes text into the memo box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param content String content to be displayed in the TextArea."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void setTextContent(String content) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memoTextBox.setText(content);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Reads text from the memo box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @return content in the memo box."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public String getTextContent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String content \u003d memoTextBox.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Returns the text box component of the memo box."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @return JavaFx\u0027s TextArea component."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public TextArea getMemoTextBox() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return memoTextBox;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 54
    }
  },
  {
    "path": "src/main/java/atas/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/atas/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final String SPACE \u003d \"   \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label currentSessionLeftStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label currentSessionRightStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label emptyLeft;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label emptyRight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Creates a {@code StatusBarFooterLeft} with the given {@code Path}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public StatusBarFooter(String sessionStatusLeft , String sessionStatusRight) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        emptyLeft.setText(SPACE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        currentSessionLeftStatus.setText(sessionStatusLeft);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        currentSessionRightStatus.setText(sessionStatusRight);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        emptyRight.setText(SPACE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 18,
      "MarcusTw": 3,
      "erisjacey": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/atas/ui/Tab.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Existing tabs with an Index associated to them."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Index numbering starts from 0, beginning with tabs on the left of the GUI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public enum Tab {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    STUDENTS(Index.fromZeroBased(0)),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    SESSIONS(Index.fromZeroBased(1)),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    CURRENT(Index.fromZeroBased(2)),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    MEMO(Index.fromZeroBased(3));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /** Index to represent the order of the tabs */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @param index Index of the tab."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    Tab(Index index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Retrieves the Index of the enum class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @return Index of the tab."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Checks if the given tab is valid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @return boolean value to indicate validity of tab."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return this.equals(Tab.STUDENTS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                || this.equals(Tab.SESSIONS)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                || this.equals(Tab.CURRENT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                || this.equals(Tab.MEMO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Returns a String to be displayed to users."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * @return String value of the tab."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public String toDisplayName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        if (this.equals(Tab.CURRENT)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return \"current session\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return this.toString().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 55,
      "CodingCookieRookie": 2,
      "erisjacey": 2
    }
  },
  {
    "path": "src/main/java/atas/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/atas/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/atas.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            mainWindow.fillInnerParts(); //This should be called before setting listener for saving of Memo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            mainWindow.setSaveMemoListener();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "erisjacey": 6,
      "-": 82
    }
  },
  {
    "path": "src/main/java/atas/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/atas/ui/sessionlist/SessionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.ui.statistics.StatisticsLabel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class SessionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final String FXML \u003d \"SessionListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public final Session session;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private FlowPane stats;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates a {@code StudentCode} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public SessionCard(Session session, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        name.setText(session.getSessionName().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        date.setText(session.getSessionDate().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats.getChildren().add(getPresenceLabelStatisticLabel(session));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats.getChildren().add(getParticipationStatisticLabel(session));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Label getPresenceLabelStatisticLabel(Session session) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new StatisticsLabel(session.getSessionStats().getPresenceStatistics());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Label getParticipationStatisticLabel(Session session) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new StatisticsLabel(session.getSessionStats().getParticipationStatistics());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (!(other instanceof SessionCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        SessionCard card \u003d (SessionCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u0026\u0026 session.equals(card.session);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 59,
      "MarcusTw": 1,
      "YuunoKun": 14,
      "erisjacey": 3
    }
  },
  {
    "path": "src/main/java/atas/ui/sessionlist/SessionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class SessionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final String FXML \u003d \"SessionListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SessionListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private ListView\u003cSession\u003e sessionListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Creates a {@code SessionListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public SessionListPanel(ObservableList\u003cSession\u003e sessionList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        sessionListView.setItems(sessionList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        sessionListView.setCellFactory(listView -\u003e new SessionListPanel.SessionListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Session} using a {@code SessionCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    class SessionListViewCell extends ListCell\u003cSession\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        protected void updateItem(Session session, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            super.updateItem(session, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            if (empty || session \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                setGraphic(new SessionCard(session, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 40,
      "MarcusTw": 2,
      "erisjacey": 4
    }
  },
  {
    "path": "src/main/java/atas/ui/sessionlist/session/AttributesLabel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui.sessionlist.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a control that is either in a positive or negative state."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class AttributesLabel extends Label {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    protected static final String STYLE_POSITIVE \u003d \"-fx-background-color: green\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    protected static final String STYLE_NEGATIVE \u003d \"-fx-background-color: crimson\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    protected boolean isPositive;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Creates an {@code AttributesLabel} with the given text to display."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public AttributesLabel(String text, boolean isPositive) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(text);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.isPositive \u003d isPositive;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        setBackground();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Sets background color depending on \u003ccode\u003eisPositive\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * If \u003ccode\u003etrue\u003c/code\u003e, sets background to green. Otherwise, sets background to red."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void setBackground() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (isPositive) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            this.setStyle(STYLE_POSITIVE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            this.setStyle(STYLE_NEGATIVE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 37
    }
  },
  {
    "path": "src/main/java/atas/ui/sessionlist/session/ParticipationLabel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui.sessionlist.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a {@code Participation} label representing either of the states: has participated or has not yet"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * participated."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class ParticipationLabel extends AttributesLabel {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Creates a {@code ParticipationLabel} with the given text to display."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public ParticipationLabel(String text, boolean isPositive) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(text, isPositive);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 16
    }
  },
  {
    "path": "src/main/java/atas/ui/sessionlist/session/PresenceLabel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui.sessionlist.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a {@code Presence} label representing either of the states: present or absent."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class PresenceLabel extends AttributesLabel {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Creates a {@code ParticipationLabel} with the given text to display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public PresenceLabel(String text, boolean isPositive) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(text, isPositive);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/atas/ui/sessionlist/session/SessionStudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui.sessionlist.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.studentlist.StudentCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class SessionStudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final String FXML \u003d \"SessionStudentListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final String PRESENT \u003d \"Present\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final String ABSENT \u003d \"Absent\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final String PARTICIPATED \u003d \"Participated\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final String NOT_PARTICIPATED \u003d \"Not participated\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public final Attributes attributes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label presence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label participation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private FlowPane attributesPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates a {@code StudentCode} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public SessionStudentCard(Attributes attributes, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.attributes \u003d attributes;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        name.setText(attributes.getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        attributesPane.getChildren().add(getPresenceLabel(attributes));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        attributesPane.getChildren().add(getParticipationLabel(attributes));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Label getPresenceLabel(Attributes attributes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        boolean presenceStatus \u003d attributes.getPresenceStatus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String text \u003d presenceStatus ? PRESENT : ABSENT;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new PresenceLabel(text, presenceStatus);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Label getParticipationLabel(Attributes attributes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        boolean participationStatus \u003d attributes.getParticipationStatus();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String text \u003d participationStatus ? PARTICIPATED : NOT_PARTICIPATED;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new ParticipationLabel(text, participationStatus);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        SessionStudentCard card \u003d (SessionStudentCard) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return card.equals(other)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u0026\u0026 card.name.equals(((SessionStudentCard) other).name)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u0026\u0026 card.presence.equals(((SessionStudentCard) other).presence)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u0026\u0026 card.participation.equals(((SessionStudentCard) other).participation);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 61,
      "MarcusTw": 3,
      "erisjacey": 24
    }
  },
  {
    "path": "src/main/java/atas/ui/sessionlist/session/SessionStudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui.sessionlist.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.studentlist.StudentListPanel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class SessionStudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final String FXML \u003d \"SessionStudentListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private ListView\u003cAttributes\u003e sessionStudentListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates a {@code StudentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public SessionStudentListPanel(ObservableList\u003cAttributes\u003e attributesList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        sessionStudentListView.setItems(attributesList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        sessionStudentListView.setCellFactory(listView -\u003e new SessionStudentListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    class SessionStudentListViewCell extends ListCell\u003cAttributes\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        protected void updateItem(Attributes attributes, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            super.updateItem(attributes, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            if (empty || attributes \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                setGraphic(new SessionStudentCard(attributes, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 36,
      "MarcusTw": 6,
      "erisjacey": 5
    }
  },
  {
    "path": "src/main/java/atas/ui/statistics/StatisticsLabel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.commons.core.statistics.StatisticalValues.STAT_FULL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.commons.core.statistics.StatisticalValues.STAT_NULL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.statistics.Statistics;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class StatisticsLabel extends Label {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected static final String STYLE_NULL_BACKGROUND \u003d \"-fx-background-color: #e6e6e6;\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected static final String STYLE_NULL_TEXT \u003d \"-fx-text-fill: black;\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected static final String STYLE_FULL_BACKGROUND \u003d \"-fx-background-color: green;\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected static final String STYLE_FULL_TEXT \u003d \"-fx-text-fill: white;\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected static final String STYLE_NOTFULL_BACKGROUND \u003d \"-fx-background-color: crimson;\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected static final String STYLE_NOTFULL_TEXT \u003d \"-fx-text-fill: white;\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Creates an {@code StatisticsLabel} with the given text to display."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public StatisticsLabel(Statistics statistics) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(statistics.getDataAsPercentage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        setBackground(statistics);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sets background color depending on the state of the current statistics."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setBackground(Statistics statistics) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int value \u003d statistics.getStatValue();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (value \u003d\u003d STAT_NULL) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            this.setStyle(STYLE_NULL_TEXT + STYLE_NULL_BACKGROUND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else if (value \u003d\u003d STAT_FULL) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            this.setStyle(STYLE_FULL_TEXT + STYLE_FULL_BACKGROUND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            this.setStyle(STYLE_NOTFULL_TEXT + STYLE_NOTFULL_BACKGROUND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 43
    }
  },
  {
    "path": "src/main/java/atas/ui/studentlist/StudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.ui.statistics.StatisticsLabel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Label matriculation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private FlowPane stats;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates a {@code StudentCode} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        matriculation.setText(student.getMatriculation().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats.getChildren().add(getPresenceLabelStatisticLabel(student));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats.getChildren().add(getParticipationStatisticLabel(student));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Label getPresenceLabelStatisticLabel(Student student) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new StatisticsLabel(student.getStats().getPresenceStatistics());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Label getParticipationStatisticLabel(Student student) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new StatisticsLabel(student.getStats().getParticipationStatistics());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 2,
      "MarcusTw": 15,
      "YuunoKun": 14,
      "erisjacey": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/atas/ui/studentlist/StudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates a {@code StudentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 48,
      "erisjacey": 2
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: derive(#1F2933, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    background-color: #1F2933; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ".help-window {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-background-color: #39434c; /* background color of tabs */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ".help-window .label {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-tab-min-width:100px;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-tab-max-height:300px;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #1c2126; /* background color for the entire tab view */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ".tab-pane .tab-header-background {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #263037 ; /* background color for the entire bar of tabs */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-background-insets: 0 4 0 4,0,0, 0; /* spacing between tabs */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-background-radius: 10 10 0 0 ;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #39434c; /* background color of tabs */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-faint-focus-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-pref-width: 150;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-pref-height: 35;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ".tab-pane .tab:selected"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #1c2126;  /* background color of tabs when selected*/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-pref-width: 140;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-text-fill: #8c8c8c;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-font-size: 12.5pt;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-text-fill: #1fc7b8;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-background-color: #1c2126; /* when the list is empty */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #39434c; /* color of list boxes: even */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #505a61;  /* color of list boxes: odd */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-background-color: #1fc7b8;  /* color of list boxes: when selected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ".list-cell:selected .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ".tab_label {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-font-weight: bolder;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-font-size: 5px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     -fx-background-color: #1C2126;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     -fx-background-color: #1C2126; /* colors at border of the main body */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     -fx-border-color: transparent;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #1C2126;  /* color of the bar at the bottom */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ".memo-box {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ".memo-box:focused {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-border-color: #1fc7b8;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    fx-border-radius: 1px;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    -fx-text-fill: aqua;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    -fx-pref-height: 20px;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    -fx-padding: 0 0 10 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #1C2126;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-border-color: #1C2126;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #1C2126;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #1C2126;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ".attributes {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ".attributes .label {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #F3F3F3 #F3F3F3 #F3F3F3 #F3F3F3;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-border-radius: 5px;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #3e4c59, #3e4c59, #3e4c59, #3e4c59; /* color of result display box */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "#memoTextBox .content {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    -fx-background-color: #263037; /* color of memo text box */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "#stats {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "#stats .label {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    -fx-background-color: #E6E6E6;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ".menu-file .label {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ".menu-custom-button .label {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    -fx-size: 5;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    -fx-width: 5;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 58,
      "CodingCookieRookie": 4,
      "MarcusTw": 9,
      "YuunoKun": 15,
      "-": 332,
      "erisjacey": 37
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-background: #1c2126;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    -fx-border-color: #1c2126;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "erisjacey": 2
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        \u003cVBox styleClass\u003d\"help-window\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    \u003cLabel fx:id\u003d\"commandList\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    \u003cLabel fx:id\u003d\"linkMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 18,
      "-": 37,
      "erisjacey": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "         title\u003d\"ATAS\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    \u003cImage url\u003d\"@/images/atas.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" minHeight\u003d\"25\" styleClass\u003d\"menu-custom-button\" \u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "          \u003cMenu fx:id\u003d\"fileMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"File\" \u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        \u003cTabPane fx:id\u003d\"tabPane\" prefHeight\u003d\"800.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@DarkTheme.css\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "          \u003ctabs\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            \u003cTab id\u003d\"studentsTab\" fx:id\u003d\"studentsTab\" text\u003d\"Students\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u003cVBox fx:id\u003d\"studentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            \u003cTab fx:id\u003d\"sessionsTab\" text\u003d\"Sessions\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003cVBox fx:id\u003d\"sessionList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"sessionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003cTab fx:id\u003d\"currentSessionTab\" text\u003d\"Current Session\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003cVBox fx:id\u003d\"sessionStudentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"sessionStudentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            \u003cTab fx:id\u003d\"memoTab\" text\u003d\"Memo\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"memoBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "              \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                   minHeight\u003d\"120\" prefHeight\u003d\"120\" maxHeight\u003d\"120\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 28,
      "CodingCookieRookie": 15,
      "MarcusTw": 3,
      "-": 46,
      "erisjacey": 2
    }
  },
  {
    "path": "src/main/resources/view/MemoBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    \u003cTextArea fx:id\u003d\"memoTextBox\" editable\u003d\"true\" styleClass\u003d\"memo-box\" focusTraversable\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 9
    }
  },
  {
    "path": "src/main/resources/view/SessionListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u003c!-- Add space between Name and Date labels --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u003cRegion prefWidth\u003d\"8\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" text\u003d\"\\$second\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \u003c!-- Add space between Name/Date labels and Statistics labels --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \u003cRegion prefHeight\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"stats\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \u003cRegion prefHeight\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 33,
      "MarcusTw": 6,
      "YuunoKun": 1
    }
  },
  {
    "path": "src/main/resources/view/SessionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "  \u003cListView fx:id\u003d\"sessionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/SessionStudentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"attributesPane\" styleClass\u003d\"attributes\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 31,
      "MarcusTw": 1,
      "erisjacey": 1
    }
  },
  {
    "path": "src/main/resources/view/SessionStudentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cListView fx:id\u003d\"sessionStudentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 8
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "  \u003cHBox minWidth\u003d\"340\" prefWidth\u003d\"500\"  HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cLabel fx:id\u003d\"emptyLeft\" alignment\u003d\"CENTER_LEFT\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cLabel fx:id\u003d\"currentSessionLeftStatus\" prefWidth\u003d\"1000\" alignment\u003d\"CENTER_LEFT\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cLabel fx:id\u003d\"currentSessionRightStatus\" prefWidth\u003d\"500\" textAlignment\u003d\"RIGHT\" alignment\u003d\"CENTER_RIGHT\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cLabel fx:id\u003d\"emptyRight\" alignment\u003d\"CENTER_RIGHT\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 5,
      "MarcusTw": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"90\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \u003cLabel fx:id\u003d\"matriculation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matriculation\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"stats\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 1,
      "YuunoKun": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonAtasStorageTest/invalidAndValidStudentInStudentList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    \"name\": \"Valid Student\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    \"name\": \"Student With Invalid Phone Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 3,
      "-": 10
    }
  },
  {
    "path": "src/test/data/JsonAtasStorageTest/invalidStudentInStudentList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    \"name\": \"Student with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableSessionListTest/duplicateSessionSessionList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \"sessions\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\" : \"lab1\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\" : \"02/02/2019\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\" : [ {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"0\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"true\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"true\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"true\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"true\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\": \"lab1\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\": \"02/02/2019\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\": ["
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"attributeIndex\": \"0\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"presence\": \"true\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"participation\": \"true\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"attributeIndex\": \"1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"presence\": \"true\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"participation\": \"true\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 30
    }
  },
  {
    "path": "src/test/data/JsonSerializableSessionListTest/invalidSessionSessionList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \"sessions\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\" : \"@lab1\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\" : \"021/02/2019\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\" : [ {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"0\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"true\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"true\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"true\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 15
    }
  },
  {
    "path": "src/test/data/JsonSerializableSessionListTest/typicalSessionSessionList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \"sessions\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\" : \"tut1\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\" : \"01/01/2020\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\" : [ {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"0\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"2\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\" : \"tut2\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\" : \"01/02/2020\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\" : [ {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"0\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"1\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"2\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\" : \"tut3\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\" : \"01/03/2020\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\" : [ {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"0\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"1\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"2\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\" : \"lab1\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\" : \"01/04/2020\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\" : [ {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"0\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"1\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"2\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\" : \"lab2\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\" : \"01/05/2020\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\" : [ {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"0\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"1\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"2\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"false\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 83
    }
  },
  {
    "path": "src/test/data/JsonSerializableStudentListTest/duplicateStudentsInStudentList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"matriculation\": \"A1234567C\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"email\": \"alice@u.nus.edu\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"matriculation\": \"A1234567C\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"email\": \"pauline@u.nus.edu\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 1,
      "YuunoKun": 4,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableStudentListTest/invalidStudentInStudentList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"matriculation\": \"A1223456\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"email\": \"invalid@email!3e\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 1,
      "YuunoKun": 2,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableStudentListTest/typicalStudentsStudentList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  \"_comment\": \"StudentList save file which contains the same Student values as in TypicalStudents#getTypicalStudentList()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "  \"students\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"matriculation\" : \"A2395823W\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"email\" : \"alice@u.nus.edu\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"matriculation\" : \"A8473948R\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"email\" : \"johnd@u.nus.edu\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"matriculation\" : \"A2345893J\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"email\" : \"heinz@u.nus.edu\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"matriculation\" : \"A2837453G\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"email\" : \"cornelia@u.nus.edu\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"matriculation\" : \"A2384576V\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"email\" : \"werner@u.nus.edu\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"matriculation\" : \"A7984295F\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"email\" : \"lydia@u.nus.edu\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"matriculation\" : \"A4958234S\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"email\" : \"anna@u.nus.edu\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 2,
      "YuunoKun": 14,
      "-": 23
    }
  },
  {
    "path": "src/test/data/JsonSessionListStorageTest/invalidAndValidSessionSessionList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \"sessions\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\" : \"lab1\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\" : \"02/02/2019\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\" : [ {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"0\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"true\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"true\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"true\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"true\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\": \"!lab2\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\": \"02/02/k2019\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\": ["
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"attributeIndex\": \"0\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"presence\": \"true\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"participation\": \"true\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"attributeIndex\": \"1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"presence\": \"true\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \"participation\": \"true\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 30
    }
  },
  {
    "path": "src/test/data/JsonSessionListStorageTest/invalidSessionSessionList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \"sessions\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionName\" : \"@lab1\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"sessionDate\" : \"021/02/2019\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \"attributesList\" : [ {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"0\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"true\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"false\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"attributeIndex\" : \"1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"presence\" : \"true\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \"participation\" : \"true\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 15
    }
  },
  {
    "path": "src/test/data/JsonSessionListStorageTest/notJsonFormatSessionList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  \"studentListFilePath\" : \"studentlist.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "erisjacey": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "  \"studentListFilePath\" : \"studentlist.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "erisjacey": 1
    }
  },
  {
    "path": "src/test/java/atas/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/atas/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/atas/commons/core/MessagesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class MessagesTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void getStudentListedMessageTest_zeroStudents() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d \"0 students listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(expectedMessage,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(Messages.getStudentListedMessage(0), 0));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void getStudentListedMessageTest_oneStudent() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d \"1 student listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(expectedMessage,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(Messages.getStudentListedMessage(1), 1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void getStudentListedMessageTest_multipleStudents() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessageThreeStudents \u003d \"3 students listed!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(expectedMessageThreeStudents,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(Messages.getStudentListedMessage(3), 3));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessageThirtyStudents \u003d \"30 students listed!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(expectedMessageThirtyStudents,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(Messages.getStudentListedMessage(30), 30));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessageThreeHundredStudents \u003d \"300 students listed!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(expectedMessageThreeHundredStudents,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(Messages.getStudentListedMessage(300), 300));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 36,
      "erisjacey": 1
    }
  },
  {
    "path": "src/test/java/atas/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/atas/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 7,
      "erisjacey": 2,
      "-": 51
    }
  },
  {
    "path": "src/test/java/atas/commons/core/statistics/StatisticalValueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.commons.core.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.commons.core.statistics.StatisticalValues.STAT_FULL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.commons.core.statistics.StatisticalValues.STAT_INVALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.commons.core.statistics.StatisticalValues.STAT_NOTFULL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.commons.core.statistics.StatisticalValues.STAT_NULL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class StatisticalValueTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getValue_negativeValues() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.getValue(-1, -1), STAT_INVALID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.getValue(1, -1), STAT_INVALID);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.getValue(-1, 1), STAT_INVALID);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getValue_positiveValidValues() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.getValue(0, 0), STAT_NULL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.getValue(1, 2), STAT_NOTFULL);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.getValue(2, 2), STAT_FULL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getValue_positiveInvalidValues() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.getValue(2, 1), STAT_INVALID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 32
    }
  },
  {
    "path": "src/test/java/atas/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.AppUtil.getImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertNotNull(getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e getImage(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        checkArgument(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        checkArgument(true, \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e checkArgument(false));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 10,
      "-": 28
    }
  },
  {
    "path": "src/test/java/atas/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 5,
      "-": 103
    }
  },
  {
    "path": "src/test/java/atas/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.ConfigUtil.readConfig;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.ConfigUtil.saveConfig;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.Config;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return readConfig(configFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Config readBack \u003d readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        readBack \u003d readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 12,
      "-": 106
    }
  },
  {
    "path": "src/test/java/atas/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/atas/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.util.FileUtil.writeToFile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.TestUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 5,
      "-": 41
    }
  },
  {
    "path": "src/test/java/atas/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/atas/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.MATRICULATION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.confirmation.ConfirmationCommand.ACCEPT_COMMAND_FULL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.SAMPLE_MEMO_CONTENT_ONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.ConfirmationCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.AddStudentCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.ListStudentsCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.ReadOnlySessionList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.storage.JsonAtasStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.storage.JsonSessionListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.storage.StorageManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.storage.TxtMemoStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonSessionListStorage jsonSessionListStorage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new JsonSessionListStorage(temporaryFolder.resolve(\"typicalSessionSessionList.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAtasStorage studentListStorage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new JsonAtasStorage(temporaryFolder.resolve(\"studentList.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        TxtMemoStorage memoStorage \u003d new TxtMemoStorage(temporaryFolder.resolve(\"memo.txt\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        StorageManager storage \u003d new StorageManager("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                jsonSessionListStorage, studentListStorage, userPrefsStorage, memoStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        int outOfBoundIndexOneBased \u003d outOfBoundIndex.getOneBased();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String deleteStudentCommand \u003d DeleteStudentCommand.COMMAND_WORD + \" \" + outOfBoundIndexOneBased;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(deleteStudentCommand, String.format(ConfirmationCommand.MESSAGE_CONFIRMATION_DELETE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                outOfBoundIndexOneBased), model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandException(ACCEPT_COMMAND_FULL, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String editStudentCommand \u003d EditStudentCommand.COMMAND_WORD + \" \" + outOfBoundIndexOneBased + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + PREFIX_TAG + \"newTag\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(editStudentCommand, String.format(ConfirmationCommand.MESSAGE_CONFIRMATION_EDIT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                outOfBoundIndexOneBased), model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandException(ACCEPT_COMMAND_FULL, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String listStudentsCommand \u003d ListStudentsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(listStudentsCommand, ListStudentsCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Setup LogicManager with JsonStudentListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonSessionListStorage jsonSessionListStorage \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new JsonSessionListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionSessionList.json\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAtasStorage studentListStorage \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new JsonAtasIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionStudentList.json\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        TxtMemoStorage memoStorage \u003d new TxtMemoIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMemo.txt\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        StorageManager storage \u003d new StorageManager("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                jsonSessionListStorage, studentListStorage, userPrefsStorage, memoStorage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String addStudentCommand \u003d AddStudentCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                + MATRICULATION_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.addStudent(expectedStudent);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandFailure(addStudentCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getters() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonSessionListStorage jsonSessionListStorage \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new JsonSessionListStorage(temporaryFolder.resolve(\"typicalSessionSessionList.json\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAtasStorage atasStorage \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new JsonAtasStorage(temporaryFolder.resolve(\"atas.json\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        TxtMemoStorage memoStorage \u003d new TxtMemoStorage(temporaryFolder.resolve(\"memo.txt\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        StorageManager storage \u003d new StorageManager("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                jsonSessionListStorage, atasStorage, userPrefsStorage, memoStorage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        LogicManager logicManager \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        logic.enableCurrentSession();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        logic.disableCurrentSession();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(logicManager.getStudentList(), logic.getStudentList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(logicManager.getFilteredStudentList(), logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(logicManager.getFilteredSessionList(), logic.getFilteredSessionList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(logicManager.getStudentListFilePath(), logic.getStudentListFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(logicManager.getGuiSettings(), logic.getGuiSettings());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(logicManager.getMemoContent(), logic.getMemoContent());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testSaveMemoContent() throws CommandException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Memo memo \u003d model.getMemo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        logic.saveMemoContent(SAMPLE_MEMO_CONTENT_ONE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(SAMPLE_MEMO_CONTENT_ONE, memo.getContent());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSessionList(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static class JsonAtasIoExceptionThrowingStub extends JsonAtasStorage {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        private JsonAtasIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void saveStudentList(ReadOnlyStudentList studentList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static class JsonSessionListIoExceptionThrowingStub extends JsonSessionListStorage {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        private JsonSessionListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void saveSessionList(ReadOnlySessionList sessionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private static class TxtMemoIoExceptionThrowingStub extends TxtMemoStorage {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        private TxtMemoIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void saveMemo(Memo memo, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 51,
      "MarcusTw": 31,
      "YuunoKun": 30,
      "erisjacey": 23,
      "-": 118
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, null, false, false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, null, false, false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different switchTab value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, Tab.STUDENTS, false, false, false)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different editMemo value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, null, true, false, false)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, null, false, true, false)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, null, false,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, false).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different switchTab value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, Tab.STUDENTS, false,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, false).hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different editMemo value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, null, true,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, false).hashCode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, null, false,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                true, false).hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different isEnterSession value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, null, false,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, true).hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getters() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", true, Tab.CURRENT, true, true, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(commandResult.isSwitchTab());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(commandResult.isExit());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(commandResult.isEditMemo());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(commandResult.isEnterSession());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 29,
      "YuunoKun": 7,
      "erisjacey": 2,
      "-": 49
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.EditSessionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.EditSessionDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_MATRICULATION_AMY \u003d \"A3252832E\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_MATRICULATION_BOB \u003d \"A3459682D\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@u.nus.edu\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@u.nus.edu\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + CliSyntax.PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + CliSyntax.PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MATRICULATION_DESC_AMY \u003d \" \" + CliSyntax.PREFIX_MATRICULATION + VALID_MATRICULATION_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MATRICULATION_DESC_BOB \u003d \" \" + CliSyntax.PREFIX_MATRICULATION + VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + CliSyntax.PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + CliSyntax.PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + CliSyntax.PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + CliSyntax.PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + CliSyntax.PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    // should have a letter at the end"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String INVALID_MATRICULATION_DESC \u003d \" \" + CliSyntax.PREFIX_MATRICULATION + \"A0234567\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + CliSyntax.PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + CliSyntax.PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    // ---------------------- Session Testing -------------------------------"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_SESSIONNAME_REC \u003d \"recitation1\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_SESSIONNAME_CON \u003d \"midterm consultation\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_SESSIONDATE_REC \u003d \"12/7/2017\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String VALID_SESSIONDATE_CON \u003d \"27/11/2015\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String VALID_SESSIONNAME_REC_DESC \u003d \" \" + CliSyntax.PREFIX_SESSION_NAME + VALID_SESSIONNAME_REC;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String VALID_SESSIONNAME_CON_DESC \u003d \" \" + CliSyntax.PREFIX_SESSION_NAME + VALID_SESSIONNAME_CON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String VALID_SESSIONDATE_REC_DESC \u003d \" \" + CliSyntax.PREFIX_SESSION_DATE + VALID_SESSIONDATE_REC;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String VALID_SESSIONDATE_CON_DESC \u003d \" \" + CliSyntax.PREFIX_SESSION_DATE + VALID_SESSIONDATE_CON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final SessionName VALID_NAME_REC \u003d new SessionName(VALID_SESSIONNAME_REC);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final SessionName VALID_NAME_CON \u003d new SessionName(VALID_SESSIONNAME_CON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final SessionDate VALID_DATE_REC \u003d new SessionDate(VALID_SESSIONDATE_REC);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final SessionDate VALID_DATE_CON \u003d new SessionDate(VALID_SESSIONDATE_CON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session REC \u003d new Session(VALID_NAME_REC, VALID_DATE_REC);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session CON \u003d new Session(VALID_NAME_CON, VALID_DATE_CON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String INVALID_SESSIONNAME \u003d \"@tut3\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String INVALID_SESSIONDATE \u003d \"13/13/2020\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String INVALID_SESSIONNAME_DESC \u003d \" \" + CliSyntax.PREFIX_SESSION_NAME + INVALID_SESSIONNAME;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String INVALID_SESSIONDATE_DESC \u003d \" \" + CliSyntax.PREFIX_SESSION_DATE + INVALID_SESSIONDATE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final EditSessionCommand.EditSessionDescriptor DESC_REC;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final EditSessionCommand.EditSessionDescriptor DESC_CON;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withMatriculation(VALID_MATRICULATION_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withMatriculation(VALID_MATRICULATION_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        DESC_REC \u003d new EditSessionDescriptorBuilder().withSessionName(VALID_SESSIONNAME_REC)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionDate(VALID_SESSIONDATE_REC).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        DESC_CON \u003d new EditSessionDescriptorBuilder().withSessionName(VALID_SESSIONNAME_CON)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionDate(VALID_SESSIONDATE_CON).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * - the student list, filtered student list and selected student in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList expectedStudentList \u003d new StudentList(actualModel.getStudentList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedStudentList, actualModel.getStudentList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * {@code model}\u0027s student list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the session at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static void showSessionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredSessionList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session session \u003d model.getFilteredSessionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        model.updateFilteredSessionList(s -\u003e s.equals(session));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(1, model.getFilteredSessionList().size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 20,
      "MarcusTw": 20,
      "YuunoKun": 40,
      "erisjacey": 25,
      "-": 74
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/atas/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, null, false, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 1,
      "erisjacey": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/atas/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, null,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "erisjacey": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/atas/RedoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.atas.RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalIndexRanges.INDEX_RANGE_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.REMEDIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_ONE_STRING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.AddSessionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.ClearSessionsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.DeleteSessionCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.EditSessionCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.session.ParticipateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.session.PresenceCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.studentlist.AddStudentCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.EditSessionDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Unit testing for {@code RedoCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Dependent on the all {@code Command} objects used, including {@code UndoCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Model modelCopy \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_invalidRedoCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e redoCommand.execute(modelCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_redoAddStudentCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        AddStudentCommand command \u003d new AddStudentCommand(HOON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        executeCommandAndUndo(command, modelCopy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertRedoCommandSuccess(command, modelCopy, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_redoDeleteStudentCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        DeleteStudentCommand command \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        executeCommandAndUndo(command, modelCopy);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertRedoCommandSuccess(command, modelCopy, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_redoClearStudentCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        ClearStudentListCommand command \u003d new ClearStudentListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        executeCommandAndUndo(command, modelCopy);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertRedoCommandSuccess(command, modelCopy, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_redoEditStudentCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        EditStudentCommand command \u003d new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        executeCommandAndUndo(command, modelCopy);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertRedoCommandSuccess(command, modelCopy, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_redoAddSessionCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        AddSessionCommand command \u003d new AddSessionCommand(REMEDIAL);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        executeCommandAndUndo(command, modelCopy);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertRedoCommandSuccess(command, modelCopy, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_redoDeleteSessionCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        DeleteSessionCommand command \u003d new DeleteSessionCommand(INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        executeCommandAndUndo(command, modelCopy);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertRedoCommandSuccess(command, modelCopy, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_redoClearSessionCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        ClearSessionsCommand command \u003d new ClearSessionsCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        executeCommandAndUndo(command, modelCopy);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertRedoCommandSuccess(command, modelCopy, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_redoEditSessionCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        EditSessionCommand command \u003d new EditSessionCommand(INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new EditSessionDescriptorBuilder().withSessionName(SESSIONNAME_WEEK_ONE_STRING).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        executeCommandAndUndo(command, modelCopy);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertRedoCommandSuccess(command, modelCopy, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_redoParticipateCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        expectedModel.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        modelCopy.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        ParticipateCommand command \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new ParticipateCommand(modelCopy.getSessionList().getSessions().get(0).getSessionName(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                        INDEX_RANGE_ONE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        executeCommandAndUndo(command, modelCopy);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertRedoCommandSuccess(command, modelCopy, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_redoPresenceCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        expectedModel.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        modelCopy.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        PresenceCommand command \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new PresenceCommand(modelCopy.getSessionList().getSessions().get(0).getSessionName(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                        INDEX_RANGE_ONE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        executeCommandAndUndo(command, modelCopy);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertRedoCommandSuccess(command, modelCopy, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void executeCommandAndUndo(Command command, Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        new UndoCommand().execute(model);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void assertRedoCommandSuccess(Command command, Model actualModel, Model expectedModel)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        command.execute(expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertCommandSuccess(redoCommand, actualModel, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 5,
      "erisjacey": 139
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/atas/RngCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class RngCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_rngNonEmptyList_success() throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String expectedMessage \u003d String.format(RngCommand.MESSAGE_SUCCESS, TypicalStudents.ELLE.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String actualMessage \u003d new RngCommand().execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_rngEmptyList_throwsCommandException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        model.clearStudentList(); // clear student list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(CommandException.class, RngCommand.MESSAGE_NO_STUDENTS, () -\u003e new RngCommand().execute(model));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 30
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/atas/SwitchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalTabNames.CURRENT_SESSION_TAB_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalTabNames.INVALID_TAB_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalTabNames.MEMO_TAB_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalTabNames.SESSIONS_TAB_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalTabNames.STUDENTS_TAB_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.ui.Tab;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class SwitchCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_switchStudentsTab_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String expectedMessage \u003d String.format(SwitchCommand.MESSAGE_SWITCH_TAB_SUCCESS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                Tab.STUDENTS.toString().toLowerCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, Tab.STUDENTS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(STUDENTS_TAB_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(switchCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_switchSessionsTab_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String expectedMessage \u003d String.format(SwitchCommand.MESSAGE_SWITCH_TAB_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                Tab.SESSIONS.toString().toLowerCase());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, Tab.SESSIONS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(SESSIONS_TAB_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(switchCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_switchCurrentTab_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String expectedMessage \u003d String.format(SwitchCommand.MESSAGE_SWITCH_TAB_SUCCESS, Tab.CURRENT.toDisplayName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, Tab.CURRENT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(CURRENT_SESSION_TAB_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(switchCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_switchMemoTab_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(SwitchCommand.MESSAGE_SWITCH_TAB_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                Tab.MEMO.toString().toLowerCase());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, Tab.MEMO,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(MEMO_TAB_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandSuccess(switchCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_invalidTabName_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(INVALID_TAB_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertCommandFailure(switchCommand, model, SwitchCommand.MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToStudentsCommand \u003d new SwitchCommand(STUDENTS_TAB_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToSessionsCommand \u003d new SwitchCommand(SESSIONS_TAB_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToCurrentSessionCommand \u003d new SwitchCommand(CURRENT_SESSION_TAB_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToMemoCommand \u003d new SwitchCommand(MEMO_TAB_NAME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToInvalidTabCommand \u003d new SwitchCommand(INVALID_TAB_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToStudentsCommand.equals(switchToStudentsCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToSessionsCommand.equals(switchToSessionsCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToCurrentSessionCommand.equals(switchToCurrentSessionCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToMemoCommand.equals(switchToMemoCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToStudentsCommandCopy \u003d new SwitchCommand(STUDENTS_TAB_NAME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToStudentsCommand.equals(switchToStudentsCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToSessionsCommandCopy \u003d new SwitchCommand(SESSIONS_TAB_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToSessionsCommand.equals(switchToSessionsCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToCurrentSessionCommandCopy \u003d new SwitchCommand(CURRENT_SESSION_TAB_NAME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToCurrentSessionCommand.equals(switchToCurrentSessionCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand switchToMemoCommandCopy \u003d new SwitchCommand(MEMO_TAB_NAME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(switchToMemoCommand.equals(switchToMemoCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToStudentsCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToSessionsCommand.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToStudentsCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToSessionsCommand.equals(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // invalid tabs -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToStudentsCommand.equals(switchToInvalidTabCommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToSessionsCommand.equals(switchToInvalidTabCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different tabs -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(switchToStudentsCommand.equals(switchToSessionsCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 93,
      "CodingCookieRookie": 2,
      "YuunoKun": 7,
      "erisjacey": 12
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/atas/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.atas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.atas.UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalIndexRanges.INDEX_RANGE_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.REMEDIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_ONE_STRING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.AddSessionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.ClearSessionsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.DeleteSessionCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.EditSessionCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.session.ParticipateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.session.PresenceCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.studentlist.AddStudentCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.EditSessionDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Unit testing for {@code RedoCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Dependent on the all {@code Command} objects used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final Model modelCopy \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_invalidUndoCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e undoCommand.execute(modelCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_undoAddStudentCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createCommandAndExecute(new AddStudentCommand(HOON), modelCopy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertUndoCommandSuccess(modelCopy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_undoDeleteStudentCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createCommandAndExecute(new DeleteStudentCommand(INDEX_FIRST_STUDENT), modelCopy);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertUndoCommandSuccess(modelCopy);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_undoClearStudentCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createCommandAndExecute(new ClearStudentListCommand(), modelCopy);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertUndoCommandSuccess(modelCopy);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_undoEditStudentCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createCommandAndExecute(new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build()), modelCopy);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertUndoCommandSuccess(modelCopy);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_undoAddSessionCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createCommandAndExecute(new AddSessionCommand(REMEDIAL), modelCopy);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertUndoCommandSuccess(modelCopy);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_undoDeleteSessionCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createCommandAndExecute(new DeleteSessionCommand(INDEX_FIRST_SESSION), modelCopy);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertUndoCommandSuccess(modelCopy);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_undoClearSessionCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createCommandAndExecute(new ClearSessionsCommand(), modelCopy);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertUndoCommandSuccess(modelCopy);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_undoEditSessionCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createCommandAndExecute(new EditSessionCommand(INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new EditSessionDescriptorBuilder().withSessionName(SESSIONNAME_WEEK_ONE_STRING).build()), modelCopy);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertUndoCommandSuccess(modelCopy);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_undoParticipateCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        modelCopy.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createCommandAndExecute("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new ParticipateCommand(modelCopy.getSessionList().getSessions().get(0).getSessionName(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                INDEX_RANGE_ONE), modelCopy);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertUndoCommandSuccess(modelCopy);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void execute_undoPresenceCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        modelCopy.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        createCommandAndExecute("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new PresenceCommand(modelCopy.getSessionList().getSessions().get(0).getSessionName(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                INDEX_RANGE_ONE), modelCopy);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertUndoCommandSuccess(modelCopy);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void createCommandAndExecute(Command command, Model model) throws CommandException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void assertUndoCommandSuccess(Model model) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertCommandSuccess(undoCommand, model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 5,
      "erisjacey": 122
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/confirmation/ConfirmCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.confirmation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand firstDeleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand secondDeleteStudentCommand \u003d new DeleteStudentCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearStudentListCommand clearStudentListCommand \u003d new ClearStudentListCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmCommand confirmationDeleteStudentCommand \u003d new ConfirmationCommand(firstDeleteStudentCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmCommand confirmationEditStudentCommand \u003d new ConfirmationCommand(editStudentCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmCommand confirmationClearStudentListCommand \u003d new ConfirmationCommand(clearStudentListCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmCommand confirmationAcceptDeleteStudentCommand \u003d new ConfirmationAcceptCommand("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                firstDeleteStudentCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmCommand confirmationAcceptEditStudentCommand \u003d new ConfirmationAcceptCommand("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                editStudentCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmCommand confirmationAcceptClearStudentListCommand \u003d new ConfirmationAcceptCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                clearStudentListCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmCommand confirmationRejectDeleteStudentCommand \u003d new ConfirmationRejectCommand("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                firstDeleteStudentCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmCommand confirmationRejectEditStudentCommand \u003d new ConfirmationRejectCommand("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                editStudentCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmCommand confirmationRejectClearStudentListCommand \u003d new ConfirmationRejectCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                clearStudentListCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationDeleteStudentCommand.equals(confirmationDeleteStudentCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationEditStudentCommand.equals(confirmationEditStudentCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationClearStudentListCommand.equals(confirmationClearStudentListCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationDeleteStudentCommand.equals(new ConfirmationCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                secondDeleteStudentCommand)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationDeleteStudentCommand.equals(confirmationClearStudentListCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationDeleteStudentCommand.equals(confirmationEditStudentCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationEditStudentCommand.equals(confirmationClearStudentListCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Make sure there is a clear distinction between accept and reject confirmation command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationAcceptDeleteStudentCommand.equals(confirmationRejectDeleteStudentCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationAcceptClearStudentListCommand.equals(confirmationRejectClearStudentListCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationAcceptEditStudentCommand.equals(confirmationRejectEditStudentCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Make sure there is clear distinction between confirmation and accept/reject confirmation command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationClearStudentListCommand.equals(confirmationAcceptClearStudentListCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationClearStudentListCommand.equals(confirmationRejectClearStudentListCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationDeleteStudentCommand.equals(confirmationAcceptDeleteStudentCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationDeleteStudentCommand.equals(confirmationRejectDeleteStudentCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationEditStudentCommand.equals(confirmationAcceptEditStudentCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationEditStudentCommand.equals(confirmationRejectEditStudentCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 34,
      "MarcusTw": 36,
      "erisjacey": 1
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/confirmation/ConfirmationAcceptCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.confirmation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationAcceptCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_acceptValidDeleteCommand_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptCommand \u003d new ConfirmationAcceptCommand(deleteStudentCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationAcceptCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_invalidDeleteStudentCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptCommand \u003d new ConfirmationAcceptCommand(deleteStudentCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(confirmationAcceptCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_acceptValidEditStudentCommand_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptCommand \u003d new ConfirmationAcceptCommand(editStudentCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationAcceptCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_invalidEditStudentCommand_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptCommand \u003d new ConfirmationAcceptCommand(editStudentCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(confirmationAcceptCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_acceptClearStudentsCommand_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearStudentListCommand clearStudentListCommand \u003d new ClearStudentListCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalSessionList(new ModelManager()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                .getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new ModelManager().getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptCommand \u003d new ConfirmationAcceptCommand(clearStudentListCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationAcceptCommand, model, ClearStudentListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand firstDeleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand secondDeleteStudentCommand \u003d new DeleteStudentCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ClearStudentListCommand clearStudentsCommand \u003d new ClearStudentListCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptDeleteStudentCommand \u003d new ConfirmationAcceptCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                firstDeleteStudentCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptEditStudentCommand \u003d new ConfirmationAcceptCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                editStudentCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationAcceptCommand confirmationAcceptClearStudentsCommand \u003d new ConfirmationAcceptCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                clearStudentsCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationAcceptDangerousCommand equals confirmationAcceptSameDangerousCommand"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationAcceptDeleteStudentCommand.equals(confirmationAcceptDeleteStudentCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationAcceptEditStudentCommand.equals(confirmationAcceptEditStudentCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationAcceptClearStudentsCommand.equals(confirmationAcceptClearStudentsCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationAcceptDangerousCommand equals confirmationAcceptAnotherDangerousCommand"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationAcceptDeleteStudentCommand.equals(confirmationAcceptClearStudentsCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationAcceptDeleteStudentCommand.equals(confirmationAcceptEditStudentCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationAcceptEditStudentCommand.equals(confirmationAcceptClearStudentsCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // Check if confirmationAcceptDeleteStudentCommand equals confirmationAcceptAnotherDeleteCommand"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationAcceptDeleteStudentCommand.equals(new ConfirmationAcceptCommand("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                secondDeleteStudentCommand)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationAcceptCommand equals another subclass of ConfirmCommand"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationAcceptDeleteStudentCommand.equals(new ConfirmationRejectCommand("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                firstDeleteStudentCommand)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 38,
      "MarcusTw": 86,
      "YuunoKun": 1,
      "erisjacey": 12
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/confirmation/ConfirmationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.confirmation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_deleteCommandConfirmation_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(ConfirmationCommand.MESSAGE_CONFIRMATION_DELETE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(deleteStudentCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_editCommandConfirmation_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            new EditStudentDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(ConfirmationCommand.MESSAGE_CONFIRMATION_EDIT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(editStudentCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_clearStudentListCommandConfirmation_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearStudentListCommand clearStudentListCommand \u003d new ClearStudentListCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d ConfirmationCommand.MESSAGE_CONFIRMATION_CLEAR;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(clearStudentListCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand firstDeleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand secondDeleteStudentCommand \u003d new DeleteStudentCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearStudentListCommand clearStudentListCommand \u003d new ClearStudentListCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationCommand confirmationDeleteStudentCommand \u003d new ConfirmationCommand(firstDeleteStudentCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationCommand confirmationEditStudentCommand \u003d new ConfirmationCommand(editStudentCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationCommand confirmationClearStudentListCommand \u003d new ConfirmationCommand(clearStudentListCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationDangerousCommand equals confirmationSameDangerousCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationDeleteStudentCommand.equals(confirmationDeleteStudentCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationEditStudentCommand.equals(confirmationEditStudentCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationClearStudentListCommand.equals(confirmationClearStudentListCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationDangerousCommand equals confirmationAnotherDangerousCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationDeleteStudentCommand.equals(confirmationClearStudentListCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationDeleteStudentCommand.equals(confirmationEditStudentCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationEditStudentCommand.equals(confirmationClearStudentListCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationDeleteCommand equals another subclass of ConfirmCommand"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationDeleteStudentCommand.equals(new ConfirmationRejectCommand(secondDeleteStudentCommand)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationDeleteStudentCommand.equals(new ConfirmationAcceptCommand(secondDeleteStudentCommand)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 21,
      "MarcusTw": 69,
      "YuunoKun": 1,
      "erisjacey": 9
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/confirmation/ConfirmationRejectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.confirmation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationRejectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_rejectDeleteStudentCommand_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(ConfirmationRejectCommand.MESSAGE_REJECT_COMMAND, deleteStudentCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectCommand \u003d new ConfirmationRejectCommand(deleteStudentCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationRejectCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_rejectEditStudentCommand_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(ConfirmationRejectCommand.MESSAGE_REJECT_COMMAND, editStudentCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectCommand \u003d new ConfirmationRejectCommand(editStudentCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationRejectCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_rejectClearStudentListCommand_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearStudentListCommand clearStudentListCommand \u003d new ClearStudentListCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(ConfirmationRejectCommand.MESSAGE_REJECT_COMMAND,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                clearStudentListCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectCommand \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationRejectCommand(clearStudentListCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(confirmationRejectCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand firstDeleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand secondDeleteStudentCommand \u003d new DeleteStudentCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearStudentListCommand clearStudentListCommand \u003d new ClearStudentListCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectDeleteStudentCommand \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationRejectCommand(firstDeleteStudentCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectEditStudentCommand \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationRejectCommand(editStudentCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ConfirmationRejectCommand confirmationRejectClearStudentListCommand \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationRejectCommand(clearStudentListCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationRejectDangerousCommand equals confirmationRejectSameDangerousCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationRejectDeleteStudentCommand.equals(confirmationRejectDeleteStudentCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationRejectEditStudentCommand.equals(confirmationRejectEditStudentCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(confirmationRejectClearStudentListCommand.equals(confirmationRejectClearStudentListCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if confirmationRejectDangerousCommand equals confirmationRejectAnotherDangerousCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationRejectDeleteStudentCommand.equals(confirmationRejectClearStudentListCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationRejectDeleteStudentCommand.equals(confirmationRejectEditStudentCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationRejectEditStudentCommand.equals(confirmationRejectClearStudentListCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // Check if confirmationRejectDeleteStudentCommand equals confirmationRejectAnotherDeleteStudentCommand"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationRejectDeleteStudentCommand.equals(new ConfirmationRejectCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                secondDeleteStudentCommand)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Check if ConfirmationRejectCommand equals another subclass of ConfirmCommand"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(confirmationRejectDeleteStudentCommand.equals(new ConfirmationAcceptCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                firstDeleteStudentCommand)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 27,
      "MarcusTw": 67,
      "YuunoKun": 1,
      "erisjacey": 8
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/memo/AddNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.logic.commands.memo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class AddNoteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddNoteCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_noteAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String content \u003d \"content\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String note \u003d \"note\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddNoteCommandTest.ModelStubWithNewMemoContent modelStub \u003d new AddNoteCommandTest"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                .ModelStubWithNewMemoContent(content);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandResult commandResult \u003d new AddNoteCommand(note).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(AddNoteCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(content.concat(\"\\n\").concat(note), modelStub.getMemoContent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String note1 \u003d \"note1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String note2 \u003d \"note2\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddNoteCommand addNote1Command \u003d new AddNoteCommand(note1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddNoteCommand addNote2Command \u003d new AddNoteCommand(note2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(addNote1Command.equals(addNote1Command));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddNoteCommand addNote1CommandCopy \u003d new AddNoteCommand(note1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(addNote1Command.equals(addNote1CommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(addNote1Command.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(addNote1Command.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different String -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(addNote1Command.equals(addNote2Command));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Path getStudentListFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setStudentListFilePath(Path studentListFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void clearStudentList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public ReadOnlyStudentList getStudentList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void deleteStudent(Student target, Index id) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Path getSessionListFilePath() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setSessionListFilePath(Path sessionListFilePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void resetSessionList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public SessionList getSessionList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void deleteSession(Session target, Index id) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void addSession(Session session) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void enterSession(Index sessionIndex) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public ObservableList\u003cAttributes\u003e getCurrentAttributesList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public Session getCurrentSession() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void updateCurrentAttributesList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void updateParticipationBySessionName(SessionName sessionName, IndexRange indexRange) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void updatePresenceBySessionName(SessionName sessionName, IndexRange indexRange) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Index getSessionId() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setCurrentSessionFalse() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setCurrentSessionTrue() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public boolean returnCurrentSessionEnabledStatus() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Path getMemoFilePath() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setMemoFilePath(Path memoFilePath) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Memo getMemo() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public String getMemoContent() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void saveMemoContent(String content) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void addNoteToMemo(String note) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Index generateRandomStudentIndex() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void refreshStatistics() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void refreshStudentStatistics() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void refreshSessionStatistics() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public String getLeftSessionDetails() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public String getRightSessionDetails() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void commit() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public boolean canRedo() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void redo() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * A Model stub that contains a single ."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private class ModelStubWithNewMemoContent extends AddNoteCommandTest.ModelStub {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        private String content \u003d \"original content\";"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ModelStubWithNewMemoContent(String content) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            requireNonNull(content);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            this.content \u003d content;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void addNoteToMemo(String note) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            this.content \u003d content.concat(\"\\n\").concat(note);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public String getMemoContent() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            return this.content;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 287,
      "CodingCookieRookie": 16,
      "YuunoKun": 8,
      "erisjacey": 44
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/sessionlist/AddSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class AddSessionCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void constructor_nullSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddSessionCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_sessionAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ModelStubAcceptingSessionAdded modelStub \u003d new ModelStubAcceptingSessionAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session validSession \u003d new SessionBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        CommandResult commandResult \u003d new AddSessionCommand(validSession).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(String.format(AddSessionCommand.MESSAGE_SUCCESS, validSession), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(Arrays.asList(validSession), modelStub.sessionList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_duplicateSession_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session validSession \u003d new SessionBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        AddSessionCommand addSessionCommand \u003d new AddSessionCommand(validSession);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithSession(validSession);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                AddSessionCommand.MESSAGE_DUPLICATE_SESSION, () -\u003e addSessionCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session tut \u003d new SessionBuilder().withSessionName(\"tut\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session lab \u003d new SessionBuilder().withSessionName(\"lab\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        AddSessionCommand addTutCommand \u003d new AddSessionCommand(tut);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        AddSessionCommand addLabCommand \u003d new AddSessionCommand(lab);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(addTutCommand.equals(addTutCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same session name -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        AddSessionCommand addTutCommandCopy \u003d new AddSessionCommand(tut);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(addTutCommand.equals(addTutCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(addTutCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(addTutCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(addTutCommand.equals(addLabCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public Path getStudentListFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void setStudentListFilePath(Path studentListFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void clearStudentList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public ReadOnlyStudentList getStudentList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void deleteStudent(Student target, Index id) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public Path getSessionListFilePath() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void setSessionListFilePath(Path sessionListFilePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void resetSessionList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public SessionList getSessionList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void deleteSession(Session target, Index id) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void addSession(Session session) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void enterSession(Index sessionIndex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public ObservableList\u003cAttributes\u003e getCurrentAttributesList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public Session getCurrentSession() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void updateCurrentAttributesList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void updateParticipationBySessionName(SessionName sessionName, IndexRange indexRange) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void updatePresenceBySessionName(SessionName sessionName, IndexRange indexRange) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Index getSessionId() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void setCurrentSessionFalse() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void setCurrentSessionTrue() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public boolean returnCurrentSessionEnabledStatus() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Path getMemoFilePath() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setMemoFilePath(Path memoFilePath) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Memo getMemo() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public String getMemoContent() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void saveMemoContent(String content) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void addNoteToMemo(String note) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public Index generateRandomStudentIndex() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void refreshStatistics() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void refreshStudentStatistics() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void commit() { }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public boolean canRedo() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void redo() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void refreshSessionStatistics() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public String getLeftSessionDetails() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public String getRightSessionDetails() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A Model stub that contains a single session."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private class ModelStubWithSession extends ModelStub {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        private final Session session;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ModelStubWithSession(Session session) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            this.session \u003d session;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return this.session.isSameSession(session);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A Model stub that always accept the session being added."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private class ModelStubAcceptingSessionAdded extends ModelStub {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        final ArrayList\u003cSession\u003e sessionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return sessionList.stream().anyMatch(session::isSameSession);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void addSession(Session session) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            sessionList.add(session);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public ReadOnlyStudentList getStudentList() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new StudentList();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 37,
      "CodingCookieRookie": 41,
      "MarcusTw": 13,
      "YuunoKun": 239,
      "erisjacey": 57
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/sessionlist/ClearSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ClearSessionCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_emptySessionList_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertCommandSuccess(new ClearSessionsCommand(), model, ClearSessionsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_nonEmptySessionList_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedModel.resetSessionList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertCommandSuccess(new ClearSessionsCommand(), model, ClearSessionsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 4,
      "YuunoKun": 20,
      "erisjacey": 5
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/sessionlist/DeleteSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.logic.commands.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.showSessionAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.exceptions.SessionNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.testutil.TypicalSessions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class DeleteSessionCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        showSessionAtIndex(model, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session sessionToDelete \u003d model.getFilteredSessionList().get(INDEX_FIRST_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSessionCommand.MESSAGE_DELETE_SESSION_SUCCESS, sessionToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(TypicalSessions.getTypicalSessionList("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList().getStudentList()), model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        expectedModel.deleteSession(sessionToDelete, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        showNoSession(expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(deleteSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private void showNoSession (Model model) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        model.updateFilteredSessionList(s -\u003e false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(model.getFilteredSessionList().isEmpty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void delete_sessionNotFound_throwsSessionNotFoundException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList emptySessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionBuilder sessionBuilder \u003d new SessionBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(SessionNotFoundException.class, () -\u003e emptySessionList.deleteSession(sessionBuilder.build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteSessionCommand deleteFirstSessionCommand \u003d new DeleteSessionCommand(INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteSessionCommand deleteSecondSessionCommand \u003d new DeleteSessionCommand(INDEX_SECOND_SESSION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(deleteFirstSessionCommand.equals(deleteFirstSessionCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same sessionName -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteSessionCommand deleteTutCommandCopy \u003d new DeleteSessionCommand(deleteFirstSessionCommand.getIndex());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(deleteFirstSessionCommand.equals(deleteTutCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(deleteFirstSessionCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(deleteFirstSessionCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different sessionName -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(deleteFirstSessionCommand.equals(deleteSecondSessionCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedString \u003d \"Delete 1\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedString, deleteSessionCommand.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 59,
      "YuunoKun": 28,
      "erisjacey": 3
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/sessionlist/EditSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.logic.commands.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.DESC_CON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.DESC_REC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.showSessionAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONDATE_WEEK_TWO_STRING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_TWO_STRING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.EditSessionDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class EditSessionCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session editedSession \u003d new SessionBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder(editedSession).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(INDEX_FIRST_SESSION, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(EditSessionCommand.MESSAGE_EDIT_SESSION_SUCCESS, editedSession);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        expectedModel.setSession(model.getFilteredSessionList().get(0), editedSession);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandSuccess(editSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_editOnlySessionName_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Index indexLastSession \u003d Index.fromOneBased(model.getFilteredSessionList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session lastSession \u003d model.getFilteredSessionList().get(indexLastSession.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SessionBuilder sessionInList \u003d new SessionBuilder(lastSession);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session editedSession \u003d sessionInList.withSessionName(SESSIONNAME_WEEK_TWO_STRING).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionName(SESSIONNAME_WEEK_TWO_STRING).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(indexLastSession, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(EditSessionCommand.MESSAGE_EDIT_SESSION_SUCCESS, editedSession);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        expectedModel.setSession(lastSession, editedSession);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandSuccess(editSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_editOnlySessionDate_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Index indexLastSession \u003d Index.fromOneBased(model.getFilteredSessionList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session lastSession \u003d model.getFilteredSessionList().get(indexLastSession.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SessionBuilder sessionInList \u003d new SessionBuilder(lastSession);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session editedSession \u003d sessionInList.withSessionDate(SESSIONDATE_WEEK_TWO_STRING).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionDate(SESSIONDATE_WEEK_TWO_STRING).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(indexLastSession, descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(EditSessionCommand.MESSAGE_EDIT_SESSION_SUCCESS, editedSession);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        expectedModel.setSession(lastSession, editedSession);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandSuccess(editSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(INDEX_FIRST_SESSION,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new EditSessionCommand.EditSessionDescriptor());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session editedSession \u003d model.getFilteredSessionList().get(INDEX_FIRST_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(EditSessionCommand.MESSAGE_EDIT_SESSION_SUCCESS, editedSession);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // TODO assertCommandSuccess(editSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_duplicateSessionAfterEdit_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Session firstSession \u003d model.getFilteredSessionList().get(INDEX_FIRST_SESSION.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder(firstSession).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(INDEX_SECOND_SESSION, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandFailure(editSessionCommand, model, EditSessionCommand.MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_sessionNameDoesNotExist_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        showSessionAtIndex(model, INDEX_FIRST_SESSION);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ATAS"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSessionList().returnSize());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand editSessionCommand \u003d new EditSessionCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new EditSessionDescriptorBuilder().withSessionName(SESSIONNAME_WEEK_TWO_STRING).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandFailure(editSessionCommand, model, MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        final EditSessionCommand standardCommand \u003d new EditSessionCommand(INDEX_FIRST_SESSION, DESC_REC);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new EditSessionCommand.EditSessionDescriptor(DESC_REC);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand commandWithSameValues \u003d new EditSessionCommand(INDEX_FIRST_SESSION, copyDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearStudentListCommand()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(standardCommand.equals(new EditSessionCommand(INDEX_SECOND_SESSION, DESC_REC)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same descriptor object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(copyDescriptor.equals(copyDescriptor));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(copyDescriptor.equals(standardCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(standardCommand.equals(new EditSessionCommand(INDEX_FIRST_SESSION, DESC_CON)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 62,
      "MarcusTw": 3,
      "YuunoKun": 85,
      "erisjacey": 16
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/sessionlist/EnterSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package atas.logic.commands.sessionlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class EnterSessionCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Index indexOne \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private EnterSessionCommand enterSessionCommand \u003d new EnterSessionCommand(indexOne);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        EnterSessionCommand enterSessionCommand \u003d new EnterSessionCommand(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        EnterSessionCommand enterSessionCommandCopy \u003d new EnterSessionCommand(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        EnterSessionCommand enterSessionCommandNextCopy \u003d new EnterSessionCommand(Index.fromZeroBased(2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertTrue(enterSessionCommand.equals(enterSessionCommandCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertFalse(enterSessionCommand.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertFalse(enterSessionCommand.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // different session index -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertFalse(enterSessionCommand.equals(enterSessionCommandNextCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void execute_validSessionIndex_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String expectedMessage \u003d String.format(EnterSessionCommand.MESSAGE_SUCCESS, indexOne.getOneBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ModelManager expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            CommandResult commandResult \u003d enterSessionCommand.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            assertTrue(commandResult.isEnterSession());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_invalidSessionIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Index index \u003d Index.fromOneBased(6);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        EnterSessionCommand enterSessionSixCommand \u003d new EnterSessionCommand(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_SESSION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e enterSessionSixCommand.execute(model));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /*    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void execute_alreadyInSession_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Index index \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EnterSessionCommand enterSessionTwoCommand \u003d new EnterSessionCommand(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.addSession(SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.addSession(SESSION_WEEK_TWO);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.enterSession(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALREADY_IN_SESSION, 2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e enterSessionTwoCommand.execute(model));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Index index1 \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Index index2 \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EnterSessionCommand enterSessionCommand1 \u003d new EnterSessionCommand(index1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EnterSessionCommand enterSessionCommand2 \u003d new EnterSessionCommand(index2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(enterSessionCommand1.equals(enterSessionCommand1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same sessionName -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        EnterSessionCommand enterSessionCommandNext \u003d new EnterSessionCommand(index1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertTrue(enterSessionCommand1.equals(enterSessionCommandNext));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(enterSessionCommand1.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(enterSessionCommand1.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different sessionName -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(enterSessionCommand1.equals(enterSessionCommand2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 8,
      "CodingCookieRookie": 50,
      "YuunoKun": 49
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/sessionlist/session/ParticipateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONDATE_WEEK_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSION_WEEK_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ParticipateCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INDEXRANGE_ONE_NUMBER \u003d \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INDEXRANGE_POSITIVE_RANGE \u003d \"1-3\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INDEXRANGE_SAME_NUMBER \u003d \"2-2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        model.addSession(SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_participateOneNumber_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // actual model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(INDEXRANGE_ONE_NUMBER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipateCommand participateCommand \u003d new ParticipateCommand(SESSIONNAME_WEEK_ONE, indexRange);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d new Session(SESSIONNAME_WEEK_ONE, SESSIONDATE_WEEK_ONE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedModel.addSession(session);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        session.updateParticipation(indexRange);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandSuccess(participateCommand, model, ParticipateCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (Session s: expectedModel.getSessionList().getSessions()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (s.isSameSession(SESSION_WEEK_ONE)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                assertTrue(s.getAttributeList().get(0).getParticipationStatus());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_participateIndexRange_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // actual model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(INDEXRANGE_POSITIVE_RANGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipateCommand participateCommand \u003d new ParticipateCommand(SESSIONNAME_WEEK_ONE, indexRange);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d new Session(SESSIONNAME_WEEK_ONE, SESSIONDATE_WEEK_ONE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedModel.addSession(session);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        session.updateParticipation(indexRange);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandSuccess(participateCommand, model, ParticipateCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (Session s: expectedModel.getSessionList().getSessions()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (s.isSameSession(SESSION_WEEK_ONE)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                assertTrue(s.getAttributeList().get(0).getParticipationStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                assertTrue(s.getAttributeList().get(1).getParticipationStatus());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                assertTrue(s.getAttributeList().get(2).getParticipationStatus());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_participateSameNumberIndexRange_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // actual model"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(INDEXRANGE_SAME_NUMBER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        ParticipateCommand participateCommand \u003d new ParticipateCommand(indexRange);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d new Session(SESSIONNAME_WEEK_ONE, SESSIONDATE_WEEK_ONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedModel.addSession(session);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        session.updateParticipation(indexRange);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandSuccess(participateCommand, model, ParticipateCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (Session s: expectedModel.getSessionList().getSessions()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (s.isSameSession(SESSION_WEEK_ONE)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                assertTrue(s.getAttributeList().get(1).getParticipationStatus());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_notInSessionTab_throwsCommandException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // actual model"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(INDEXRANGE_ONE_NUMBER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipateCommand participateCommand \u003d new ParticipateCommand(SESSIONNAME_WEEK_ONE, indexRange);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d new Session(SESSIONNAME_WEEK_ONE, SESSIONDATE_WEEK_ONE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedModel.addSession(session);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        session.updateParticipation(indexRange);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Messages.MESSAGE_NOT_IN_SESSION_TAB, () -\u003e participateCommand.execute(expectedModel));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        final IndexRange indexRange \u003d new IndexRange(INDEXRANGE_ONE_NUMBER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        final ParticipateCommand participateCommand \u003d new ParticipateCommand(SESSIONNAME_WEEK_ONE, indexRange);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange index \u003d new IndexRange(INDEXRANGE_ONE_NUMBER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipateCommand commandWithSameValues \u003d new ParticipateCommand(SESSIONNAME_WEEK_ONE, index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(participateCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(participateCommand.equals(participateCommand));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(participateCommand.equals(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(participateCommand.equals(new ClearStudentListCommand()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different session name -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(participateCommand.equals(new ParticipateCommand(SESSIONNAME_WEEK_TWO, indexRange)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 13,
      "MarcusTw": 7,
      "YuunoKun": 122,
      "erisjacey": 10
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/sessionlist/session/PresenceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.sessionlist.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONDATE_WEEK_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSION_WEEK_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class PresenceCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INDEXRANGE_ONE_NUMBER \u003d \"1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INDEXRANGE_POSITIVE_RANGE \u003d \"1-3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INDEXRANGE_SAME_NUMBER \u003d \"2-2\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        model.addSession(SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_presenceOneNumber_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // actual model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(INDEXRANGE_ONE_NUMBER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceCommand presenceCommand \u003d new PresenceCommand(SESSIONNAME_WEEK_ONE, indexRange);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d new Session(SESSIONNAME_WEEK_ONE, SESSIONDATE_WEEK_ONE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedModel.addSession(session);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        session.updatePresence(indexRange);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandSuccess(presenceCommand, model, PresenceCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (Session s: expectedModel.getSessionList().getSessions()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (s.isSameSession(SESSION_WEEK_ONE)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                assertTrue(s.getAttributeList().get(0).getPresenceStatus());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_presenceIndexRange_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // actual model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(INDEXRANGE_POSITIVE_RANGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceCommand presenceCommand \u003d new PresenceCommand(SESSIONNAME_WEEK_ONE, indexRange);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d new Session(SESSIONNAME_WEEK_ONE, SESSIONDATE_WEEK_ONE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedModel.addSession(session);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        session.updatePresence(indexRange);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandSuccess(presenceCommand, model, PresenceCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (Session s: expectedModel.getSessionList().getSessions()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (s.isSameSession(SESSION_WEEK_ONE)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                assertTrue(s.getAttributeList().get(0).getPresenceStatus());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                assertTrue(s.getAttributeList().get(1).getPresenceStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                assertTrue(s.getAttributeList().get(2).getPresenceStatus());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_presenceSameNumberIndexRange_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // actual model"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(INDEXRANGE_SAME_NUMBER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceCommand presenceCommand \u003d new PresenceCommand(SESSIONNAME_WEEK_ONE, indexRange);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d new Session(SESSIONNAME_WEEK_ONE, SESSIONDATE_WEEK_ONE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedModel.addSession(session);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        session.updatePresence(indexRange);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertCommandSuccess(presenceCommand, model, PresenceCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (Session s: expectedModel.getSessionList().getSessions()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (s.isSameSession(SESSION_WEEK_ONE)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                assertTrue(s.getAttributeList().get(1).getPresenceStatus());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute_notInSessionTab_throwsCommandException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // actual model"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(INDEXRANGE_ONE_NUMBER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceCommand presenceCommand \u003d new PresenceCommand(SESSIONNAME_WEEK_ONE, indexRange);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // expected model"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d new Session(SESSIONNAME_WEEK_ONE, SESSIONDATE_WEEK_ONE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedModel.addSession(session);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        session.updatePresence(indexRange);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Messages.MESSAGE_NOT_IN_SESSION_TAB, () -\u003e presenceCommand.execute(expectedModel));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        final IndexRange indexRange \u003d new IndexRange(INDEXRANGE_ONE_NUMBER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        final PresenceCommand presenceCommand \u003d new PresenceCommand(SESSIONNAME_WEEK_ONE, indexRange);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange index \u003d new IndexRange(INDEXRANGE_ONE_NUMBER);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceCommand commandWithSameValues \u003d new PresenceCommand(SESSIONNAME_WEEK_ONE, index);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(presenceCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(presenceCommand.equals(presenceCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(presenceCommand.equals(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(presenceCommand.equals(new ClearStudentListCommand()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different session name -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(presenceCommand.equals(new PresenceCommand(SESSIONNAME_WEEK_TWO, indexRange)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 11,
      "MarcusTw": 7,
      "YuunoKun": 123,
      "erisjacey": 10
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/studentlist/AddStudentCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.EmailTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.MatriculationTest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddStudentCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class AddStudentCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student validStudent \u003d new StudentBuilder(MatriculationTest.VALID_MATRICULATION.value,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                EmailTest.VALID_EMAIL.value).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(new AddStudentCommand(validStudent), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student studentInList \u003d model.getStudentList().getStudentList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(new AddStudentCommand(studentInList), model, AddStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 4,
      "MarcusTw": 13,
      "YuunoKun": 1,
      "erisjacey": 8,
      "-": 25
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/studentlist/AddStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class AddStudentCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        CommandResult commandResult \u003d new AddStudentCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        AddStudentCommand addStudentCommand \u003d new AddStudentCommand(validStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                AddStudentCommand.MESSAGE_DUPLICATE_STUDENT, () -\u003e addStudentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddStudentCommand addAliceCommand \u003d new AddStudentCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddStudentCommand addBobCommand \u003d new AddStudentCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddStudentCommand addAliceCommandCopy \u003d new AddStudentCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // different Student -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public Path getStudentListFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void setStudentListFilePath(Path studentListFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void clearStudentList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public ReadOnlyStudentList getStudentList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void deleteStudent(Student target, Index id) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public Path getSessionListFilePath() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void setSessionListFilePath(Path sessionListFilePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void resetSessionList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public SessionList getSessionList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void deleteSession(Session target, Index id) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void addSession(Session session) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void enterSession(Index sessionIndex) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public ObservableList\u003cAttributes\u003e getCurrentAttributesList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void updateCurrentAttributesList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public Session getCurrentSession() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void updateParticipationBySessionName(SessionName sessionName, IndexRange indexRange) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void updatePresenceBySessionName(SessionName sessionName, IndexRange indexRange) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Index getSessionId() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void setCurrentSessionFalse() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public void setCurrentSessionTrue() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public boolean returnCurrentSessionEnabledStatus() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Path getMemoFilePath() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void setMemoFilePath(Path memoFilePath) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public Memo getMemo() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public String getMemoContent() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void saveMemoContent(String content) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        public void addNoteToMemo(String note) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public Index generateRandomStudentIndex() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void refreshStatistics() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void refreshStudentStatistics() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void commit() { }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public boolean canRedo() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public void redo() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        public void refreshSessionStatistics() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public String getLeftSessionDetails() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        public String getRightSessionDetails() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * A Model stub that contains a single Student."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * A Model stub that always accept the Student being added."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public ReadOnlyStudentList getStudentList() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new StudentList();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 43,
      "CodingCookieRookie": 43,
      "MarcusTw": 46,
      "YuunoKun": 68,
      "erisjacey": 53,
      "-": 134
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/studentlist/ClearStudentListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ClearStudentListCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_emptyStudentList_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(new ClearStudentListCommand(), model,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                ClearStudentListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_nonEmptyStudentList_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        expectedModel.clearStudentList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandSuccess(new ClearStudentListCommand(), model,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                ClearStudentListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 7,
      "YuunoKun": 2,
      "erisjacey": 6,
      "-": 17
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/studentlist/DeleteStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * {@code DeleteStudentCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class DeleteStudentCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(deleteStudentCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                model.getStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudentList().getStudentList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(deleteStudentCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteStudentCommand deleteFirstStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteStudentCommand deleteSecondStudentCommand \u003d new DeleteStudentCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(deleteFirstStudentCommand.equals(deleteFirstStudentCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        DeleteStudentCommand deleteFirstStudentCommandCopy \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(deleteFirstStudentCommand.equals(deleteFirstStudentCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(deleteFirstStudentCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(deleteFirstStudentCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(deleteFirstStudentCommand.equals(deleteSecondStudentCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 18,
      "MarcusTw": 24,
      "YuunoKun": 1,
      "erisjacey": 10,
      "-": 61
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/studentlist/EditStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class EditStudentCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                .withName(VALID_NAME_BOB).withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.setStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new EditStudentCommand.EditStudentDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_SECOND_STUDENT, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // edit student in filtered list into a duplicate in student list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student studentInList \u003d model.getStudentList().getStudentList().get(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * but smaller than size of student list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of student list list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStudentList().getStudentList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        final EditStudentCommand standardCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT, DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new EditStudentCommand.EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand commandWithSameValues \u003d new EditStudentCommand(INDEX_FIRST_STUDENT, copyDescriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearStudentListCommand()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_SECOND_STUDENT, DESC_AMY)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_FIRST_STUDENT, DESC_BOB)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 12,
      "MarcusTw": 71,
      "YuunoKun": 1,
      "erisjacey": 16,
      "-": 83
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/studentlist/EditStudentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentDescriptor descriptorWithSameValues \u003d new EditStudentCommand.EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withMatriculation(VALID_MATRICULATION_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 9,
      "erisjacey": 7,
      "-": 38
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/studentlist/FindStudentsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindStudentsCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class FindStudentsCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Model expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        FindStudentsCommand findFirstStudentsCommand \u003d new FindStudentsCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        FindStudentsCommand findSecondStudentsCommand \u003d new FindStudentsCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(findFirstStudentsCommand.equals(findFirstStudentsCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        FindStudentsCommand findFirstStudentsCommandCopy \u003d new FindStudentsCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(findFirstStudentsCommand.equals(findFirstStudentsCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(findFirstStudentsCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(findFirstStudentsCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(findFirstStudentsCommand.equals(findSecondStudentsCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.getStudentListedMessage(0), 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        FindStudentsCommand findStudentsCommand \u003d new FindStudentsCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(findStudentsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void execute_multipleKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.getStudentListedMessage(3), 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        FindStudentsCommand findStudentsCommand \u003d new FindStudentsCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(findStudentsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 18,
      "MarcusTw": 10,
      "YuunoKun": 2,
      "erisjacey": 5,
      "-": 48
    }
  },
  {
    "path": "src/test/java/atas/logic/commands/studentlist/ListStudentsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.commands.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListStudentsCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class ListStudentsCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedModel \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(new ListStudentsCommand(), model, ListStudentsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertCommandSuccess(new ListStudentsCommand(), model, ListStudentsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 4,
      "MarcusTw": 3,
      "YuunoKun": 2,
      "erisjacey": 4,
      "-": 24
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/AddNoteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.memo.AddNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class AddNoteCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private AddNoteCommandParser parser \u003d new AddNoteCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_validArgs_returnsAddNoteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddNoteCommand expectedAddNoteCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new AddNoteCommand(\"note\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertParseSuccess(parser, \" note\", expectedAddNoteCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_validArgsOnlyWhiteSpace_returnsAddNoteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddNoteCommand expectedAddNoteCommand \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new AddNoteCommand(\"  \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertParseSuccess(parser, \"   \", expectedAddNoteCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 37
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/AddSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_SESSIONDATE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_SESSIONNAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONDATE_CON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONDATE_CON_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONDATE_REC_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONNAME_CON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONNAME_CON_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONNAME_REC_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.AddSessionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class AddSessionCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final AddSessionCommandParser parser \u003d new AddSessionCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session expectedSession \u003d new SessionBuilder().withSessionName(VALID_SESSIONNAME_CON)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionDate(VALID_SESSIONDATE_CON).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_SESSIONNAME_CON_DESC"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + VALID_SESSIONDATE_CON_DESC, new AddSessionCommand(expectedSession));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // multiple session names - last name accepted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, VALID_SESSIONNAME_REC_DESC + VALID_SESSIONDATE_CON_DESC"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + VALID_SESSIONNAME_CON_DESC, new AddSessionCommand(expectedSession));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // multiple session dates - last date accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, VALID_SESSIONNAME_CON_DESC + VALID_SESSIONDATE_REC_DESC"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + VALID_SESSIONDATE_CON_DESC, new AddSessionCommand(expectedSession));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, VALID_SESSIONNAME_CON_DESC,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, VALID_SESSIONDATE_CON_DESC,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid session name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, INVALID_SESSIONNAME_DESC + VALID_SESSIONDATE_REC_DESC,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                SessionName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid session date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, VALID_SESSIONNAME_REC_DESC + INVALID_SESSIONDATE_DESC,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                SessionDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_SESSIONNAME_REC_DESC + VALID_SESSIONDATE_REC_DESC,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 50,
      "erisjacey": 19
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/AddStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_MATRICULATION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.MATRICULATION_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.MATRICULATION_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.logic.commands.studentlist.AddStudentCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.AddStudentCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class AddStudentCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private AddStudentCommandParser parser \u003d new AddStudentCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICULATION_DESC_AMY + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddStudentCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + MATRICULATION_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_MATRICULATION_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_MATRICULATION_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_MATRICULATION_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + MATRICULATION_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 21,
      "YuunoKun": 19,
      "erisjacey": 27,
      "-": 62
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/AtasParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.atas.HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalTabNames.STUDENTS_TAB_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.SwitchCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.ConfirmationCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.ConfirmationRejectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.memo.AddNoteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.sessionlist.AddSessionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.sessionlist.ClearSessionsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.sessionlist.DeleteSessionCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.sessionlist.EditSessionCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.sessionlist.EnterSessionCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.sessionlist.session.ParticipateCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.logic.commands.sessionlist.session.PresenceCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.AddStudentCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.ClearStudentListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.FindStudentsCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.ListStudentsCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.EditSessionDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.SessionUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.TypicalSessions;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class AtasParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final AtasParser parser \u003d new AtasParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddStudentCommand command \u003d (AddStudentCommand) parser.parseCommand(StudentUtil.getAddStudentCommand(student));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(new AddStudentCommand(student), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(parser.parseCommand(ClearStudentListCommand.COMMAND_WORD) instanceof ConfirmationCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(parser.parseCommand(ConfirmationCommand.REJECT_COMMAND_FULL) instanceof ConfirmationRejectCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(parser.parseCommand(ClearStudentListCommand.COMMAND_WORD + \" 3\") instanceof ConfirmationCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand command \u003d (ConfirmationCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                DeleteStudentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(new ConfirmationCommand(new DeleteStudentCommand(INDEX_FIRST_STUDENT)), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand command \u003d (ConfirmationCommand) parser.parseCommand(EditStudentCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(new ConfirmationCommand(new EditStudentCommand(INDEX_FIRST_STUDENT, descriptor)), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        FindStudentsCommand command \u003d (FindStudentsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                FindStudentsCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(new FindStudentsCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(parser.parseCommand(ListStudentsCommand.COMMAND_WORD) instanceof ListStudentsCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(parser.parseCommand(ListStudentsCommand.COMMAND_WORD + \" 3\") instanceof ListStudentsCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parseCommand_switch() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand command \u003d (SwitchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                SwitchCommand.COMMAND_WORD + \" \" + STUDENTS_TAB_NAME);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(new SwitchCommand(STUDENTS_TAB_NAME), command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseCommand_addSession() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d TypicalSessions.TUT1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        AddSessionCommand command \u003d (AddSessionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                SessionUtil.getAddSessionCommand(session));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(new AddSessionCommand(session), command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseCommand_deleteSession() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ConfirmationCommand command \u003d (ConfirmationCommand) parser.parseCommand("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                DeleteSessionCommand.COMMAND_WORD + \" \" + \"1\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(new ConfirmationCommand(new DeleteSessionCommand(INDEX_FIRST_SESSION)), command);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseCommand_editSession() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d TypicalSessions.SESSION_WEEK_ONE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder(session).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationEditSessionCommand \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                (ConfirmationCommand) parser.parseCommand(EditSessionCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                + \"2\" + \" \" + SessionUtil.getSessionDetails(session));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditSessionCommand command \u003d (EditSessionCommand) confirmationEditSessionCommand.getDangerousCommand();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(new EditSessionCommand(INDEX_SECOND_SESSION, descriptor), command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseCommand_clearSession() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationClearCommand \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                (ConfirmationCommand) parser.parseCommand(ClearSessionsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ClearSessionsCommand command \u003d (ClearSessionsCommand) confirmationClearCommand.getDangerousCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(new ClearSessionsCommand(), command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseCommand_enterSession() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EnterSessionCommand command \u003d (EnterSessionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                EnterSessionCommand.COMMAND_WORD + \" \" + \"1\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(new EnterSessionCommand(Index.fromOneBased(1)), command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseCommand_participate() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipateCommand command \u003d (ParticipateCommand) parser.parseCommand("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ParticipateCommand.COMMAND_WORD + \" 1-3\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(new ParticipateCommand(new IndexRange(\"1-3\")), command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseCommand_presence() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceCommand command \u003d (PresenceCommand) parser.parseCommand("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                PresenceCommand.COMMAND_WORD + \" 1-3\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(new PresenceCommand(new IndexRange(\"1-3\")), command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parseCommand_addNote() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddNoteCommand command \u003d (AddNoteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                AddNoteCommand.COMMAND_WORD + \" note\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(new AddNoteCommand(\"note\"), command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parseCommand_addNote_onlyWhiteSpace() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        AddNoteCommand command \u003d (AddNoteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                AddNoteCommand.COMMAND_WORD + \" \\n \\t \\r \");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(new AddNoteCommand(\"\\n \\t \\r \"), command);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 39,
      "MarcusTw": 31,
      "YuunoKun": 55,
      "erisjacey": 15,
      "-": 59
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/ConfirmationParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_CONFIRMATION_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.ConfirmationAcceptCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.ConfirmationCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.ConfirmationRejectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.confirmation.DangerousCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ConfirmationParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final DangerousCommand dangerousCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parse_validAcceptCommandWordFull_returnsConfirmationAcceptCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(dangerousCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationParser parser \u003d new ConfirmationParser(confirmationCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationAcceptCommand(new DeleteStudentCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseSuccess(parser, ConfirmationCommand.ACCEPT_COMMAND_FULL, expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parse_validAcceptCommandWordShort_returnsConfirmationAcceptCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(dangerousCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationParser parser \u003d new ConfirmationParser(confirmationCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationAcceptCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationAcceptCommand(new DeleteStudentCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseSuccess(parser, ConfirmationCommand.ACCEPT_COMMAND_SHORT, expectedCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parse_validRejectCommandWordFull_returnsConfirmationRejectCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(dangerousCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationParser parser \u003d new ConfirmationParser(confirmationCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationRejectCommand(new DeleteStudentCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseSuccess(parser, ConfirmationCommand.REJECT_COMMAND_FULL, expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parse_validRejectCommandWordShort_returnsConfirmationRejectCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(dangerousCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationParser parser \u003d new ConfirmationParser(confirmationCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationRejectCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new ConfirmationRejectCommand(new DeleteStudentCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseSuccess(parser, ConfirmationCommand.REJECT_COMMAND_SHORT, expectedCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationCommand confirmationCommand \u003d new ConfirmationCommand(dangerousCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ConfirmationParser parser \u003d new ConfirmationParser(confirmationCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_CONFIRMATION_INPUT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 54,
      "erisjacey": 8
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/DeleteSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.DeleteSessionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * outside of the DeleteSessionCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * same path through the DeleteSessionCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DeleteSessionCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private DeleteSessionCommandParser parser \u003d new DeleteSessionCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", new DeleteSessionCommand(INDEX_FIRST_SESSION));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_invalidSessionName_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"~\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 16,
      "YuunoKun": 19,
      "erisjacey": 2
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/DeleteStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.DeleteStudentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * outside of the DeleteStudentCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * same path through the DeleteStudentCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class DeleteStudentCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private DeleteStudentCommandParser parser \u003d new DeleteStudentCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", new DeleteStudentCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 6,
      "MarcusTw": 2,
      "erisjacey": 3,
      "-": 20
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/EditSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_SESSIONDATE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_SESSIONNAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONDATE_CON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONDATE_CON_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONDATE_REC_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONNAME_CON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONNAME_CON_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONNAME_REC_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.EditSessionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.EditSessionDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class EditSessionCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSessionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private EditSessionCommandParser parser \u003d new EditSessionCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_SESSIONNAME_CON_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\", EditSessionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-5\" + VALID_SESSIONDATE_CON_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0\" + VALID_SESSIONDATE_CON_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_SESSIONNAME_DESC,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                SessionName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_SESSIONDATE_DESC,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                SessionDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid sessionName followed by valid sessionDate"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_SESSIONNAME_DESC"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                + VALID_SESSIONDATE_REC_DESC, SessionName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // valid sessionDate followed by invalid sessionName."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + VALID_SESSIONNAME_REC_DESC"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                        + INVALID_SESSIONDATE_DESC, SessionDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_SESSIONNAME_DESC"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                        + INVALID_SESSIONDATE_DESC, SessionName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_SESSION;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_SESSIONNAME_CON_DESC + VALID_SESSIONDATE_CON_DESC;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionName(VALID_SESSIONNAME_CON)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionDate(VALID_SESSIONDATE_CON)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_SESSIONNAME_CON_DESC;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionName(VALID_SESSIONNAME_CON)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // sessionName"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String userInput1 \u003d targetIndex.getOneBased() + VALID_SESSIONNAME_CON_DESC;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor1 \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionName(VALID_SESSIONNAME_CON)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand expectedCommand1 \u003d new EditSessionCommand(targetIndex, descriptor1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput1, expectedCommand1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // sessionDate"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String userInput2 \u003d targetIndex.getOneBased() + VALID_SESSIONDATE_CON_DESC;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor2 \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionDate(VALID_SESSIONDATE_CON)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand expectedCommand2 \u003d new EditSessionCommand(targetIndex, descriptor2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput2, expectedCommand2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + VALID_SESSIONNAME_CON_DESC + VALID_SESSIONDATE_CON_DESC"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + VALID_SESSIONNAME_CON_DESC + VALID_SESSIONDATE_CON_DESC"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + VALID_SESSIONNAME_CON_DESC + VALID_SESSIONDATE_CON_DESC;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionName(VALID_SESSIONNAME_CON)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionDate(VALID_SESSIONDATE_CON)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SESSION;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String userInput1 \u003d targetIndex.getOneBased() + \"\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor1 \u003d new EditSessionDescriptorBuilder().build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand expectedCommand1 \u003d new EditSessionCommand(targetIndex, descriptor1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, userInput1, EditSessionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_SESSIONNAME_CON_DESC + VALID_SESSIONDATE_CON_DESC;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor descriptor \u003d new EditSessionDescriptorBuilder()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionName(VALID_SESSIONNAME_CON)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withSessionDate(VALID_SESSIONDATE_CON)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        EditSessionCommand expectedCommand \u003d new EditSessionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 44,
      "YuunoKun": 97,
      "erisjacey": 29
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/EditStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_MATRICULATION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.MATRICULATION_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.MATRICULATION_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_MATRICULATION_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class EditStudentCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private EditStudentCommandParser parser \u003d new EditStudentCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\", EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid matriculation"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_MATRICULATION_DESC,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_MATRICULATION_DESC + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // valid phone followed by invalid matriculation. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + MATRICULATION_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                        + INVALID_MATRICULATION_DESC, Matriculation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                        + VALID_MATRICULATION_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MATRICULATION_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withMatriculation(VALID_MATRICULATION_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MATRICULATION_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // matriculation"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MATRICULATION_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withMatriculation(VALID_MATRICULATION_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MATRICULATION_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + TAG_DESC_FRIEND + MATRICULATION_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + MATRICULATION_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_MATRICULATION_DESC + MATRICULATION_DESC_BOB;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withMatriculation(VALID_MATRICULATION_BOB).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_MATRICULATION_DESC + MATRICULATION_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 41,
      "YuunoKun": 17,
      "erisjacey": 59,
      "-": 88
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/EnterSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_SESSIONNAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONNAME_CON_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.logic.commands.sessionlist.EnterSessionCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.logic.commands.sessionlist.EnterSessionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class EnterSessionCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterSessionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private EnterSessionCommandParser parser \u003d new EnterSessionCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // no sessionName of session specified"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_SESSIONNAME_CON_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // no sessionName of session and no field specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // empty preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // whitespace peramble"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"tut\" + INVALID_SESSIONNAME_DESC,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_validArgs_returnsEnterCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertParseSuccess(parser, \" \" + \"1\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            new EnterSessionCommand(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_invalidSessionIndex_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" \" + \"~\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_invalidSessionIndexZero_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" \" + \"-1\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 3,
      "CodingCookieRookie": 43,
      "YuunoKun": 16
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/FindStudentsCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.FindStudentsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class FindStudentsCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private FindStudentsCommandParser parser \u003d new FindStudentsCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindStudentsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_validArgs_returnsFindStudentsCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        FindStudentsCommand expectedFindStudentCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                new FindStudentsCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindStudentCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindStudentCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 7,
      "MarcusTw": 3,
      "erisjacey": 5,
      "-": 20
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INVALID_MATRICULATION \u003d \"651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_MATRICULATION \u003d \"A1234567E\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@u.nus.edu\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INVALID_SESSIONNAME \u003d \"tut~1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INVALID_SESSIONDATE \u003d \"1/1/20\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_SESSIONNAME \u003d \"lab1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_SESSIONDATE \u003d \"1/1/2020\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_INDEXRANGE \u003d \"1-3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INVALID_INDEXRANGE \u003d \"1x\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Assert.assertThrows(ParseException.class, ParserUtil.MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseMatriculation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMatriculation((String) null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseMatriculation_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMatriculation(INVALID_MATRICULATION));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseMatriculation_validValueWithoutWhitespace_returnsMatriculation() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Matriculation expectedMatriculation \u003d new Matriculation(VALID_MATRICULATION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedMatriculation, ParserUtil.parseMatriculation(VALID_MATRICULATION));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseMatriculation_validValueWithWhitespace_returnsTrimmedMatriculation() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String matriculationWithWhitespace \u003d WHITESPACE + VALID_MATRICULATION + WHITESPACE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Matriculation expectedMatriculation \u003d new Matriculation(VALID_MATRICULATION);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedMatriculation, ParserUtil.parseMatriculation(matriculationWithWhitespace));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseSessionName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSessionName(null));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseSessionName_invalidName_throwsParseException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSessionName(INVALID_SESSIONNAME));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseSessionName_validSessionNameWithoutWhitespace_returnsSessionName() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionName expectedSessionName \u003d new SessionName(VALID_SESSIONNAME);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedSessionName, ParserUtil.parseSessionName(VALID_SESSIONNAME));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseSessionName_validValueWithWhitespace_returnsTrimmedSessionName() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String matriculationWithWhitespace \u003d WHITESPACE + VALID_SESSIONNAME + WHITESPACE;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionName expectedSessionName \u003d new SessionName(VALID_SESSIONNAME);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedSessionName, ParserUtil.parseSessionName(matriculationWithWhitespace));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseSessionDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSessionDate(null));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseSessionDate_invalidDate_throwsParseException() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSessionDate(INVALID_SESSIONDATE));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseSessionDate_validSessionDateWithoutWhitespace_returnsSessionDate() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionDate expectedSessionDate \u003d new SessionDate(VALID_SESSIONDATE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedSessionDate, ParserUtil.parseSessionDate(VALID_SESSIONDATE));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseSessionDate_validValueWithWhitespace_returnsTrimmedSessionDate() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String matriculationWithWhitespace \u003d WHITESPACE + VALID_SESSIONDATE + WHITESPACE;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionDate expectedSessionDate \u003d new SessionDate(VALID_SESSIONDATE);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedSessionDate, ParserUtil.parseSessionDate(matriculationWithWhitespace));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseIndexRange_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIndexRange(null));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseIndexRange_invalidRange_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e ParserUtil.parseIndexRange(INVALID_INDEXRANGE));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseIndexRange_validIndexRangeWithoutWhitespace_returnsIndexRange() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange expectedIndexRange \u003d new IndexRange(VALID_INDEXRANGE);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedIndexRange, ParserUtil.parseIndexRange(VALID_INDEXRANGE));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parseIndexRange_validValueWithWhitespace_returnsTrimmedIndexRange() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String matriculationWithWhitespace \u003d WHITESPACE + VALID_INDEXRANGE + WHITESPACE;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange expectedIndexRange \u003d new IndexRange(VALID_INDEXRANGE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedIndexRange, ParserUtil.parseIndexRange(matriculationWithWhitespace));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 6,
      "YuunoKun": 93,
      "erisjacey": 10,
      "-": 143
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/ParticipateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.sessionlist.session.ParticipateCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.session.ParticipateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ParticipateCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final ParticipateCommandParser parser \u003d new ParticipateCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_validArgs_successtest1() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(\"1\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        ParticipateCommand command \u003d new ParticipateCommand(indexRange);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_validArgs_successtest2() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(\"1-3\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        ParticipateCommand command \u003d new ParticipateCommand(indexRange);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1-3\", command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_validArgs_successtest3() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(\"1-1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        ParticipateCommand command \u003d new ParticipateCommand(indexRange);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1-1\", command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"@1\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"_\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-1\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0-5\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"6-0\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 9,
      "CodingCookieRookie": 3,
      "YuunoKun": 27,
      "erisjacey": 12
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/PresenceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONNAME_REC_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.logic.commands.sessionlist.session.PresenceCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.session.PresenceCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class PresenceCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final PresenceCommandParser parser \u003d new PresenceCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void parse_validArgs_successtest1() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(\"1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        PresenceCommand command \u003d new PresenceCommand(indexRange);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void parse_validArgs_successtest2() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(\"1-3\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        PresenceCommand command \u003d new PresenceCommand(indexRange);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1-3\", command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void parse_validArgs_successtest3() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(\"1-1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        PresenceCommand command \u003d new PresenceCommand(indexRange);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1-1\", command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\" + VALID_SESSIONNAME_REC_DESC,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"@1\" + VALID_SESSIONNAME_REC_DESC,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"_\" + VALID_SESSIONNAME_REC_DESC,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-1\" + VALID_SESSIONNAME_REC_DESC,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0-5\" + VALID_SESSIONNAME_REC_DESC,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"6-0\" + VALID_SESSIONNAME_REC_DESC,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 9,
      "erisjacey": 45
    }
  },
  {
    "path": "src/test/java/atas/logic/parser/SwitchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalTabNames.SESSIONS_TAB_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalTabNames.STUDENTS_TAB_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.atas.SwitchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class SwitchCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private SwitchCommandParser parser \u003d new SwitchCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_whiteSpaces_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"  \\n\\t   \\n \\t\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand expectedSwitchToStudentsCommand \u003d new SwitchCommand(STUDENTS_TAB_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, STUDENTS_TAB_NAME, expectedSwitchToStudentsCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        SwitchCommand expectedSwitchToSessionsCommand \u003d new SwitchCommand(SESSIONS_TAB_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, SESSIONS_TAB_NAME, expectedSwitchToSessionsCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" \\n \\t \" + STUDENTS_TAB_NAME + \" \\n \\t \","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                expectedSwitchToStudentsCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" \\n \\t \" + SESSIONS_TAB_NAME + \" \\n \\t \","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                expectedSwitchToSessionsCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 36,
      "erisjacey": 5
    }
  },
  {
    "path": "src/test/java/atas/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.SAMPLE_MEMO_CONTENT_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.SAMPLE_MEMO_CONTENT_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.SAMPLE_MEMO_NOTE_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.VersionedSessionList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.VersionedStudentList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentListBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(new StudentList(), new StudentList(modelManager.getStudentList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(new Memo(), modelManager.getMemo());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        userPrefs.setStudentListFilePath(Paths.get(\"atas/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        userPrefs.setMemoFilePath(Paths.get(\"atas/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        userPrefs.setStudentListFilePath(Paths.get(\"new/atas/file/path\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        userPrefs.setMemoFilePath(Paths.get(\"new/atas/file/path\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudentListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setStudentListFilePath(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudentListFilePath_validPath_setsStudentListFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Path path \u003d Paths.get(\"atas/file/path\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        modelManager.setStudentListFilePath(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(path, modelManager.getStudentListFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void hasStudent_studentNotInStudentList_returnsFalse() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void hasStudent_studentInStudentList_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void getSessionId() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        modelManager \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        modelManager.enterSession(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(0, modelManager.getSessionId().getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        modelManager.enterSession(Index.fromZeroBased(2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(2, modelManager.getSessionId().getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        modelManager.enterSession(Index.fromZeroBased(3));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(3, modelManager.getSessionId().getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void setMemoFilePath_validPath_setsMemoListFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Path path \u003d Paths.get(\"atas/file/path\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        modelManager.setMemoFilePath(path);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(path, modelManager.getMemoFilePath());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testGetMemo() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(new Memo(), modelManager.getMemo());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void initialStateListIsSizeOne() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        modelManager \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(1, ((VersionedStudentList) modelManager.getStudentList()).getStudentStateList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(1, ((VersionedSessionList) modelManager.getSessionList()).getSessionStateList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testInitialAbilityToUndo() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        modelManager \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(modelManager.canUndo());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testInitialAbilityToRedo() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        modelManager \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(modelManager.canRedo());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void stateListIncreasesSizeAfterCommit() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        modelManager \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        modelManager.commit();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(2, ((VersionedStudentList) modelManager.getStudentList()).getStudentStateList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(2, ((VersionedSessionList) modelManager.getSessionList()).getSessionStateList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testGetMemoContent() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        StudentList studentList \u003d new StudentListBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ModelManager modelManagerWithMemoContent \u003d new ModelManager(getTypicalSessionList(studentList.getStudentList()),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                studentList, userPrefs, SAMPLE_MEMO_CONTENT_ONE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(SAMPLE_MEMO_CONTENT_ONE, modelManagerWithMemoContent.getMemoContent());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testSaveMemoContent() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        StudentList studentList \u003d new StudentListBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ModelManager modelManagerWithNewMemoContent \u003d new ModelManager("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                getTypicalSessionList(studentList.getStudentList()), studentList, userPrefs, SAMPLE_MEMO_CONTENT_ONE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        modelManagerWithNewMemoContent.saveMemoContent(SAMPLE_MEMO_CONTENT_TWO);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(SAMPLE_MEMO_CONTENT_TWO, modelManagerWithNewMemoContent.getMemoContent());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testAddNoteToMemo() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        StudentList studentList \u003d new StudentListBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        ModelManager modelManagerWithNewAddedNoteToMemo \u003d new ModelManager("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                getTypicalSessionList(studentList.getStudentList()), studentList, userPrefs, SAMPLE_MEMO_CONTENT_ONE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        modelManagerWithNewAddedNoteToMemo.addNoteToMemo(SAMPLE_MEMO_NOTE_ONE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(SAMPLE_MEMO_CONTENT_ONE.concat(\"\\n\").concat(SAMPLE_MEMO_NOTE_ONE),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                modelManagerWithNewAddedNoteToMemo.getMemoContent());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList studentList \u003d new StudentListBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList differentStudentList \u003d new StudentList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        modelManager \u003d new ModelManager(getTypicalSessionList("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                studentList.getStudentList()), studentList, userPrefs, EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(getTypicalSessionList(studentList.getStudentList()),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                studentList, userPrefs, EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // different studentList -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(getTypicalSessionList(studentList.getStudentList()),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                differentStudentList, userPrefs, EMPTY_MEMO_CONTENT)));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(getTypicalSessionList(studentList.getStudentList()),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                studentList, userPrefs, EMPTY_MEMO_CONTENT)));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        differentUserPrefs.setStudentListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(getTypicalSessionList(studentList.getStudentList()),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                studentList, differentUserPrefs, EMPTY_MEMO_CONTENT)));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different memo -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(getTypicalSessionList(studentList.getStudentList()),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                studentList, userPrefs, SAMPLE_MEMO_CONTENT_ONE)));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 84,
      "CodingCookieRookie": 1,
      "MarcusTw": 30,
      "YuunoKun": 1,
      "erisjacey": 34,
      "-": 95
    }
  },
  {
    "path": "src/test/java/atas/model/StudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.getTypicalStudentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class StudentListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final StudentList studentList \u003d new StudentList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Collections.emptyList(), studentList.getStudentList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e studentList.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void resetData_withValidReadOnlyStudentList_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList newData \u003d getTypicalStudentList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentList.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(newData, studentList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentsException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentListStub newData \u003d new StudentListStub(newStudents);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e studentList.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e studentList.hasStudent(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void hasStudent_studentNotInStudentList_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(studentList.hasStudent(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void hasStudent_studentInStudentList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentList.addStudent(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(studentList.hasStudent(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInStudentList_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentList.addStudent(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(studentList.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e studentList.getStudentList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * A stub ReadOnlyStudentList whose students list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static class StudentListStub implements ReadOnlyStudentList {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentListStub(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 101,
      "erisjacey": 2
    }
  },
  {
    "path": "src/test/java/atas/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudentListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setStudentListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void setMemoFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMemoFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 4,
      "MarcusTw": 2,
      "erisjacey": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/atas/model/memo/MemoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.model.memo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.SAMPLE_MEMO_CONTENT_ONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.SAMPLE_MEMO_CONTENT_TWO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.SAMPLE_MEMO_NOTE_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemos.SAMPLE_MEMO_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemos.SAMPLE_MEMO_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class MemoTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testGetContent() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Memo memo \u003d new Memo(SAMPLE_MEMO_CONTENT_ONE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(SAMPLE_MEMO_CONTENT_ONE, memo.getContent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testSetContent() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Memo memo \u003d new Memo(SAMPLE_MEMO_CONTENT_ONE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memo.setContent(SAMPLE_MEMO_CONTENT_TWO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(SAMPLE_MEMO_CONTENT_TWO, memo.getContent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testAddNote() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Memo memo \u003d new Memo(SAMPLE_MEMO_CONTENT_ONE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        memo.addNote(SAMPLE_MEMO_NOTE_ONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(SAMPLE_MEMO_CONTENT_ONE.concat(\"\\n\").concat(SAMPLE_MEMO_NOTE_ONE), memo.getContent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(SAMPLE_MEMO_ONE.equals(SAMPLE_MEMO_ONE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(SAMPLE_MEMO_TWO.equals(SAMPLE_MEMO_TWO));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Memo memoOneCopy \u003d new Memo(SAMPLE_MEMO_ONE.getContent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(SAMPLE_MEMO_ONE.equals(memoOneCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Memo memoTwoCopy \u003d new Memo(SAMPLE_MEMO_TWO.getContent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(SAMPLE_MEMO_TWO.equals(memoTwoCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(SAMPLE_MEMO_ONE.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different Types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(SAMPLE_MEMO_ONE.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different Memos -\u003e return false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(SAMPLE_MEMO_ONE.equals(SAMPLE_MEMO_TWO));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 57
    }
  },
  {
    "path": "src/test/java/atas/model/session/AttributesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalAttributes.ABSENT_BUT_HAS_PARTICIPATED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalAttributes.DEFAULT_PARTICIPATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalAttributes.PRESENT_AND_HAS_PARTICIPATED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalAttributes.PRESENT_BUT_HAS_NOT_PARTICIPATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "class AttributesTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(DEFAULT_PARTICIPATION.equals(DEFAULT_PARTICIPATION));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(DEFAULT_PARTICIPATION.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentIsPresentButHasNotParticipated() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(PRESENT_BUT_HAS_NOT_PARTICIPATED, DEFAULT_PARTICIPATION.togglePresence());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentIsAbsentButHasParticipated() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(ABSENT_BUT_HAS_PARTICIPATED, DEFAULT_PARTICIPATION.toggleParticipation());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentIsPresentAndHasParticipated() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(PRESENT_AND_HAS_PARTICIPATED, DEFAULT_PARTICIPATION.togglePresence().toggleParticipation());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toggleParticipation() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Attributes actualAttributes \u003d new Attributes();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        actualAttributes \u003d actualAttributes.toggleParticipation();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Attributes expectedAttributes \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            new Attributes(new Presence(false), new Participation(true), new Name(\"DEFAULT\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedAttributes, actualAttributes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void togglePresence() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Attributes actualAttributes \u003d new Attributes();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        actualAttributes \u003d actualAttributes.togglePresence();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Attributes expectedAttributes \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            new Attributes(new Presence(true), new Participation(false), new Name(\"DEFAULT\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedAttributes, actualAttributes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void to_string() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Attributes actualAttributes \u003d new Attributes();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Attributes expectedAttributes \u003d new Attributes();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedAttributes.toString(), actualAttributes.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 4,
      "MarcusTw": 1,
      "YuunoKun": 25,
      "erisjacey": 37
    }
  },
  {
    "path": "src/test/java/atas/model/session/IndexRangeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class IndexRangeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IndexRange(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void constructor_invalidIndexRange_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String invalidIndexRange \u003d \"a\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IndexRange(invalidIndexRange));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testIsValidIndexRange() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null IndexRange number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IndexRange(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid IndexRange characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003enew IndexRange(\"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003enew IndexRange(\"1-\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003enew IndexRange(\"0-2\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003enew IndexRange(\"-3-5\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003enew IndexRange(\"13-5\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003enew IndexRange(\"as\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003enew IndexRange(\"ad-\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003enew IndexRange(\"1-a\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // valid IndexRange numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(1, new IndexRange(\"1\").getOneBasedLower());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(1, new IndexRange(\"1\").getOneBasedUpper());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(12, new IndexRange(\"12-12\").getOneBasedLower());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(12, new IndexRange(\"12-12\").getOneBasedUpper());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(2, new IndexRange(\"2-12\").getOneBasedLower());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(12, new IndexRange(\"2-12\").getOneBasedUpper());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange actual \u003d new IndexRange(\"1-3\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange expected \u003d new IndexRange(\"1-3\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expected.hashCode(), actual.hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void to_string() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange actual \u003d new IndexRange(\"1-3\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange expected \u003d new IndexRange(\"1-3\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expected.toString(), actual.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void oneBased() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange actual \u003d new IndexRange(\"1-3\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        IndexRange expected \u003d new IndexRange(\"1-3\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expected.getOneBasedLower(), actual.getOneBasedLower());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expected.getOneBasedUpper(), actual.getOneBasedUpper());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 18,
      "YuunoKun": 48,
      "erisjacey": 2
    }
  },
  {
    "path": "src/test/java/atas/model/session/ParticipationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSION_WEEK_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.logic.commands.sessionlist.session.ParticipateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "class ParticipationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean HAS_PARTICIPATED \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final Participation DEFAULT_PARTICIPATION \u003d new Participation();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final Participation POSITIVE_PARTICIPATION \u003d new Participation(HAS_PARTICIPATED);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void toggleParticipationWithoutEnterSessionTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(\"1-4\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.addSession(SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertCommandFailure(new ParticipateCommand(indexRange), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            \"You have to be in the session tab to use this!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.updateParticipationBySessionName(SESSION_WEEK_ONE.getSessionName(), indexRange);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.addSession(SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.updateParticipationBySessionName(SESSION_WEEK_ONE.getSessionName(), indexRange);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertCommandSuccess(new ParticipateCommand(indexRange), model,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                ParticipateCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(DEFAULT_PARTICIPATION.equals(DEFAULT_PARTICIPATION));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(DEFAULT_PARTICIPATION.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void participate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(POSITIVE_PARTICIPATION, DEFAULT_PARTICIPATION.toggleParticipation());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(DEFAULT_PARTICIPATION, POSITIVE_PARTICIPATION.toggleParticipation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void to_string() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Participation actual \u003d new Participation(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Participation expected \u003d new Participation(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expected.toString(), actual.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "CodingCookieRookie": 31,
      "MarcusTw": 1,
      "YuunoKun": 9,
      "erisjacey": 31
    }
  },
  {
    "path": "src/test/java/atas/model/session/PresenceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSION_WEEK_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.logic.commands.sessionlist.session.PresenceCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import atas.testutil.ModelManagerBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "class PresenceTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final boolean IS_PRESENT \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final Presence DEFAULT_PRESENCE \u003d new Presence();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final Presence POSITIVE_PRESENCE \u003d new Presence(IS_PRESENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Model model \u003d ModelManagerBuilder.buildTypicalModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void togglePresenceWithoutEnterSessionTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        IndexRange indexRange \u003d new IndexRange(\"1-4\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.addSession(SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertCommandFailure(new PresenceCommand(indexRange), model, \"You have to be in the session tab to use this!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.updatePresenceBySessionName(SESSION_WEEK_ONE.getSessionName(), indexRange);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSessionList(model.getStudentList().getStudentList()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            new StudentList(model.getStudentList()), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.addSession(SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.enterSession(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        expectedModel.updatePresenceBySessionName(SESSION_WEEK_ONE.getSessionName(), indexRange);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        model.setCurrentSessionTrue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertCommandSuccess(new PresenceCommand(indexRange), model, PresenceCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertTrue(DEFAULT_PRESENCE.equals(DEFAULT_PRESENCE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertFalse(DEFAULT_PRESENCE.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void becomePresent() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(POSITIVE_PRESENCE, DEFAULT_PRESENCE.togglePresence());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(DEFAULT_PRESENCE, POSITIVE_PRESENCE.togglePresence());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void to_string() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Presence actual \u003d new Presence(true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Presence expected \u003d new Presence(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expected.toString(), actual.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "CodingCookieRookie": 31,
      "MarcusTw": 1,
      "YuunoKun": 8,
      "erisjacey": 30
    }
  },
  {
    "path": "src/test/java/atas/model/session/SessionDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONDATE_WEEK_ONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONDATE_WEEK_ONE_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONDATE_WEEK_THREE_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONDATE_WEEK_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SessionDateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SessionDate((String) null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void constructor_invalidSessionDate_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String invalidSessionDateDay \u003d \"32/12/2020\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String invalidSessionDateMonth \u003d \"12/13/2020\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e new SessionDate(invalidSessionDateDay));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e new SessionDate(invalidSessionDateMonth));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void isValidSessionDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SessionDate.isValidSessionDate(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid date, only tests format but not existance of such date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionDate.isValidSessionDate(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionDate.isValidSessionDate(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionDate.isValidSessionDate(\"12\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionDate.isValidSessionDate(\"123/123/123\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionDate.isValidSessionDate(\"12/13/202\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionDate.isValidSessionDate(\"40/200/2019\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(SessionDate.isValidSessionDate(\"1/1/2020\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(SessionDate.isValidSessionDate(\"11/11/2020\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(SessionDate.isValidSessionDate(\"12/9/2019\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionDate sessionDate \u003d new SessionDate(SESSIONDATE_WEEK_ONE_STRING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(SESSIONDATE_WEEK_ONE.equals(sessionDate));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(SESSIONDATE_WEEK_ONE.equals(SESSIONDATE_WEEK_ONE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SESSIONDATE_WEEK_ONE.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SESSIONDATE_WEEK_ONE.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different session date -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SESSIONDATE_WEEK_ONE.equals(SESSIONDATE_WEEK_TWO));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionDate sessionDateDiff \u003d new SessionDate(SESSIONDATE_WEEK_THREE_STRING);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SESSIONDATE_WEEK_ONE.equals(sessionDateDiff));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionDate actual \u003d new SessionDate(\"1/1/2020\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionDate expected \u003d new SessionDate(\"1/1/2020\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expected.hashCode(), actual.hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 75,
      "erisjacey": 7
    }
  },
  {
    "path": "src/test/java/atas/model/session/SessionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.CONSULTATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.LAB2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.TUT1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.TUT2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.TUT3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.exceptions.DuplicateSessionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.SessionBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.TypicalSessions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class SessionListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final SessionBuilder sessionBuilder \u003d new SessionBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final SessionList emptySessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final SessionList typicalSessionList \u003d new SessionList(TypicalSessions.getTypicalSessionList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void contains_nullClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e emptySessionList.contains(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e typicalSessionList.contains(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void add_duplicateSession_throwsDuplicateSessionException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        emptySessionList.addSession(sessionBuilder.build());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(DuplicateSessionException.class, () -\u003e emptySessionList.addSession(sessionBuilder.build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        typicalSessionList.addSession(sessionBuilder.build());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(DuplicateSessionException.class, () -\u003e typicalSessionList.addSession(sessionBuilder.build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void updateAfterDeletingStudent_validId_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // Set up expected result. Alice already removed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cStudent\u003e expectedMasterList \u003d TypicalStudents.getTypicalStudentsMinusAlice();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        SessionList expectedSessionList \u003d new SessionList(expectedMasterList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedSessionList.addSession(TUT1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedSessionList.addSession(TUT2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        expectedSessionList.addSession(TUT3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // Set up actual result. Remove Alice"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cStudent\u003e typicalMasterList \u003d TypicalStudents.getTypicalStudents();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        SessionList actualSessionList \u003d new SessionList(typicalMasterList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        actualSessionList.addSession(TUT1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        actualSessionList.addSession(TUT2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        actualSessionList.addSession(TUT3);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        typicalMasterList.remove(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        actualSessionList.updateAllSessionsAfterDelete(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(expectedSessionList, actualSessionList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void updateAfterDeletingStudent_nullId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e emptySessionList.updateAllSessionsAfterDelete(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e typicalSessionList.updateAllSessionsAfterDelete(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session session \u003d CONSULTATION;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e emptySessionList.contains(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(emptySessionList.contains(CONSULTATION));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(typicalSessionList.contains(CONSULTATION));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        emptySessionList.addSession(CONSULTATION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(emptySessionList.contains(CONSULTATION));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(typicalSessionList.contains(LAB2));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void returnListSize() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList emptyList \u003d new SessionList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, emptyList.returnSize());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        SessionList typicalList \u003d new SessionList(TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        typicalList.addSession(TypicalSessions.duplicateSession(TypicalSessions.TUT1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList emptyList \u003d new SessionList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //different list size"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(typicalList.equals(emptyList));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //same size but different sessions"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        emptyList.addSession(TUT2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(typicalList.equals(emptyList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //different type"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(typicalList.equals(LAB2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 6,
      "YuunoKun": 56,
      "erisjacey": 51
    }
  },
  {
    "path": "src/test/java/atas/model/session/SessionNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_ONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_ONE_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_THREE_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SessionNameTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SessionName(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void isValidSessionName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null sessionName"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SessionName.isValidSessionName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid sessionName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionName.isValidSessionName(\"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionName.isValidSessionName(\" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionName.isValidSessionName(\"@tut\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionName.isValidSessionName(\"tut\u003d1\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionName.isValidSessionName(\"!tut\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SessionName.isValidSessionName(\"#1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // valid sessionName"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(SessionName.isValidSessionName(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(SessionName.isValidSessionName(\"tut1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(SessionName.isValidSessionName(\"tut 1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionName sessionName \u003d new SessionName(SESSIONNAME_WEEK_ONE_STRING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(SESSIONNAME_WEEK_ONE.equals(sessionName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(SESSIONNAME_WEEK_ONE.equals(SESSIONNAME_WEEK_ONE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SESSIONNAME_WEEK_ONE.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SESSIONNAME_WEEK_ONE.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different session date -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SESSIONNAME_WEEK_ONE.equals(SESSIONNAME_WEEK_TWO));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionName sessionDateDiff \u003d new SessionName(SESSIONNAME_WEEK_THREE_STRING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(SESSIONNAME_WEEK_ONE.equals(sessionDateDiff));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionName actual \u003d new SessionName(\"a\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionName expected \u003d new SessionName(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expected.hashCode(), actual.hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 65,
      "erisjacey": 6
    }
  },
  {
    "path": "src/test/java/atas/model/session/SessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalAttributes.ABSENT_BUT_HAS_PARTICIPATED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalAttributes.PRESENT_AND_HAS_PARTICIPATED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalAttributes.PRESENT_BUT_HAS_NOT_PARTICIPATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONDATE_WEEK_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONDATE_WEEK_THREE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONDATE_WEEK_TWO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_THREE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSIONNAME_WEEK_TWO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.TypicalSessions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "class SessionTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final SessionList sessionList \u003d new SessionList(getTypicalStudents());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final Session sessionWeekOne \u003d new Session(SESSIONNAME_WEEK_ONE, SESSIONDATE_WEEK_ONE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final Session sessionWeekTwo \u003d new Session(SESSIONNAME_WEEK_TWO, SESSIONDATE_WEEK_TWO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final Session sessionWeekThree \u003d new Session(SESSIONNAME_WEEK_THREE, SESSIONDATE_WEEK_THREE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.addSession(sessionWeekOne);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.addSession(sessionWeekTwo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.addSession(sessionWeekThree);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void isSameSession() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(sessionWeekOne.isSameSession(sessionWeekOne));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(sessionWeekOne.isSameSession(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different session name -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(sessionWeekOne.isSameSession(sessionWeekTwo));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(sessionWeekTwo.isSameSession(sessionWeekThree));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(sessionWeekOne.equals(sessionWeekOne));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(sessionWeekOne.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // same master list but different date -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(sessionWeekOne.equals(sessionWeekTwo));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(sessionWeekTwo.equals(sessionWeekThree));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getEmptyAttributeListFromSession_validEmptySessions_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Session actual \u003d TypicalSessions.EMPTY_SESSION_1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Session expected \u003d TypicalSessions.EMPTY_SESSION_2;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expected.getAttributeList(), actual.getAttributeList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentBecomesPresent_validId_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.toggleStudentPresence(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(PRESENT_BUT_HAS_NOT_PARTICIPATED, sessionWeekOne.getAttributeList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentBecomesPresent_nullId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e sessionWeekOne.toggleStudentPresence(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentParticipates_validId_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekTwo.toggleStudentParticipation(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(ABSENT_BUT_HAS_PARTICIPATED, sessionWeekTwo.getAttributeList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentParticipates_nullId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e sessionWeekOne.toggleStudentParticipation(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void studentBecomesPresentAndParticipates_validId_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekThree.toggleStudentParticipation(index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekThree.toggleStudentPresence(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(PRESENT_AND_HAS_PARTICIPATED, sessionWeekThree.getAttributeList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session actual \u003d TypicalSessions.TUT1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session expected \u003d TypicalSessions.TUT2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(actual.getSessionIndex().equals(Index.fromZeroBased(0)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertTrue(expected.compareTo(actual) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 1,
      "MarcusTw": 12,
      "YuunoKun": 37,
      "erisjacey": 62
    }
  },
  {
    "path": "src/test/java/atas/model/statistics/ParticipationStatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalSessions.LAB1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalSessions.LAB2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalSessions.TUT1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalSessions.TUT2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalSessions.TUT3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.statistics.StatisticalValues;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.TypicalSessions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ParticipationStatisticsTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getDataAsRatioStringTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatisticsOne \u003d new ParticipationStatistics(0, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatisticsTwo \u003d new ParticipationStatistics(1, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatisticsThree \u003d new ParticipationStatistics(10, 100);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatisticsFour \u003d new ParticipationStatistics(2, 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatisticsFive \u003d new ParticipationStatistics(20, 20);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringOne \u003d \"Participation : 0/0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringTwo \u003d \"Participation : 1/2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringThree \u003d \"Participation : 10/100\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringFour \u003d \"Participation : 2/2\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringFive \u003d \"Participation : 20/20\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(participationStatisticsOne.getDataAsRatio(), expectedStringOne);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(participationStatisticsTwo.getDataAsRatio(), expectedStringTwo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(participationStatisticsThree.getDataAsRatio(), expectedStringThree);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(participationStatisticsFour.getDataAsRatio(), expectedStringFour);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(participationStatisticsFive.getDataAsRatio(), expectedStringFive);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getDataAsPercentageStringTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatisticsOne \u003d new ParticipationStatistics(0, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatisticsTwo \u003d new ParticipationStatistics(1, 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatisticsThree \u003d new ParticipationStatistics(11, 200);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatisticsFour \u003d new ParticipationStatistics(2, 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatisticsFive \u003d new ParticipationStatistics(20, 20);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringOne \u003d \"Participation : 0%\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringTwo \u003d \"Participation : 50%\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringThree \u003d \"Participation : 5%\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringFour \u003d \"Participation : 100%\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringFive \u003d \"Participation : 100%\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(participationStatisticsOne.getDataAsPercentage(), expectedStringOne);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(participationStatisticsTwo.getDataAsPercentage(), expectedStringTwo);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(participationStatisticsThree.getDataAsPercentage(), expectedStringThree);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(participationStatisticsFour.getDataAsPercentage(), expectedStringFour);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(participationStatisticsFive.getDataAsPercentage(), expectedStringFive);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getSessionStatisticsTest() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //dummy stats"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stats \u003d new ParticipationStatistics();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionWeekOne \u003d TypicalSessions.duplicateSession(TypicalSessions.SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionWeekTwo \u003d TypicalSessions.duplicateSession(TypicalSessions.SESSION_WEEK_TWO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionWeekThree \u003d TypicalSessions.duplicateSession(TypicalSessions.SESSION_WEEK_THREE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d TypicalStudents.getTypicalStudents();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //initialize sessions with a list of students"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.initializeSession(studentList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekTwo.initializeSession(studentList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekThree.initializeSession(studentList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //Customize and test week one"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.toggleStudentParticipation(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.toggleStudentParticipation(Index.fromOneBased(6));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics actualWeekOneStats \u003d stats.getSessionStatistics(sessionWeekOne);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(2, actualWeekOneStats.getActual());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(studentList.size(), actualWeekOneStats.getExpected());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //Customize and test week two"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekTwo.updateParticipation(new IndexRange(\"1-7\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics actualWeekTwoStats \u003d stats.getSessionStatistics(sessionWeekTwo);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(studentList.size(), actualWeekTwoStats.getActual());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(studentList.size(), actualWeekTwoStats.getExpected());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //Customize and test week three"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekThree.toggleStudentParticipation(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekThree.toggleStudentParticipation(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics actualWeekThreeStats \u003d stats.getSessionStatistics(sessionWeekThree);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, actualWeekThreeStats.getActual());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(studentList.size(), actualWeekThreeStats.getExpected());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getStudentStatisticsTest() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //dummy"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stats \u003d new ParticipationStatistics();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //create session lists with sessions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d TypicalStudents.getTypicalStudents();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList sessionList \u003d TypicalSessions.getTypicalSessionList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session session: sessionList.getSessions()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            session.initializeSession(studentList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //initialize sessions"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentList(studentList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //customize first sessionList and test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentParticipation(TUT1.getSessionName(), new IndexRange(\"1-5\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentParticipation(TUT2.getSessionName(), new IndexRange(\"2-6\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentParticipation(TUT3.getSessionName(), new IndexRange(\"3-5\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentParticipation(LAB1.getSessionName(), new IndexRange(\"4-5\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentParticipation(LAB2.getSessionName(), new IndexRange(\"5-5\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics[] actualStatistics \u003d new ParticipationStatistics[studentList.size()];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (int i \u003d 0; i \u003c actualStatistics.length; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            actualStatistics[i] \u003d stats.getStudentStatistics(sessionList, Index.fromOneBased(counter));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            assertEquals(sessionList.getSessions().size(), actualStatistics[i].getExpected());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, actualStatistics[0].getActual());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(2, actualStatistics[1].getActual());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(3, actualStatistics[2].getActual());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(4, actualStatistics[3].getActual());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(5, actualStatistics[4].getActual());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, actualStatistics[5].getActual());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, actualStatistics[6].getActual());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void isSameStatTest() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat \u003d new ParticipationStatistics(1, 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null -\u003e false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat1 \u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.isSameStats(stat1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different stat class -\u003e false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat2 \u003d new PresenceStatistics(1, 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.isSameStats(stat2));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same stat class \u0026 different values-\u003e true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat3 \u003d new ParticipationStatistics(1, 2);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.isSameStats(stat3));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same stat class \u0026 same values -\u003e true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat4 \u003d new ParticipationStatistics(1, 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.isSameStats(stat4));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getStatValueTest() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // init stat"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat1 \u003d new ParticipationStatistics(0, 0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // full stat"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat2 \u003d new ParticipationStatistics(1, 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // not-full stat"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat3 \u003d new ParticipationStatistics(0, 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid stat"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat4 \u003d new ParticipationStatistics(-1, -1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.STAT_NULL, stat1.getStatValue());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.STAT_FULL, stat2.getStatValue());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.STAT_NOTFULL, stat3.getStatValue());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.STAT_INVALID, stat4.getStatValue());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getterAndSetterTest() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat1 \u003d new ParticipationStatistics(0, 0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat2 \u003d new ParticipationStatistics(1, 1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat3 \u003d new ParticipationStatistics(0, 0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat4 \u003d new ParticipationStatistics(1, 1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // test getters"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, stat1.getActual());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, stat1.getExpected());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, stat2.getActual());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, stat2.getExpected());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // test setters"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat3 \u003d stat3.setActual(3);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(3, stat3.getActual());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat3 \u003d stat3.setExpected(3);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(3, stat3.getExpected());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat4 \u003d stat4.setActual(1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, stat4.getActual());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat4 \u003d stat4.setExpected(1);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, stat4.getExpected());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 215
    }
  },
  {
    "path": "src/test/java/atas/model/statistics/PresenceStatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalSessions.LAB1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalSessions.LAB2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalSessions.TUT1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalSessions.TUT2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static atas.testutil.TypicalSessions.TUT3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.statistics.StatisticalValues;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.TypicalSessions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class PresenceStatisticsTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getDataAsRatioStringTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatisticsOne \u003d new PresenceStatistics(0, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatisticsTwo \u003d new PresenceStatistics(1, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatisticsThree \u003d new PresenceStatistics(10, 100);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatisticsFour \u003d new PresenceStatistics(2, 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatisticsFive \u003d new PresenceStatistics(20, 20);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringOne \u003d \"Presence : 0/0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringTwo \u003d \"Presence : 1/2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringThree \u003d \"Presence : 10/100\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringFour \u003d \"Presence : 2/2\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringFive \u003d \"Presence : 20/20\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(presenceStatisticsOne.getDataAsRatio(), expectedStringOne);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(presenceStatisticsTwo.getDataAsRatio(), expectedStringTwo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(presenceStatisticsThree.getDataAsRatio(), expectedStringThree);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(presenceStatisticsFour.getDataAsRatio(), expectedStringFour);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(presenceStatisticsFive.getDataAsRatio(), expectedStringFive);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getDataAsPercentageStringTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatisticsOne \u003d new PresenceStatistics(0, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatisticsTwo \u003d new PresenceStatistics(1, 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatisticsThree \u003d new PresenceStatistics(11, 200);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatisticsFour \u003d new PresenceStatistics(2, 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatisticsFive \u003d new PresenceStatistics(20, 20);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringOne \u003d \"Presence : 0%\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringTwo \u003d \"Presence : 50%\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringThree \u003d \"Presence : 5%\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringFour \u003d \"Presence : 100%\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedStringFive \u003d \"Presence : 100%\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(presenceStatisticsOne.getDataAsPercentage(), expectedStringOne);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(presenceStatisticsTwo.getDataAsPercentage(), expectedStringTwo);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(presenceStatisticsThree.getDataAsPercentage(), expectedStringThree);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(presenceStatisticsFour.getDataAsPercentage(), expectedStringFour);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(presenceStatisticsFive.getDataAsPercentage(), expectedStringFive);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getSessionStatisticsTest() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //dummy stats"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stats \u003d new PresenceStatistics();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionWeekOne \u003d TypicalSessions.duplicateSession(TypicalSessions.SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionWeekTwo \u003d TypicalSessions.duplicateSession(TypicalSessions.SESSION_WEEK_TWO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionWeekThree \u003d TypicalSessions.duplicateSession(TypicalSessions.SESSION_WEEK_THREE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d TypicalStudents.getTypicalStudents();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //initialize sessions with a list of students"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.initializeSession(studentList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekTwo.initializeSession(studentList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekThree.initializeSession(studentList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //Customize and test week one"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.toggleStudentPresence(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.toggleStudentPresence(Index.fromOneBased(6));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics actualWeekOneStats \u003d stats.getSessionStatistics(sessionWeekOne);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(2, actualWeekOneStats.getActual());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(studentList.size(), actualWeekOneStats.getExpected());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //Customize and test week two"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekTwo.updatePresence(new IndexRange(\"1-7\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics actualWeekTwoStats \u003d stats.getSessionStatistics(sessionWeekTwo);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(studentList.size(), actualWeekTwoStats.getActual());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(studentList.size(), actualWeekTwoStats.getExpected());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //Customize and test week three"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekThree.toggleStudentPresence(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekThree.toggleStudentPresence(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics actualWeekThreeStats \u003d stats.getSessionStatistics(sessionWeekThree);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, actualWeekThreeStats.getActual());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(studentList.size(), actualWeekThreeStats.getExpected());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getStudentStatisticsTest() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //dummy"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stats \u003d new PresenceStatistics();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //create session lists with sessions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d TypicalStudents.getTypicalStudents();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList sessionList \u003d TypicalSessions.getTypicalSessionList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session session: sessionList.getSessions()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            session.initializeSession(studentList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //initialize sessions"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentList(studentList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //customize first sessionList and test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentPresence(TUT1.getSessionName(), new IndexRange(\"1-5\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentPresence(TUT2.getSessionName(), new IndexRange(\"2-6\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentPresence(TUT3.getSessionName(), new IndexRange(\"3-5\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentPresence(LAB1.getSessionName(), new IndexRange(\"4-5\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionList.updateStudentPresence(LAB2.getSessionName(), new IndexRange(\"5-5\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics[] actualStatistics \u003d new PresenceStatistics[studentList.size()];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (int i \u003d 0; i \u003c actualStatistics.length; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            actualStatistics[i] \u003d stats.getStudentStatistics(sessionList, Index.fromOneBased(counter));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            assertEquals(sessionList.getSessions().size(), actualStatistics[i].getExpected());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, actualStatistics[0].getActual());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(2, actualStatistics[1].getActual());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(3, actualStatistics[2].getActual());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(4, actualStatistics[3].getActual());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(5, actualStatistics[4].getActual());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, actualStatistics[5].getActual());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, actualStatistics[6].getActual());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void isSameStatTest() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat \u003d new PresenceStatistics(1, 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null -\u003e false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat1 \u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.isSameStats(stat1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different stat class -\u003e false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat2 \u003d new ParticipationStatistics(1, 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.isSameStats(stat2));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same stat class \u0026 different values-\u003e true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat3 \u003d new PresenceStatistics(1, 2);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.isSameStats(stat3));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same stat class \u0026 same values -\u003e true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat4 \u003d new PresenceStatistics(1, 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.isSameStats(stat4));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getStatValueTest() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // init stat"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat1 \u003d new PresenceStatistics(0, 0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // full stat"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat2 \u003d new PresenceStatistics(1, 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // not-full stat"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat3 \u003d new PresenceStatistics(0, 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid stat"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat4 \u003d new PresenceStatistics(-1, -1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.STAT_NULL, stat1.getStatValue());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.STAT_FULL, stat2.getStatValue());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.STAT_NOTFULL, stat3.getStatValue());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(StatisticalValues.STAT_INVALID, stat4.getStatValue());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getterAndSetterTest() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat1 \u003d new PresenceStatistics(0, 0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat2 \u003d new PresenceStatistics(1, 1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat3 \u003d new PresenceStatistics(0, 0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat4 \u003d new PresenceStatistics(1, 1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // test getters"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, stat1.getActual());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, stat1.getExpected());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, stat2.getActual());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, stat2.getExpected());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // test setters"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat3 \u003d stat3.setActual(3);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(3, stat3.getActual());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat3 \u003d stat3.setExpected(3);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(3, stat3.getExpected());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat4 \u003d stat4.setActual(1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, stat4.getActual());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat4 \u003d stat4.setExpected(1);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, stat4.getExpected());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 215
    }
  },
  {
    "path": "src/test/java/atas/model/statistics/SessionStatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.RandomStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.TypicalSessions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SessionStatisticsTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void addStatisticsTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics stats1 \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics stats2 \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics partStat \u003d new ParticipationStatistics();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presStat \u003d new PresenceStatistics();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics partStatDup \u003d new ParticipationStatistics();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // single param"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.addStatistics(partStat);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.addStatistics(presStat);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.addStatistics(partStatDup);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stats1.getStats().contains(partStat));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stats1.getStats().contains(presStat));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stats1.getStats().contains(partStatDup));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // multi param"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats2.addStatistics(partStat, presStat);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stats1.getStats().contains(partStat));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stats1.getStats().contains(presStat));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void replaceStatisticsTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics stats1 \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics stats2 \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics partStat \u003d new ParticipationStatistics();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presStat \u003d new PresenceStatistics();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.addStatistics(partStat, presStat);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // test variables"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics partSingleParamTest \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presSingleParamTest \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // single param"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics partStatNew \u003d new ParticipationStatistics(1, 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presStatNew \u003d new PresenceStatistics(1, 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.replaceStatistics(partStatNew);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.replaceStatistics(presStatNew);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics statistics: stats1.getStats()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (statistics instanceof ParticipationStatistics) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                partSingleParamTest \u003d (ParticipationStatistics) statistics;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else if (statistics instanceof PresenceStatistics) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                presSingleParamTest \u003d (PresenceStatistics) statistics;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assert partSingleParamTest !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, partSingleParamTest.getActual());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, partSingleParamTest.getExpected());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assert presSingleParamTest !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, presSingleParamTest.getActual());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, presSingleParamTest.getExpected());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // multi param"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats2.replaceStatistics(partStatNew, presStatNew);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        partSingleParamTest \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        presSingleParamTest \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics statistics: stats2.getStats()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (statistics instanceof ParticipationStatistics) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                partSingleParamTest \u003d (ParticipationStatistics) statistics;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else if (statistics instanceof PresenceStatistics) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                presSingleParamTest \u003d (PresenceStatistics) statistics;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assert partSingleParamTest !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, partSingleParamTest.getActual());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, partSingleParamTest.getExpected());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assert presSingleParamTest !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, presSingleParamTest.getActual());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, presSingleParamTest.getExpected());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updateParticipationStatisticsTest() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // initialize session stats with default value"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics stat1 \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics stat2 \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // customize session participation status"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionWeekOne \u003d TypicalSessions.duplicateSession(TypicalSessions.SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionWeekTwo \u003d TypicalSessions.duplicateSession(TypicalSessions.SESSION_WEEK_TWO);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.initializeSession(TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekTwo.initializeSession(TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.updateParticipation(new IndexRange(\"2-7\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekTwo.updateParticipation(new IndexRange(\"4-4\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // test and compare"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat1.updateParticipationStatistics(sessionWeekOne);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(6, ((ParticipationStatistics) stat1.getParticipationStatistics()).getActual());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(7, ((ParticipationStatistics) stat1.getParticipationStatistics()).getExpected());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat2.updateParticipationStatistics(sessionWeekTwo);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, ((ParticipationStatistics) stat2.getParticipationStatistics()).getActual());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(7, ((ParticipationStatistics) stat2.getParticipationStatistics()).getExpected());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void updatePresenceStatisticsTest() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // initialize session stats with default value"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics stat1 \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics stat2 \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // customize session presence status"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionWeekOne \u003d TypicalSessions.duplicateSession(TypicalSessions.SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionWeekTwo \u003d TypicalSessions.duplicateSession(TypicalSessions.SESSION_WEEK_TWO);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.initializeSession(TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekTwo.initializeSession(TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekOne.updatePresence(new IndexRange(\"2-7\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionWeekTwo.updatePresence(new IndexRange(\"4-4\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // test and compare"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat1.updatePresenceStatistics(sessionWeekOne);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(6, ((PresenceStatistics) stat1.getPresenceStatistics()).getActual());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(7, ((PresenceStatistics) stat1.getPresenceStatistics()).getExpected());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stat2.updatePresenceStatistics(sessionWeekTwo);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, ((PresenceStatistics) stat2.getPresenceStatistics()).getActual());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(7, ((PresenceStatistics) stat2.getPresenceStatistics()).getExpected());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getParticipationStatisticsTest() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionRemedial \u003d TypicalSessions.duplicateSession(TypicalSessions.REMEDIAL);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionRemedial.initializeSession(TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionRemedial.updateParticipation(new IndexRange(\"3-5\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                (ParticipationStatistics) sessionRemedial.getSessionStats().getParticipationStatistics();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(3, stat.getActual());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(7, stat.getExpected());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getPresenceStatisticsTest() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Session sessionRemedial \u003d TypicalSessions.duplicateSession(TypicalSessions.REMEDIAL);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionRemedial.initializeSession(TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionRemedial.updatePresence(new IndexRange(\"3-5\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat \u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                (PresenceStatistics) sessionRemedial.getSessionStats().getPresenceStatistics();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(3, stat.getActual());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(7, stat.getExpected());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void containsTest() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics stat \u003d new SessionStatistics(7);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // participation stats -\u003e true"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatistics \u003d new ParticipationStatistics();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.contains(participationStatistics));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // presence stats -\u003e true"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatistics \u003d new PresenceStatistics();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.contains(presenceStatistics));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // ? stats -\u003e false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        RandomStatistics randomStatistics \u003d new RandomStatistics();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.contains(randomStatistics));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics stat \u003d new SessionStatistics(7);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //null -\u003e false"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics nullStat \u003d null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.equals(nullStat));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //different class -\u003e false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics diffStat \u003d new StudentStatistics();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.equals(diffStat));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //same stats -\u003e true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics sameStat \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.equals(sameStat));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //same type of stats \u0026 different stat values -\u003e true"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics sameStatDiffVal \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sameStatDiffVal.replaceStatistics(new ParticipationStatistics(1, 1));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.equals(sameStatDiffVal));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //different stat class included -\u003e false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics diffStatClassStat \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        diffStatClassStat.addStatistics(new RandomStatistics());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.equals(diffStatClassStat));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 232
    }
  },
  {
    "path": "src/test/java/atas/model/statistics/StudentStatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.RandomStatistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class StudentStatisticsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void addStatisticsTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics stats1 \u003d new StudentStatistics();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics stats2 \u003d new StudentStatistics();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics partStat \u003d new ParticipationStatistics();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presStat \u003d new PresenceStatistics();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics partStatDup \u003d new ParticipationStatistics();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // single param"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.addStatistics(partStat);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.addStatistics(presStat);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.addStatistics(partStatDup);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stats1.getStats().contains(partStat));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stats1.getStats().contains(presStat));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stats1.getStats().contains(partStatDup));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // multi param"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats2.addStatistics(partStat, presStat);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stats1.getStats().contains(partStat));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stats1.getStats().contains(presStat));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void replaceStatisticsTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics stats1 \u003d new StudentStatistics(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics stats2 \u003d new StudentStatistics(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics partStat \u003d new ParticipationStatistics();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presStat \u003d new PresenceStatistics();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.addStatistics(partStat, presStat);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // test variables"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics partSingleParamTest \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presSingleParamTest \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // single param"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics partStatNew \u003d new ParticipationStatistics(1, 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presStatNew \u003d new PresenceStatistics(1, 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.replaceStatistics(partStatNew);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats1.replaceStatistics(presStatNew);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics statistics: stats1.getStats()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (statistics instanceof ParticipationStatistics) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                partSingleParamTest \u003d (ParticipationStatistics) statistics;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else if (statistics instanceof PresenceStatistics) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                presSingleParamTest \u003d (PresenceStatistics) statistics;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assert partSingleParamTest !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, partSingleParamTest.getActual());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, partSingleParamTest.getExpected());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assert presSingleParamTest !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, presSingleParamTest.getActual());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, presSingleParamTest.getExpected());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // multi param"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        stats2.replaceStatistics(partStatNew, presStatNew);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        partSingleParamTest \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        presSingleParamTest \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Statistics statistics: stats2.getStats()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (statistics instanceof ParticipationStatistics) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                partSingleParamTest \u003d (ParticipationStatistics) statistics;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else if (statistics instanceof PresenceStatistics) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                presSingleParamTest \u003d (PresenceStatistics) statistics;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assert partSingleParamTest !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, partSingleParamTest.getActual());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, partSingleParamTest.getExpected());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assert presSingleParamTest !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, presSingleParamTest.getActual());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(1, presSingleParamTest.getExpected());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getParticipationStatisticsTest() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Student student \u003d TypicalStudents.duplicateStudent(TypicalStudents.ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics stat \u003d (ParticipationStatistics) student.getStats().getParticipationStatistics();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, stat.getActual());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, stat.getExpected());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void getPresenceStatisticsTest() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Student student \u003d TypicalStudents.duplicateStudent(TypicalStudents.ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics stat \u003d (PresenceStatistics) student.getStats().getPresenceStatistics();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, stat.getActual());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(0, stat.getExpected());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void containsTest() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics stat \u003d new StudentStatistics(7);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // participation stats -\u003e true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ParticipationStatistics participationStatistics \u003d new ParticipationStatistics();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.contains(participationStatistics));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // presence stats -\u003e true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        PresenceStatistics presenceStatistics \u003d new PresenceStatistics();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.contains(presenceStatistics));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // ? stats -\u003e false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        RandomStatistics randomStatistics \u003d new RandomStatistics();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.contains(randomStatistics));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics stat \u003d new StudentStatistics(7);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //null -\u003e false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics nullStat \u003d null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.equals(nullStat));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //different class -\u003e false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionStatistics diffStat \u003d new SessionStatistics();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.equals(diffStat));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //same stats -\u003e true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics sameStat \u003d new StudentStatistics();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.equals(sameStat));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //same type of stats \u0026 different stat values -\u003e true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics sameStatDiffVal \u003d new StudentStatistics();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sameStatDiffVal.replaceStatistics(new ParticipationStatistics(1, 1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(stat.equals(sameStatDiffVal));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //different stat class included -\u003e false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StudentStatistics diffStatClassStat \u003d new StudentStatistics();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        diffStatClassStat.addStatistics(new RandomStatistics());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(stat.equals(diffStatClassStat));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 168
    }
  },
  {
    "path": "src/test/java/atas/model/student/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Email VALID_EMAIL \u003d new Email(\"test@u.nus.edu\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Email VALID_EMAIL_COPY \u003d new Email(VALID_EMAIL.value);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Email DIFFERENT_VALID_EMAIL \u003d new Email(\"different@u.nus.edu\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@u.nus.edu\")); // missing local part"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjacku.nus.edu\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@u.nus.edu\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@u.nus.edu\")); // minimal"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@u.nus.edu\")); // alphabets only"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@u.nus.edu\")); // special characters local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@u.nus.edu\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@u.nus.edu\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@u.nus.edu\")); // long local part"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(Email.isValidEmail(VALID_EMAIL.value));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(Email.isValidEmail(VALID_EMAIL_COPY.value));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(Email.isValidEmail(DIFFERENT_VALID_EMAIL.value));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // this \u003d\u003d other"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(VALID_EMAIL, VALID_EMAIL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(VALID_EMAIL_COPY, VALID_EMAIL_COPY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(DIFFERENT_VALID_EMAIL, DIFFERENT_VALID_EMAIL);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // same email value"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(VALID_EMAIL_COPY, VALID_EMAIL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // different email value"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertNotEquals(DIFFERENT_VALID_EMAIL, VALID_EMAIL);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertNotEquals(DIFFERENT_VALID_EMAIL, VALID_EMAIL_COPY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 25,
      "YuunoKun": 9,
      "-": 49,
      "erisjacey": 1
    }
  },
  {
    "path": "src/test/java/atas/model/student/MatriculationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class MatriculationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Matriculation VALID_MATRICULATION \u003d new Matriculation(\"A0159980Z\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Matriculation VALID_MATRICULATION_COPY \u003d new Matriculation(VALID_MATRICULATION.value);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Matriculation DIFFERENT_VALID_MATRICULATION \u003d new Matriculation(\"A0169980Z\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Matriculation(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void constructor_invalidMatriculation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String invalidMatriculation \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Matriculation(invalidMatriculation));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void isValidMatriculation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // null Matriculation number"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Matriculation.isValidMatriculation(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // invalid Matriculation numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"1234567\")); // only numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"Matriculation\")); // non-numeric"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"1234567X\")); // missing prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"A123456X\")); // missing number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(Matriculation.isValidMatriculation(\"A1234567\")); // missing suffix"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // valid Matriculation numbers"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Matriculation.isValidMatriculation(\"A1234567X\")); // standard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Matriculation.isValidMatriculation(\"A2534564F\")); // random"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(Matriculation.isValidMatriculation(\"A0000000X\")); // full of zeros"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // this \u003d\u003d other"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(VALID_MATRICULATION, VALID_MATRICULATION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(VALID_MATRICULATION_COPY, VALID_MATRICULATION_COPY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(DIFFERENT_VALID_MATRICULATION, DIFFERENT_VALID_MATRICULATION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // same matriculation value"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(VALID_MATRICULATION_COPY, VALID_MATRICULATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // different matriculation value"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertNotEquals(DIFFERENT_VALID_MATRICULATION, VALID_MATRICULATION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertNotEquals(DIFFERENT_VALID_MATRICULATION, VALID_MATRICULATION_COPY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 24,
      "YuunoKun": 37,
      "erisjacey": 1
    }
  },
  {
    "path": "src/test/java/atas/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // Keywords match phone, email, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"A1234567C\", \"alice@u.nus.edu\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withMatriculation(\"A1234567C\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withEmail(\"alice@u.nus.edu\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 10,
      "YuunoKun": 3,
      "-": 62
    }
  },
  {
    "path": "src/test/java/atas/model/student/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 1,
      "-": 38,
      "erisjacey": 1
    }
  },
  {
    "path": "src/test/java/atas/model/student/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different matriculation and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different name, same matriculation -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same name, same matriculation, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same name, same email, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withMatriculation(VALID_MATRICULATION_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // same name, same matriculation, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // different matriculation -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withMatriculation(VALID_MATRICULATION_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 25,
      "YuunoKun": 8,
      "erisjacey": 6,
      "-": 51
    }
  },
  {
    "path": "src/test/java/atas/model/student/UniqueStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.setStudent(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudent(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudent_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((UniqueStudentList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudents(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 169
    }
  },
  {
    "path": "src/test/java/atas/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/atas/storage/JsonAdaptedAttributeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Participation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Presence;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class JsonAdaptedAttributeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_PRESENCE \u003d \"true\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_PARTICIPATION \u003d \"true\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final String VALID_NAME \u003d \"DEFAULT\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INVALID_PRESENCE \u003d \"b\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INVALID_PARTICIPATION \u003d \"c\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_validAttributeDetails_returnsAttribute() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        JsonAdaptedAttributes attr \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            new JsonAdaptedAttributes(VALID_INDEX, VALID_PRESENCE, VALID_PARTICIPATION, VALID_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Attributes expectedAttributes \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            new Attributes().togglePresence().toggleParticipation();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(expectedAttributes, attr.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_invalidPresence_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        JsonAdaptedAttributes attr \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            new JsonAdaptedAttributes(VALID_INDEX, INVALID_PRESENCE, VALID_PARTICIPATION, VALID_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d Presence.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attr::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_nullPresence_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        JsonAdaptedAttributes attr \u003d new JsonAdaptedAttributes(VALID_INDEX, null, VALID_PARTICIPATION, VALID_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d Presence.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attr::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_invalidParticipation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        JsonAdaptedAttributes attr \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            new JsonAdaptedAttributes(VALID_INDEX, VALID_PRESENCE, INVALID_PARTICIPATION, VALID_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d Participation.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attr::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_nullParticipation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        JsonAdaptedAttributes attr \u003d new JsonAdaptedAttributes(VALID_INDEX, VALID_PRESENCE, null, VALID_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String expectedMessage \u003d Participation.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attr::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 14,
      "YuunoKun": 43,
      "erisjacey": 6
    }
  },
  {
    "path": "src/test/java/atas/storage/JsonAdaptedSessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_SESSIONDATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.INVALID_SESSIONNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.REC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONDATE_REC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_SESSIONNAME_REC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class JsonAdaptedSessionTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INVALID_NAME \u003d INVALID_SESSIONNAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String INVALID_DATE \u003d INVALID_SESSIONDATE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_NAME \u003d VALID_SESSIONNAME_REC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_DATE \u003d VALID_SESSIONDATE_REC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final List\u003cJsonAdaptedAttributes\u003e studentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_validSessionDetails_returnsSession() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonAdaptedSession session \u003d new JsonAdaptedSession(VALID_NAME, VALID_DATE, studentList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(REC, session.toModelType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_invalidSessionName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonAdaptedSession session \u003d new JsonAdaptedSession(INVALID_NAME, VALID_DATE, studentList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d SessionName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_nullSessionName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonAdaptedSession session \u003d new JsonAdaptedSession(null, VALID_DATE, studentList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d SessionName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_invalidSessionDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonAdaptedSession session \u003d new JsonAdaptedSession(VALID_NAME, INVALID_DATE, studentList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d SessionDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_nullSessionDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonAdaptedSession session \u003d new JsonAdaptedSession(VALID_NAME, null, studentList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d SessionDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, session::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 53,
      "erisjacey": 11
    }
  },
  {
    "path": "src/test/java/atas/storage/JsonAdaptedStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final String VALID_MATRICULATION \u003d BENSON.getMatriculation().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new JsonAdaptedStudent(INVALID_NAME, VALID_MATRICULATION, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(null, VALID_MATRICULATION, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d Matriculation.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Matriculation.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_MATRICULATION, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_MATRICULATION, null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_MATRICULATION, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 27,
      "YuunoKun": 3,
      "erisjacey": 3,
      "-": 59
    }
  },
  {
    "path": "src/test/java/atas/storage/JsonSerializableSessionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.testutil.TypicalSessions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class JsonSerializableSessionListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableSessionListTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final Path TYPICAL_SESSIONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalSessionSessionList.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final Path INVALID_SESSION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidSessionSessionList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final Path DUPLICATE_SESSION_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateSessionSessionList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_typicalSessionFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonSerializableSessionList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SESSIONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                JsonSerializableSessionList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList sessionListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList typicalSessionsSessionList \u003d TypicalSessions.getTypicalSessionList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(sessionListFromFile, typicalSessionsSessionList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_invalidSessionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonSerializableSessionList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_SESSION_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                JsonSerializableSessionList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void toModelType_duplicateSessions_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonSerializableSessionList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_SESSION_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                JsonSerializableSessionList.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableSessionList.MESSAGE_DUPLICATE_SESSION,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 41,
      "erisjacey": 6
    }
  },
  {
    "path": "src/test/java/atas/storage/JsonSerializableStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class JsonSerializableStudentListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableStudentListTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsStudentList.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentInStudentList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentsInStudentList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonSerializableStudentList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_STUDENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                JsonSerializableStudentList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList studentListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList typicalStudentsStudentList \u003d TypicalStudents.getTypicalStudentList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(studentListFromFile, typicalStudentsStudentList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonSerializableStudentList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                JsonSerializableStudentList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void toModelType_duplicateStudents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonSerializableStudentList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                JsonSerializableStudentList.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableStudentList.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 19,
      "erisjacey": 5,
      "-": 23
    }
  },
  {
    "path": "src/test/java/atas/storage/JsonSessionListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSION_WEEK_ONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.SESSION_WEEK_THREE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.TUT1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.ReadOnlySessionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class JsonSessionListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSessionListStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void readSessionList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readSessionList(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private java.util.Optional\u003cReadOnlySessionList\u003e readSessionList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new JsonSessionListStorage(Paths.get(filePath)).readSessionList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertFalse(readSessionList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSessionList(\"notJsonFormatSessionList.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void readSessionList_invalidSessionSessionList_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSessionList(\"invalidSessionSessionList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void readSessionList_invalidAndValidSessionSessionList_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSessionList(\"invalidAndValidSessionSessionList.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void readAndSaveSessionList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempSessionList.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList original \u003d getTypicalSessionList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonSessionListStorage jsonSessionListStorage \u003d new JsonSessionListStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        jsonSessionListStorage.saveSessionList(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ReadOnlySessionList readBack \u003d jsonSessionListStorage.readSessionList(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(original, new SessionList(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        original.addSession(SESSION_WEEK_ONE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        original.deleteSession(TUT1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        jsonSessionListStorage.saveSessionList(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        readBack \u003d jsonSessionListStorage.readSessionList(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(original, new SessionList(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        original.addSession(SESSION_WEEK_THREE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        jsonSessionListStorage.saveSessionList(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        readBack \u003d jsonSessionListStorage.readSessionList().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(original, new SessionList(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void saveSessionList_nullSessionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveSessionList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Saves {@code sessionList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private void saveSessionList(ReadOnlySessionList sessionList, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            new JsonSessionListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    .saveSessionList(sessionList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void saveSessionList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveSessionList(new SessionList(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 103,
      "erisjacey": 9
    }
  },
  {
    "path": "src/test/java/atas/storage/JsonStudentListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.getTypicalStudentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class JsonStudentListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAtasStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void readStudentList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readStudentList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private java.util.Optional\u003cReadOnlyStudentList\u003e readStudentList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new JsonAtasStorage(Paths.get(filePath)).readStudentList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertFalse(readStudentList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readStudentList(\"notJsonFormatStudentList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void readStudentList_invalidStudentInStudentList_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readStudentList(\"invalidStudentInStudentList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void readStudentList_invalidAndValidStudentInStudentList_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readStudentList(\"invalidAndValidStudentInStudentList.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void readAndSaveStudentList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempStudentList.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList original \u003d getTypicalStudentList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAtasStorage jsonStudentListStorage \u003d new JsonAtasStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        jsonStudentListStorage.saveStudentList(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ReadOnlyStudentList readBack \u003d jsonStudentListStorage.readStudentList(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(original, new StudentList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        original.removeStudent(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        jsonStudentListStorage.saveStudentList(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        readBack \u003d jsonStudentListStorage.readStudentList(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(original, new StudentList(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        jsonStudentListStorage.saveStudentList(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        readBack \u003d jsonStudentListStorage.readStudentList().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(original, new StudentList(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void saveStudentList_nullStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveStudentList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Saves {@code studentList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private void saveStudentList(ReadOnlyStudentList studentList, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            new JsonAtasStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    .saveStudentList(studentList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void saveStudentList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveStudentList(new StudentList(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 40,
      "erisjacey": 5,
      "-": 65
    }
  },
  {
    "path": "src/test/java/atas/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        userPrefs.setStudentListFilePath(Paths.get(\"studentlist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 1,
      "erisjacey": 5,
      "-": 117
    }
  },
  {
    "path": "src/test/java/atas/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemos.SAMPLE_MEMO_ONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.getTypicalStudentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.ReadOnlyStudentList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        JsonSessionListStorage sessionListStorage \u003d new JsonSessionListStorage(getTempFilePath(\"sl\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        JsonAtasStorage studentListStorage \u003d new JsonAtasStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        TxtMemoStorage memoStorage \u003d new TxtMemoStorage(getTempFilePath(\"memo\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        storageManager \u003d new StorageManager(sessionListStorage, studentListStorage, userPrefsStorage, memoStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void studentListReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * {@link JsonStudentListStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonStudentListStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList original \u003d getTypicalStudentList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        storageManager.saveStudentList(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ReadOnlyStudentList retrieved \u003d storageManager.readStudentList().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(original, new StudentList(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getStudentListFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertNotNull(storageManager.getStudentListFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testSaveMemo() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Memo original \u003d SAMPLE_MEMO_ONE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        storageManager.saveMemo(original);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        String retrieved \u003d storageManager.readMemo();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(original, new Memo(retrieved));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void getMemoFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertNotNull(storageManager.getMemoFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 17,
      "MarcusTw": 11,
      "YuunoKun": 1,
      "erisjacey": 5,
      "-": 51
    }
  },
  {
    "path": "src/test/java/atas/storage/TxtMemoStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class TxtMemoStorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"TxtMemoStorageTest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void readMemo_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        TxtMemoStorage memoStorage \u003d new TxtMemoStorage(testFolder);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMemo(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private String readMemo(String filePath) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new TxtMemoStorage(Paths.get(filePath)).readMemo(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(readMemo(\"NonExistentFile.txt\").isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void saveMemo_nullMemo_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMemo(null, \"SomeFile.txt\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Saves {@code memo} at the specified {@code filePath}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private void saveMemo(Memo memo, String filePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            new TxtMemoStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                    .saveMemo(memo, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void saveMemo_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMemo(new Memo(), null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 63
    }
  },
  {
    "path": "src/test/java/atas/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/atas/testutil/EditSessionDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.EditSessionCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A utility class to help with building EditSessionDescriptor objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class EditSessionDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private EditSessionCommand.EditSessionDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public EditSessionDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor \u003d new EditSessionCommand.EditSessionDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public EditSessionDescriptorBuilder(EditSessionCommand.EditSessionDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.descriptor \u003d new EditSessionCommand.EditSessionDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns an {@code EditSessionDescriptor} with fields containing {@code session}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public EditSessionDescriptorBuilder(Session session) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor \u003d new EditSessionCommand.EditSessionDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor.setSessionName(session.getSessionName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor.setSessionDate(session.getSessionDate());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sets the {@code sessionName} of the {@code EditSessionDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public EditSessionDescriptorBuilder withSessionName(String sessionName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor.setSessionName(new SessionName(sessionName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sets the {@code sessionDate} of the {@code EditSessionDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public EditSessionDescriptorBuilder withSessionDate(String sessionDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        descriptor.setSessionDate(new SessionDate(sessionDate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public EditSessionCommand.EditSessionDescriptor build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 47,
      "erisjacey": 5
    }
  },
  {
    "path": "src/test/java/atas/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor \u003d new EditStudentCommand.EditStudentDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor \u003d new EditStudentCommand.EditStudentDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor.setMatriculation(student.getMatriculation());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Sets the {@code Matriculation} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public EditStudentDescriptorBuilder withMatriculation(String matriculation) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor.setMatriculation(new Matriculation(matriculation));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 78
    }
  },
  {
    "path": "src/test/java/atas/testutil/MemoBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * A utility class to help with building Memo objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class MemoBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String DEFAULT_CONTENT \u003d \"sample content\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Creates a {@code MemoBuilder} with the default details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public MemoBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        content \u003d DEFAULT_CONTENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Initializes the MemoBuilder with the data of {@code memoToCopy}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public MemoBuilder(Memo memoToCopy) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        content \u003d memoToCopy.getContent();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Sets the {@code SessionName} of the {@code Session} that we are building."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public MemoBuilder withConTent(String content) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     * Builds a memo using {@code content}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public Memo build() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        return new Memo(content);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 41
    }
  },
  {
    "path": "src/test/java/atas/testutil/ModelManagerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static atas.testutil.TypicalMemoContents.EMPTY_MEMO_CONTENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.TypicalSessions.getTypicalSessionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static atas.testutil.TypicalStudents.getTypicalStudentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A util class for building typical sessionlist with typical studentList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ModelManagerBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private ModelManagerBuilder() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Build a typical ATAS."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static ModelManager buildTypicalModelManager() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new ModelManager(getTypicalSessionList(getTypicalStudentList().getStudentList()),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "                getTypicalStudentList(), new UserPrefs(), EMPTY_MEMO_CONTENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "MarcusTw": 3,
      "YuunoKun": 15,
      "erisjacey": 4
    }
  },
  {
    "path": "src/test/java/atas/testutil/RandomStatistics.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import atas.model.statistics.Statistics;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class RandomStatistics implements Statistics {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Statistics getSessionStatistics(Session session) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Statistics getStudentStatistics(SessionList sessionList, Index index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getDataAsRatio() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getDataAsPercentage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isSameStats(Statistics statistics) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getStatValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 38
    }
  },
  {
    "path": "src/test/java/atas/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/atas/testutil/SessionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A utility class to help with building Session objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SessionBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String DEFAULT_SESSIONNAME \u003d \"Tutorial 1\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String DEFAULT_SESSIONDATE \u003d \"12/12/2020\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private SessionName sessionName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private SessionDate sessionDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Creates a {@code SessionBuilder} with the default details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionName \u003d new SessionName(DEFAULT_SESSIONNAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionDate \u003d new SessionDate(DEFAULT_SESSIONDATE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Initializes the SessionBuilder with the data of {@code sessionToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionBuilder(Session sessionToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionName \u003d sessionToCopy.getSessionName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        sessionDate \u003d sessionToCopy.getSessionDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sets the {@code SessionName} of the {@code Session} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionBuilder withSessionName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionName \u003d new SessionName(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sets the {@code SessionDate} of the {@code Session} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public SessionBuilder withSessionDate(String date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.sessionDate \u003d new SessionDate(date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Builds a default session using {@code DEFAULT_SESSIONNAME} and {@code DEFAULT_SESSIONDATE}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Session build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Session(sessionName, sessionDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 51,
      "erisjacey": 5
    }
  },
  {
    "path": "src/test/java/atas/testutil/SessionUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.commands.sessionlist.AddSessionCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A utility class for Session."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SessionUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns an add session command string for adding the {@code session}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static String getAddSessionCommand(Session session) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return AddSessionCommand.COMMAND_WORD + \" \" + getSessionDetails(session);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns the part of command string for the given {@code session}\u0027s details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static String getSessionDetails(Session session) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        sb.append(CliSyntax.PREFIX_SESSION_NAME + session.getSessionName().toString() + \" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        sb.append(CliSyntax.PREFIX_SESSION_DATE + session.getSessionDate().toString() + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "YuunoKun": 22,
      "erisjacey": 4
    }
  },
  {
    "path": "src/test/java/atas/testutil/StudentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Matriculation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String DEFAULT_MATRICULATION \u003d \"A3458234L\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@u.nus.edu\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Matriculation matriculation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates a {@code StudentBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        matriculation \u003d new Matriculation(DEFAULT_MATRICULATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates a {@code StudentBuilder} with customized details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentBuilder(String matriculation, String email) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.matriculation \u003d new Matriculation(matriculation);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        matriculation \u003d studentToCopy.getMatriculation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Sets the {@code Matriculation} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentBuilder withMatriculation(String matriculation) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.matriculation \u003d new Matriculation(matriculation);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new Student(name, matriculation, email, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 93
    }
  },
  {
    "path": "src/test/java/atas/testutil/StudentListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A utility class to help with building StudentList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " *     {@code StudentList ab \u003d new StudentListBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class StudentListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private StudentList studentList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentList \u003d new StudentList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentListBuilder(StudentList studentList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.studentList \u003d studentList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Adds a new {@code Student} to the {@code StudentList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentListBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        studentList.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public StudentList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return studentList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 33,
      "erisjacey": 1
    }
  },
  {
    "path": "src/test/java/atas/testutil/StudentUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.logic.commands.studentlist.AddStudentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.logic.commands.studentlist.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static String getAddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return AddStudentCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        sb.append(CliSyntax.PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        sb.append(CliSyntax.PREFIX_MATRICULATION + student.getMatriculation().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        sb.append(CliSyntax.PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            s -\u003e sb.append(CliSyntax.PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(CliSyntax.PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        descriptor.getMatriculation().ifPresent(phone -\u003e sb.append(CliSyntax.PREFIX_MATRICULATION)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                .append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(CliSyntax.PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                sb.append(CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                tags.forEach(s -\u003e sb.append(CliSyntax.PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 2,
      "MarcusTw": 14,
      "YuunoKun": 1,
      "erisjacey": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/atas/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static Student getStudents(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 8,
      "erisjacey": 3,
      "-": 44
    }
  },
  {
    "path": "src/test/java/atas/testutil/TypicalAttributes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Attributes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Participation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Presence;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class TypicalAttributes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Presence IS_PRESENT \u003d new Presence(true);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Presence IS_ABSENT \u003d new Presence(false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Participation HAS_PARTICIPATED \u003d new Participation(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Participation HAS_NOT_PARTICIPATED \u003d new Participation(false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final Name STUDENT_NAME \u003d new Name(\"DEFAULT\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final Attributes DEFAULT_PARTICIPATION \u003d new Attributes(); // absent and has not participated"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final Attributes PRESENT_BUT_HAS_NOT_PARTICIPATED \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        new Attributes(IS_PRESENT, HAS_NOT_PARTICIPATED, STUDENT_NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final Attributes ABSENT_BUT_HAS_PARTICIPATED \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        new Attributes(IS_ABSENT, HAS_PARTICIPATED, STUDENT_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final Attributes PRESENT_AND_HAS_PARTICIPATED \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        new Attributes(IS_PRESENT, HAS_PARTICIPATED, STUDENT_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 7,
      "MarcusTw": 1,
      "erisjacey": 14
    }
  },
  {
    "path": "src/test/java/atas/testutil/TypicalIndexRanges.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.IndexRange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * A utility class containing a list of {@code IndexRange} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class TypicalIndexRanges {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final IndexRange INDEX_RANGE_ONE \u003d new IndexRange(\"1\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final IndexRange INDEX_RANGE_ONE_THREE \u003d new IndexRange(\"1-3\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final IndexRange INDEX_RANGE_THREE \u003d new IndexRange(\"3\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 12
    }
  },
  {
    "path": "src/test/java/atas/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Index INDEX_FIRST_STUDENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Index INDEX_SECOND_STUDENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Index INDEX_THIRD_STUDENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final Index INDEX_FIRST_SESSION \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final Index INDEX_SECOND_SESSION \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 3,
      "MarcusTw": 3,
      "erisjacey": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/atas/testutil/TypicalMemoContents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class TypicalMemoContents {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String EMPTY_MEMO_CONTENT \u003d \"\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String SAMPLE_MEMO_CONTENT_ONE \u003d \"sample content one\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String SAMPLE_MEMO_CONTENT_TWO \u003d \"sample content two\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String SAMPLE_MEMO_NOTE_ONE \u003d \"sample note one\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 8
    }
  },
  {
    "path": "src/test/java/atas/testutil/TypicalMemos.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import atas.model.memo.Memo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class TypicalMemos {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final Memo SAMPLE_MEMO_ONE \u003d new MemoBuilder().withConTent(\"memo 1\").build();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final Memo SAMPLE_MEMO_TWO \u003d new MemoBuilder().withConTent(\"memo 2\").build();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 8
    }
  },
  {
    "path": "src/test/java/atas/testutil/TypicalSessions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.Session;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.session.SessionName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A utility class containing a list of {@code Session} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class TypicalSessions {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session TUT1 \u003d new SessionBuilder().withSessionName(\"tut1\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withSessionDate(\"1/1/2020\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session TUT2 \u003d new SessionBuilder().withSessionName(\"tut2\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withSessionDate(\"1/2/2020\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session TUT3 \u003d new SessionBuilder().withSessionName(\"tut3\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withSessionDate(\"1/3/2020\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session LAB1 \u003d new SessionBuilder().withSessionName(\"lab1\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withSessionDate(\"1/4/2020\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session LAB2 \u003d new SessionBuilder().withSessionName(\"lab2\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withSessionDate(\"1/5/2020\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Session EMPTY_SESSION_1 \u003d new SessionBuilder().withSessionName(\"tut99\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            .withSessionDate(\"1/1/2020\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Session EMPTY_SESSION_2 \u003d new SessionBuilder().withSessionName(\"tut100\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            .withSessionDate(\"1/1/2020\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session CONSULTATION \u003d new SessionBuilder().withSessionName(\"consultation\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withSessionDate(\"7/5/2020\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session REMEDIAL \u003d new SessionBuilder().withSessionName(\"remedial\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withSessionDate(\"14/6/2020\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    // sample sessions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String SESSIONDATE_WEEK_ONE_STRING \u003d \"10/8/2020\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String SESSIONDATE_WEEK_TWO_STRING \u003d \"17/8/2020\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String SESSIONDATE_WEEK_THREE_STRING \u003d \"24/8/2020\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final SessionDate SESSIONDATE_WEEK_ONE \u003d new SessionDate(SESSIONDATE_WEEK_ONE_STRING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final SessionDate SESSIONDATE_WEEK_TWO \u003d new SessionDate(SESSIONDATE_WEEK_TWO_STRING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final SessionDate SESSIONDATE_WEEK_THREE \u003d new SessionDate(SESSIONDATE_WEEK_THREE_STRING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String SESSIONNAME_WEEK_ONE_STRING \u003d \"week 1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String SESSIONNAME_WEEK_TWO_STRING \u003d \"week 2\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final String SESSIONNAME_WEEK_THREE_STRING \u003d \"week 3\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final SessionName SESSIONNAME_WEEK_ONE \u003d new SessionName(SESSIONNAME_WEEK_ONE_STRING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final SessionName SESSIONNAME_WEEK_TWO \u003d new SessionName(SESSIONNAME_WEEK_TWO_STRING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final SessionName SESSIONNAME_WEEK_THREE \u003d new SessionName(SESSIONNAME_WEEK_THREE_STRING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session SESSION_WEEK_ONE \u003d new Session(SESSIONNAME_WEEK_ONE, SESSIONDATE_WEEK_ONE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session SESSION_WEEK_TWO \u003d new Session(SESSIONNAME_WEEK_TWO, SESSIONDATE_WEEK_TWO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static final Session SESSION_WEEK_THREE \u003d new Session(SESSIONNAME_WEEK_THREE, SESSIONDATE_WEEK_THREE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private TypicalSessions() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns an {@code SessionList} with all the typical sessions."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static SessionList getTypicalSessionList(List\u003cStudent\u003e list) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList sessionList \u003d new SessionList(list);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session session : getTypicalSessions()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            sessionList.addSession(session);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns an {@code SessionList} with all the typical sessions."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static SessionList getTypicalSessionList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList sessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session session : getTypicalSessions()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            sessionList.addSession(session);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static List\u003cSession\u003e getTypicalSessions() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cSession\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        result.addAll(Arrays.asList(duplicateSession(TUT1), duplicateSession(TUT2),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                duplicateSession(TUT3), duplicateSession(LAB1), duplicateSession(LAB2)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static SessionList getTypicalSessionListMinusTut1() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SessionList sessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Session session : getTypicalSessionsMinusTut1()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            sessionList.addSession(session);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return sessionList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static List\u003cSession\u003e getTypicalSessionsMinusTut1() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(duplicateSession(TUT2), duplicateSession(TUT3),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                duplicateSession(LAB1), duplicateSession(LAB2)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static Session duplicateSession(Session session) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Session(session.getSessionName(), session.getSessionDate());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 6,
      "YuunoKun": 98,
      "erisjacey": 5
    }
  },
  {
    "path": "src/test/java/atas/testutil/TypicalStudents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_MATRICULATION_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_MATRICULATION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import atas.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.model.student.StudentList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"alice@u.nus.edu\").withMatriculation(\"A2395823W\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"johnd@u.nus.edu\").withMatriculation(\"A8473948R\").withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\").withMatriculation(\"A2345893J\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"heinz@u.nus.edu\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\").withMatriculation(\"A2837453G\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"cornelia@u.nus.edu\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\").withMatriculation(\"A2384576V\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"werner@u.nus.edu\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\").withMatriculation(\"A7984295F\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"lydia@u.nus.edu\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withMatriculation(\"A4958234S\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"anna@u.nus.edu\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withMatriculation(\"A5720936H\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"stefan@u.nus.edu\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withMatriculation(\"A6398734N\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withEmail(\"hans@u.nus.edu\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withMatriculation(VALID_MATRICULATION_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withMatriculation(VALID_MATRICULATION_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns an {@code StudentList} with all the typical students."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static StudentList getTypicalStudentList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        StudentList ab \u003d new StudentList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cStudent\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        result.addAll(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudentsMinusAlice() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static Student duplicateStudent(Student student) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return new Student(student.getName(), student.getMatriculation(), student.getEmail(), student.getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 24,
      "YuunoKun": 17,
      "erisjacey": 15,
      "-": 25
    }
  },
  {
    "path": "src/test/java/atas/testutil/TypicalTabNames.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " * A utility class containing a list of {@code Tab} objects to be used in tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class TypicalTabNames {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String STUDENTS_TAB_NAME \u003d \"students\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String SESSIONS_TAB_NAME \u003d \"sessions\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String CURRENT_SESSION_TAB_NAME \u003d \"current\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String MEMO_TAB_NAME \u003d \"memo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public static final String INVALID_TAB_NAME \u003d \"invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 11,
      "erisjacey": 1
    }
  },
  {
    "path": "src/test/java/atas/ui/TabTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "public class TabTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testGetIndex() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // actual index -\u003e true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(Tab.STUDENTS.getIndex().getZeroBased(), Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(Tab.SESSIONS.getIndex().getZeroBased(), Index.fromZeroBased(1).getZeroBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // zeroBased index but different values -\u003e false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertNotEquals(Tab.STUDENTS.getIndex(), Index.fromZeroBased(3).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertNotEquals(Tab.SESSIONS.getIndex(), Index.fromZeroBased(4).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // oneBased index but same values -\u003e false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertNotEquals(Tab.STUDENTS.getIndex(), Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertNotEquals(Tab.SESSIONS.getIndex(), Index.fromZeroBased(1).getOneBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // oneBased index and different values -\u003e false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertNotEquals(Tab.STUDENTS.getIndex(), Index.fromZeroBased(3).getOneBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertNotEquals(Tab.SESSIONS.getIndex(), Index.fromZeroBased(4).getOneBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testIsValid() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // valid tabs -\u003e true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(Tab.STUDENTS.isValid());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(Tab.SESSIONS.isValid());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(Tab.CURRENT.isValid());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(Tab.MEMO.isValid());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void testToDisplayName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(Tab.STUDENTS.toDisplayName(), \"students\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(Tab.SESSIONS.toDisplayName(), \"sessions\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(Tab.CURRENT.toDisplayName(), \"current session\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertEquals(Tab.MEMO.toDisplayName(), \"memo\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Tab studentsTab \u003d Tab.STUDENTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Tab sessionsTab \u003d Tab.SESSIONS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(studentsTab.equals(studentsTab));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(sessionsTab.equals(sessionsTab));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Tab studentsTabCopy \u003d Tab.STUDENTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(studentsTab.equals(studentsTabCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        Tab sessionsTabCopy \u003d Tab.SESSIONS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertTrue(sessionsTab.equals(sessionsTabCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(studentsTab.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(sessionsTab.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(studentsTab.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(sessionsTab.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nweiyue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        // different tabs -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "        assertFalse(studentsTab.equals(sessionsTab));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nweiyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nweiyue": 66,
      "CodingCookieRookie": 8,
      "erisjacey": 2
    }
  },
  {
    "path": "src/test/java/atas/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/atas/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package atas.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static atas.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import atas.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import atas.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "erisjacey": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003cfx:root type\u003d\"atas.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "erisjacey": 1
    }
  }
]
