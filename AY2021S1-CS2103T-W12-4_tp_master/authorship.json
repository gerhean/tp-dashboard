[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003eWelcome to Serenity! ðŸ‘‹\u003c/h1\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Serenity is a one-stop software for CS2101 tutors to manage your CS2101 classes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Check out our [User Guide](docs/UserGuide.md) to get started!"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 9,
      "ryanlimjr": 1,
      "-": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "# About Us "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "**Serenity** was developed by the team `W12-4`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "### Lim Chun Yong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cimg src\u003d\"/docs/images/chunyongg.png\" width\u003d\"200px\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[github](https://github.com/chunyongg) |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Role: Team Leader"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "### Lim Jia Rui Ryan"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cimg src\u003d\"/docs/images/ryanlimjr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[github](https://github.com/ryanlimjr) |"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "### Lau Xin Yee"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cimg src\u003d\"/docs/images/xinyee20.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[github](https://github.com/xinyee20) |"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "### Neo Rui En Maybelline"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cimg src\u003d\"/docs/images/successs404.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[github](https://github.com/successs404) |"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Responsibilities: Code quality"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "### Bu Wen Jin"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cimg src\u003d\"/docs/images/nijnxw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[github](https://github.com/Nijnxw) |"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Responsibilities: Scheduling and tracking, Integration"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 30,
      "-": 27
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the userâ€™s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()`â€‰â€”â€‰Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()`â€‰â€”â€‰Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()`â€‰â€”â€‰Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David â€¦â€‹` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the oppositeâ€‰â€”â€‰it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David â€¦â€‹` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Has a need to manage a significant number of students from various CS2101 classes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Has a need to keep track of the students\u0027 attendance throughout the semester"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Has a need to keep track of the students\u0027 participation throughout the semester"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Likes to keep track of the students\u0027 unanswered questions"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Likes to handle most administrative work via one platform"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Serenity can help assist the management of a CS2101 class "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "faster than a typical mouse/GUI driven app through easy reference and editing of class data."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Serenity consolidates administrative information on a Graphical User Interface for convenient viewing. "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Serenity gives the tutor ability to export data which can be used in other software, e.g. Microsoft Excel."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a â€¦â€‹                                    | I want to â€¦â€‹                     | So that I canâ€¦â€‹                                                        |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "successs404"
        },
        "content": "| -------- | ------------------------------------------ | -------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* * *`  | Tutor | Set up classes that I am teaching at the start of every semester | Perform administrative functions more efficiently |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* * *`  | Tutor | Mark attendance across every lesson | Grade effectively at the end of the term |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `*` | Tutor | Flag the attendance of a student | Be reminded to check up on this student after lesson |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* * *` | Tutor | View the attendance sheet for each class | Identify the students who did not attend a lesson |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `*` | Tutor | Export monthly attendance of all my classes as a CSV file | Submit attendance as a softcopy to the school |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* * *` | Tutor | Give a participation score to a student | Grade the student\u0027s participation |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | Use a participation system to keep track of participation | Grade effectively at the end of the term |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | Generate the average score for each student across each session | Have an additional set of data to cross reference to |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `*` | Tutor | Export participation scores of all my classes as a CSV file | Submit it as a softcopy for marks generation |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* * *` | Tutor | Add a question to the question list | Be reminded to answer the question after the lesson ends |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | Remove a question from the question list | Prevent the list from becoming too cluttered |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | View the list of questions for each class | Identify the questions that I have not answered in class |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Forgetful tutor | Mark the question that I have addressed as answered | Avoid re-addressing the same question in class |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | Import data of my students | Avoid manually entering the data |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | Access the list of commands easily on the software without referring to the user guide | Operate the software easily while teaching in class |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor who dislikes clutter | Use an app that does not take up too much screen space | Continue to teach the content effectively |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor who has other important things to remember | The list of commands to be as short as possible | Be productive trying to recall more important things for the lesson |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "(For all use cases below, the **System** is `Serenity` and the **Actor** is the `User`, unless specified otherwise)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Setting Up**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC01: Set up tutorial group"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - The tutorial group is added to the tutorial group list upon successful command."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - Students are added to the student list in the respective tutorial groups upon successful command."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User chooses a csv file to upload."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User adds the csv file in the same folder as the JAR file."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. Serenity reads the csv file."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    4. Serenity adds the tutorial groups and students to the respective lists."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Attendance Taking**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC02: For a tutorial group, mark all students present for a lesson"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - Each student is marked present for a lesson upon successful command."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to mark all students from a specific tutorial group present for a lesson."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User receives a confirmation message."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. System shows the updated attendance list for the lesson."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC03: Mark a student present or absent for a specific lesson"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - A specific student is marked present or absent for a lesson upon successful command."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to mark a student from a specific tutorial group present or absent for a lesson."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User receives a confirmation message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. System shows the updated attendance list for the lesson."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC04: For a tutorial group, view attendance of each student for every lesson"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - User can view the attendance list of a lesson for a specific tutorial class upon successful command."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to view the attendance list for a lesson of a specific tutorial class."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User receives a confirmation message."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. System shows the attendance list for the lesson."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Class Participation**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC05: Add class participation marks to a student"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - For a lesson, class participation marks for a specific student is added upon successful command."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to add class participation marks to a student."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User receives a confirmation message."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. System shows the updated class participation marks of the student."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC06: View average class participation score of all students in a tutorial group"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - User can view the average class participation score of all students in a tutorial group upon successful command."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to view the average class participation score of all students in a tutorial group."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User receives a confirmation message."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. System shows the average class participation score of all students in the tutorial group"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Addressing Questions**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC07: Add a question to a tutorial groupâ€™s question list"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - Question will be added into a question list upon successful command."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to create a new question for a tutorial group."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. System shows an updated list of questions."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC08: View all questions of a tutorial group"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - User can view the list of questions upon successful command."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to view the list of questions for a tutorial group."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. System shows the attendance list for the lesson."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "successs404"
        },
        "content": "2.  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 161,
      "xinyee20": 14,
      "successs404": 19,
      "-": 332
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "# Serenity - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "![Serenity Logo](images/logo.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "By: `Team Serenity` Since: `Aug 2020`"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "1. [Introduction](#introduction)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "2. [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "3. [About](#about)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "4. [Features](#features)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "   4.1. [Setup](#setup)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Setup classes at the start of a semester: `importCsv`](#setup-classes-at-the-start-of-a-semester-importcsv)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "   4.2. [Attendance Taking](#attendance-taking)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Mark attendance for a every student: `markAll`](#mark-attendance-for-every-student-markall)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Mark attendance for a single student: `mark`](#mark-attendance-for-a-single-student-mark)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Flag attendance for a single student: `flag`](#flag-attendance-for-a-single-student-flag)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [View attendance for a each class: `attendance`](#view-attendance-for-each-class-attendance)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Exporting of attendance to CSV: `exportAtt`](#exporting-of-attendance-to-csv-exportatt)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "   4.3. [Class Participation](#class-participation)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Awarding class participation marks: `award`](#awarding-class-participation-marks-award)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Viewing statistics of class participation `stats`](#viewing-statistics-of-class-participation-stats)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Exporting of class participation grades to CSV: `exportCp`](#exporting-of-class-participation-grades-to-csv-exportcp)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "   4.4 [Addressing Questions](#addressing-questions)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Adding a question: `addQn`](#adding-a-question-addqn)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Viewing all questions: `questions`](#viewing-all-questions-list)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Deleting a question: `deleteQn`](#deleting-a-question-deleteqn)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * [Marking a question as answered: `ansQn`](#marking-a-question-as-answered-ansqn)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "5. [FAQ](#faq)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "6. [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Welcome to the User Guide of **Serenity**!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Are you a tutor for CS2101, but annoyed at keeping track of attendance, questions and class participation grades on different "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "excel sheets for different classes? Fret not, our application, **Serenity**, will help keep you sane when doing the necessary "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "administrative work. **Serenity** is a desktop application that helps CS2101 tutors **manage their classes**. This  "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "application is optimized for use through a *Command Line Interface(CLI)*, meaning that you operate the application by "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "typing commands into a command box."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "This user guide serves to provide you with an in-depth documentation on how to set up and use our application. with that said"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "let\u0027s get [started](#quick-start)!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "2. Download the latest `Serenity.jar` from [here]()."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your AddressBook."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "## About"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "about goes here"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "### \u003cins\u003eSetup\u003c/ins\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Set up classes at the start of a semester: `importCsv`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "You can set up classes automatically by importing CSV data."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "1. Copy and paste CSV file into home folder. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "2. Enter `importCsv` in the command line."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "3. The program will update the classes and students for you."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "4. The program is now ready to assist you in managing your CS2101 class."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "---"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "### \u003cins\u003eAttendance Taking\u003c/ins\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Mark attendance for every student: `markAll`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Marks all students of a particular class for a single tutorial "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "session as present."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Format:  `markAll TUTORIAL_GROUP LESSON_NUMBER`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "* `markAll G04 1-1`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "* `markAll G09 7-2`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Mark attendance for a single student as absent: `mark`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Marks a student of a particular class for a "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "single tutorial session as absent."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Format: `mark TUTORIAL_GROUP LESSON_NUMBER NAME`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "*TIP*: Use `markAll` to mark all students as present first, then use"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "`mark` to mark just the students who are absent for a quick"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "and easy way to record attendance."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "* `mark G04 1-1 john`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "* `mark G09 7-2 ryan`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Flag attendance for a single student: `flag`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Flag attendance so you will be reminded to check again "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "at the end of class."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Format: `flag TUTORIAL_GROUP LESSON_NUMBER NAME`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * flag G04 1-1 john"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * flag G09 7-2 ryan"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### View attendance for each class: `attendance`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Provides a graphical view of all the student\u0027s "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "attendance for a particular lesson."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Format: `attendance TUTORIAL_GROUP LESSON_NUMBER`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * attendance G04 1-1"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * attendance G09 7-2"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Exporting of attendance to CSV: `exportAtt`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Export the attendance for a particular tutorial group "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "in a CSV file."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Format: `exportAtt TUTORIAL_GROUP`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "File will be saved where your JAR file is located, with the file name"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "`TUTORIAL_GROUP.csv`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * `exportAtt G04` saves the file as `G04.csv`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * `exportAtt G09` saves the file as `G09.csv`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "---"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "### \u003cins\u003eClass Participation\u003c/ins\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "This feature allows you to manage the class participation grades for each student in your classes."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Awarding class participation marks: `award`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "you can use this command to award class participation marks to a student from a specified tutorial group and tutorial "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "you wish to grade."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "`award NAME TUTORIAL_GROUP TUTORIAL_NUMBER MARKS`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "##### Example:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "If you wish to award a student participation marks, follow the steps below to learn how. In this example you will learn"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "how to award a student ,`Ryan`, from tutorial group `G04`, a class participation score of `4` for tutorial `3-1`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "Awarding class participation:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "1. Type `award Ryan G04 3-1 4`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "2. Press `enter` to execute the command "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Viewing statistics of class participation: `stats`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "you can use this command to view the average score for each student for a specific tutorial group and tutorial."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "`stats TUTORIAL_GROUP LESSON_NUMBER`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "##### Example:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "If you wish to view the average participation marks for tutorial group `GO9` and tutorial `7-2`, follow the steps below "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "to learn how. "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "Viewing the average class participation mark"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "1. Type `stats G09 7-2`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "2. Press `enter` to execute the command "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Exporting of class participation grades to CSV: `exportCp`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "You can use this command to export the class participation marks of a specified tutorial group into a CSV file."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "`exportcp TUTORIAL_GROUP`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "##### Example:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "Assuming you need to collate the class participation marks for tutorial group `GO7` into a CSV file for grading on a "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "different platform (i.e LuimiNUS). You can do the following steps"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Exporting class participation marks:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "1. Type `exportcp G07`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "2. Press `enter` to execute the command "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "---"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "### \u003cins\u003eAddressing Questions\u003c/ins\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Adding a question: `addQn`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Adds a question to the list of questions of a specified tutorial group."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "`addQn TUTORIAL_GROUP LESSON_NUMBER QUESTION_DESCRIPTION`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "##### Examples:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* `addQn G07 7-1 Could you elaborate on the marking scheme for OP1?`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* `addQn G07 7-1 What are the deadlines that students should take note of?`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Viewing all questions: `questions`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "View a list of all the questions from a specified tutorial group."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "`questions TUTORIAL_GROUP LESSON_NUMBER`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "##### Examples:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* `questions G07 7-1`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* `questions G10 5-2`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Deleting a question: `deleteQn`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Deletes the specific question from the list of questions of a specified tutorial group."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "`deleteQn TUTORIAL_GROUP LESSON_NUMBER INDEX`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* Deletes the question at the specified `INDEX`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* The index refers to the index number shown in the displayed question list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, â€¦â€‹"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "##### Examples:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* `deleteQn G07 7-1 1`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* `deleteQn G10 5-2 3`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Marking a question as answered: `ansQn` "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Marks the specified question from the list of questions of a specified tutorial group as answered."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "`ansQn TUTORIAL_GROUP LESSON_NUMBER INDEX`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* Marks the question at the specified `INDEX` as answered."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* The index refers to the index number shown in the displayed question list."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, â€¦â€‹"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "##### Examples:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* `ansQn G07 7-1 1`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "* `ansQn G10 5-2 3`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "successs404"
        },
        "content": "Add New Tutorial Group | For a tutorial group -\u003cbr\u003eFormat: `importCsv`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "successs404"
        },
        "content": "Mark/Unmark Attendance | For an individual student -\u003cbr\u003eFormat: `mark TUTORIAL_GROUP LESSON_NUMBER NAME`\u003cbr\u003eExample:`mark G04 1-2 ryan`\u003cbr\u003eFor every student in a tutorial class -\u003cbr\u003eFormat: `markAll TUTORIAL_GROUP LESSON_NUMBER`\u003cbr\u003eExample: `markAll G04 1-2`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "successs404"
        },
        "content": "Flag Attendance | For an individual student -\u003cbr\u003eFormat: `flag TUTORIAL_GROUP LESSON_NUMBER NAME`\u003cbr\u003eExample: `flag G04 1-2 ryan`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "successs404"
        },
        "content": "View Attendance | For a tutorial group -\u003cbr\u003eFormat: `attendance TUTORIAL_GROUP LESSON_NUMBER`\u003cbr\u003eExample: `attendance G04 1-2`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "successs404"
        },
        "content": "Export Attendance | For a tutorial group -\u003cbr\u003eFormat: `exportAtt TUTORIAL_GROUP`\u003cbr\u003eExample: `exportAtt G04`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "successs404"
        },
        "content": "Award Participation Score | For an individual student -\u003cbr\u003eFormat: `award TUTORIAL_GROUP LESSON_NUMBER NAME MARKS`\u003cbr\u003eExample: `award G04 1-2 ryan 3`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "successs404"
        },
        "content": "View Average Participation Score (across tutorial weeks) | For a tutorial group -\u003cbr\u003eFormat: `stats TUTORIAL GROUP LESSON_NUMBER`\u003cbr\u003eExample: `stats G04 1-2`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "successs404"
        },
        "content": "Export Participation Score | For a tutorial group -\u003cbr\u003eFormat: `exportCp TUTORIAL_GROUP`\u003cbr\u003eExample: `exportCp G04`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "successs404"
        },
        "content": "Add A Question | Across all tutorial groups -\u003cbr\u003eFormat: `addQn QUESTION_DESCRIPTION`\u003cbr\u003eExample: `addQn What are the deadlines that students should take note of?`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "successs404"
        },
        "content": "View All Questions | Across all tutorial groups -\u003cbr\u003eFormat: `list`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "successs404"
        },
        "content": "Delete A Question | Across all tutorial groups -\u003cbr\u003eFormat: `deleteQn INDEX`\u003cbr\u003eExample: `deleteQn 1`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "successs404"
        },
        "content": "Mark A Question As Answered | Across all tutorial groups -\u003cbr\u003eFormat: `ansQn INDEX`\u003cbr\u003eExample: `ansQn 1`"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 120,
      "chunyongg": 35,
      "ryanlimjr": 33,
      "successs404": 12,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        appParameters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 3,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * This is a workaround for the following error when MainApp is made the entry point of the application:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the LauncherHelper will check for the javafx.graphics"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * module to be present as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t find the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application to be the entry point of the application, we"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * avoid this issue."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 11,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.Serenity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.storage.JsonSerenityStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.storage.SerenityStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "        SerenityStorage serenityStorage \u003d new JsonSerenityStorage(userPrefs.getSerenityFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, serenityStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e The"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * data from the sample address book will be used instead if {@code storage}\u0027s address book is not found, or an"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ReadOnlySerenity serenity \u003d initSerenity(storage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new ModelManager(initialData, userPrefs, serenity);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private ReadOnlySerenity initSerenity(Storage storage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ReadOnlySerenity serenity;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "        serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "            Optional\u003cReadOnlySerenity\u003e serenityOptional \u003d storage.readSerenity();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (serenityOptional.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "successs404"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Serenity.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "successs404"
        },
        "content": "            serenity \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "successs404"
        },
        "content": "                serenityOptional.orElseGet(SampleDataUtil::getSampleSerenity);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "successs404"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": "                + \"Serenity.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "successs404"
        },
        "content": "            serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "successs404"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "successs404"
        },
        "content": "                + \"Serenity.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "successs404"
        },
        "content": "            serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "successs404"
        },
        "content": "            storage.saveSerenity(serenity);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "successs404"
        },
        "content": "            logger.info(\"Saving initial data of Serenity.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "successs404"
        },
        "content": "            logger.warning(\"Problem while saving to the file.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "successs404"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenity;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e The default file path {@code"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Config#DEFAULT_CONFIG_FILE} will be used instead if {@code configFilePath} is null."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a new {@code UserPrefs}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 19,
      "successs404": 42,
      "-": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A Serializable class that contains the GUI settings. Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s can be obtained from"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * this class\u003cbr\u003e These loggers have been configured to output messages to the console and a {@code .log} file by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained *AFTER* this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * initialization will have their logging level changed\u003cbr\u003e Logging levels for existing loggers will only be updated"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * if the logger with the same name is requested again from the LogsCenter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 13,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Serenity messages"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_GROUP_LISTED_OVERVIEW \u003d \"You are in tutorial group %1$s.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_GROUP_EMPTY \u003d \"No such group!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_LESSON_LISTED_OVERVIEW \u003d \"You are in tutorial group %1$s, lesson %2$s.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_STUDENT_EMPTY \u003d \"No such student!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Student already exists!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_LESSON_EMPTY \u003d \"no such lesson!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_NOT_VIEWING_A_GROUP \u003d \"Group not specified.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_NOT_VIEWING_A_LESSON \u003d \"Lesson not specified.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX \u003d \"The question index provided is invalid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "chunyongg": 6,
      "ryanlimjr": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 3,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what base"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * the other component is using for its index. However, after receiving the {@code Index}, that component can convert it"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 6,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CsvUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Reads CSV file that the tutor downloads from LUMINUS and writes JSON data to a new CSV file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class CsvUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * The path of the CSV file that the tutor downloads from LUMINUS."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Creates a CsvUtil object that manages CSV files."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param filePath The path of the CSV file that the tutor downloads from LUMINUS."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public CsvUtil(Path filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Reads CSV file that the tutor downloads from LUMINUS. The CSV file stores a list of {@code Student} that are in a"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * tutorial group."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Set\u003cStudent\u003e readStudentsFromCsv() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Set\u003cStudent\u003e students \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // create an instance of BufferedReader"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // using try with resource, Java 7 feature to close resources"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try (BufferedReader br \u003d Files.newBufferedReader(filePath,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            StandardCharsets.US_ASCII)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String line \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            // skip the first 4 lines"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d 4; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                line \u003d br.readLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            // loop until all lines are read"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                // use string.split to load a string array with the values from each line of"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                // the file, using a comma as the delimiter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String[] attributes \u003d line.split(\",\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                Student student \u003d createStudent(attributes);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                // adding order into ArrayList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                students.add(student);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                // read next line before looping"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                // if end of file reached, line would be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                line \u003d br.readLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Reads a set of the Lessons"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param studentsInfo Set of StudentInfo"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Set of Lessons"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Set\u003cLesson\u003e readLessonsFromCsv(Set\u003cStudentInfo\u003e studentsInfo) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Set\u003cLesson\u003e lessons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try (BufferedReader br \u003d Files.newBufferedReader(filePath,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            StandardCharsets.US_ASCII)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String categories \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            // skip the first 3 lines"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d 3; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                categories \u003d br.readLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //create classes"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String[] row \u003d categories.split(\",\"); //photos, name, userid, email, ...."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            int len \u003d row.length;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            for (int i \u003d 4; i \u003c len; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String lessonName \u003d computeClassName(i - 3); //start from 1"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                UniqueStudentInfoList newStudentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                newStudentsInfo.setStudentInfo(new ArrayList\u003c\u003e(studentsInfo));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                lessons.add(new Lesson(lessonName, newStudentsInfo));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Given a number, find out the class name E.g. 1 will return \"1-1\", 3 will return \"2-1\", 4 will return \"2-2\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param number Number of class, e.g. lesson 1,2,3"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Class name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static String computeClassName(int number) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int weekNumber \u003d number / 2;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        double remainder \u003d number % 2;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (remainder !\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //e.g. if number \u003d 3, expected weekNumber is 2."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            // 3/2 gives 1, which we add 1 to get us our desired result"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            weekNumber++;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int lessonNumber \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            remainder \u003d\u003d 0 ? 2 : 1; //e.g. if number \u003d 3, expected output is 2-1 i.e. lessonNumber \u003d 1"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String.format(\"%d-%d\", weekNumber, lessonNumber);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Creates a new set of StudentInfo from CSV"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @return Set of studentInfo"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Set\u003cStudentInfo\u003e readStudentsInfoFromCsv(Set\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Set\u003cStudentInfo\u003e studentsInfo \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentsInfo.add(new StudentInfo(student));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return studentsInfo;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Lesson createClass(String name, UniqueStudentInfoList studentsInfo) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return new Lesson(name, studentsInfo);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static Student createStudent(String[] metadata) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String name \u003d metadata[1];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentNumber \u003d metadata[2];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new Student(name, studentNumber);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    //ToDo: add a method to export JSON data into CSV"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "xinyee20": 11,
      "chunyongg": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)}, otherwise"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Writes given string to a file. Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found. If any"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a new file if it"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 8,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * \u003cbr\u003e Will return false for any other non-null string input e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                .startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 8,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns the Serenity object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @see seedu.address.model.Model#getSerenity()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "    ReadOnlySerenity getSerenity();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of groups."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of students from a group."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of lesson from a group."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the list of students info from a group-lesson."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cStudentInfo\u003e getStudentInfoList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the list of questions from a group-lesson."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuestionList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns the user prefs\u0027 serenity file path."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Path getSerenityFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 14,
      "chunyongg": 8,
      "ryanlimjr": 10,
      "successs404": 17,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.parser.SerenityParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final SerenityParser addressBookParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        addressBookParser \u003d new SerenityParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "            storage.saveSerenity(model.getSerenity());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Serenity \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ReadOnlySerenity getSerenity() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return model.getSerenity();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return model.getFilteredGroupList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return model.getStudentList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return model.getLessonList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e getStudentInfoList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return model.getStudentInfoList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return model.getQuestionList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return model.getSerenityFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 17,
      "chunyongg": 1,
      "ryanlimjr": 12,
      "successs404": 18,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 4,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddGrpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class AddGrpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addgrp\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \": Adds a new tutorial group. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + PREFIX_GRP + \"GRP \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + PREFIX_PATH + \"PATH \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tutorial group added: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This tutorial group already exists.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final Group toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Creates an AddGrpCommand to add the specified {@code Group}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public AddGrpCommand(Group group) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        toAdd \u003d group;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (model.hasGroup(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "        model.addGroup(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false, false, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "            || (other instanceof AddGrpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddGrpCommand) other).toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 1,
      "successs404": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddLsnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.LsnContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class AddLsnCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addlsn\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \": Adds a new lesson to a specified tutorial group. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + PREFIX_GRP + \"GRP \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + PREFIX_PATH + \"PATH \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New lesson for tutorial group %2$s added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson for tutorial group %1$s already exists.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_GROUP_DOES_NOT_EXIST \u003d \"Specified Tutorial Group does not exist!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final GrpContainsKeywordPredicate trgtGrp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Creates an AddGrpCommand to add the specified {@code Group}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public AddLsnCommand(String lesson, GrpContainsKeywordPredicate target) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        trgtGrp \u003d target;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        toAdd \u003d lesson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        model.updateFilteredGroupList(trgtGrp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new CommandException(MESSAGE_GROUP_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Group trgtGrp \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Lesson toAdd \u003d new Lesson(this.toAdd, trgtGrp.getStudents());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (trgtGrp.getLessons().contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_LESSON, toAdd, trgtGrp));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        trgtGrp.getLessons().add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        model.updateLessonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        model.updateFilteredLessonList(new LsnContainsKeywordPredicate(this.toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, trgtGrp), false, false, true, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                || (other instanceof AddLsnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddLsnCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddQnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_VIEWING_A_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_VIEWING_A_LESSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueQuestionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Adds a question to the question list of a specific tutorial group\u0027s lesson in Serenity."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class AddQnCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addqn\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \": Adds a new question to the specific lesson. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + PREFIX_QN + \"QUESTION\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New question added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"This question already exists.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final Question toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an AddQnCommand to add the specified {@code Lesson}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public AddQnCommand(Question question) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        toAdd \u003d question;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (model.getFilteredGroupList().size() !\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_VIEWING_A_GROUP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (model.getFilteredLessonList().size() !\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_VIEWING_A_LESSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Lesson uniqueLesson \u003d model.getFilteredLessonList().get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueQuestionList uniqueQuestionList \u003d uniqueLesson.getQuestionList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (uniqueQuestionList.contains(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof AddQnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddQnCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddScoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Participation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class AddScoreCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addscore\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s: \\nParticipation Score - %d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \": Gives a student in the class a participation score. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \"Parameters: \" + \" \" + \"SCORE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + PREFIX_STUDENT + \" NAME\" + \" \" + PREFIX_ID + \" STUDENT_NUMBER\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"2\" + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + PREFIX_STUDENT + \" Aaron Tan\" + \" \" + PREFIX_ID + \" e0123456\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private Student toAddScore;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Creates an AddScoreCommand to award the specified {@code Student} a participation score"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public AddScoreCommand(Student student, int score) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Specified student to add participation score"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        toAddScore \u003d student;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson uniqueLesson \u003d model.getFilteredLessonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        UniqueStudentInfoList uniqueStudentInfoList \u003d uniqueLesson.getStudentsInfo();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        ObservableList\u003cStudentInfo\u003e studentsInfo \u003d uniqueStudentInfoList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Update single student participation score"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        for (int i \u003d 0; i \u003c studentsInfo.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            StudentInfo studentInfo \u003d studentsInfo.get(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            boolean isCorrectStudent \u003d studentInfo.containsStudent(toAddScore);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            if (isCorrectStudent) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                Participation update \u003d studentInfo.getParticipation().setScore(score);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                StudentInfo updatedStudentInfo \u003d studentInfo.updateParticipation(update);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                uniqueStudentInfoList.setStudentInfo(studentInfo, updatedStudentInfo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                model.updateLessonList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                model.updateStudentInfoList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAddScore, score));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_STUDENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GROUP_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class AddStudentCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addstudent\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \": Adds a new Student to a specified tutorial group. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + PREFIX_GRP + \"GRP \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + PREFIX_STUDENT + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + PREFIX_ID + \"Student ID \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_GRP + \"G04\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \" \" + PREFIX_STUDENT + \"Ryan\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You added %s (%s) to tutorial group %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String studentName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final Predicate\u003cGroup\u003e predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Creates an AddStudentCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param studentName"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param studentId"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public AddStudentCommand(String studentName, String studentId, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(studentName, studentId, predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student student \u003d new Student(studentName, studentId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        model.updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //no such group exists"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new CommandException(MESSAGE_GROUP_EMPTY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Group targetGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (targetGroup.getStudents().contains(student)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        model.addStudentToGroup(student, predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String.format(MESSAGE_SUCCESS, studentName, studentId, model.getFilteredGroupList().get(0).getName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else if (obj instanceof AddStudentCommand) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            AddStudentCommand other \u003d (AddStudentCommand) obj;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return studentName.equals(other.studentName) \u0026\u0026 studentId.equals(other.studentId)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \u0026\u0026 predicate.equals(other.predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * The application should toggle to lesson data screen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final boolean isViewLsn;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * The application should toggle to group data screen"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final boolean isViewGrp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean viewLsn, boolean viewGrp) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.isViewLsn \u003d viewLsn;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.isViewGrp \u003d viewGrp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, and other fields set to their"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * default value."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isToggleLsnView() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return isViewLsn;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isToggleGrpView() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return isViewGrp;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 8,
      "ryanlimjr": 22,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DelGrpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DelGrpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delgrp\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \": Deletes an existing tutorial group. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \"Parameter: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + PREFIX_GRP + \"GRP \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_GRP + \"G04\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Tutorial group deleted: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final GrpContainsKeywordPredicate grpPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Creates a DelGrpCommand to add the specified {@code Group}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public DelGrpCommand(GrpContainsKeywordPredicate grpPredicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.grpPredicate \u003d grpPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group toDel \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!model.getSerenity().getGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "            for (Group group : model.getSerenity().getGroupList()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "                if (group.getName().equals(grpPredicate.getKeyword())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    toDel \u003d group;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (toDel \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_GROUP_EMPTY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "        model.deleteGroup(toDel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        model.updateFilteredGroupList(grpPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS, toDel));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DelQnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueQuestionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Deletes a question identified using it\u0027s displayed index from the specified group\u0027s lesson in Serenity."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DelQnCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delqn\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \": Deletes the question identified by the index number used in the displayed question list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_DELETE_QUESTION_SUCCESS \u003d \"[%1$s %2$s] Deleted Question: %3$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DelQnCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (model.getFilteredGroupList().size() !\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_VIEWING_A_GROUP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (model.getFilteredLessonList().size() !\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_VIEWING_A_LESSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Lesson uniqueLesson \u003d model.getFilteredLessonList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueQuestionList uniqueQuestionList \u003d uniqueLesson.getQuestionList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ObservableList\u003cQuestion\u003e lastViewedQuestionList \u003d uniqueQuestionList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastViewedQuestionList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question questionToDelete \u003d lastViewedQuestionList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.remove(questionToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_QUESTION_SUCCESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                model.getFilteredGroupList().get(0),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                uniqueLesson, questionToDelete));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof DelQnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DelQnCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DelStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GROUP_EMPTY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENT_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class DelStudentCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delstudent\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \": Removes a new Student from a specified tutorial group. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + PREFIX_GRP + \"GRP \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + PREFIX_STUDENT + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + PREFIX_ID + \"Student ID \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_GRP + \"G04\" + \" \" + PREFIX_STUDENT + \"Ryan\" + \" \" + PREFIX_ID"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"e1234567\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You removed %s (%s) from tutorial group %s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String studentName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final Predicate\u003cGroup\u003e predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Creates a DelStudentCommand to remove the specified {@code Student}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param studentName Name of Student"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param studentId Id of Student"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param predicate Group predicate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public DelStudentCommand(String studentName, String studentId, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(studentName, studentId, predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student student \u003d new Student(studentName, studentId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        model.updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ObservableList\u003cGroup\u003e groups \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (groups.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //no such group"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new CommandException(MESSAGE_GROUP_EMPTY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!groups.get(0).getStudents().contains(student)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //student does not exist"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new CommandException(MESSAGE_STUDENT_EMPTY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            model.removeStudentFromGroup(student, predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            model.updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(MESSAGE_SUCCESS, studentName, studentId, model.getFilteredGroupList().get(0).getName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else if (obj instanceof DelStudentCommand) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            DelStudentCommand other \u003d (DelStudentCommand) obj;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return studentName.equals(other.studentName) \u0026\u0026 studentId.equals(other.studentId)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \u0026\u0026 predicate.equals(other.predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteLsnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LSN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DeleteLsnCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"dellsn\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \": deletes a specified lesson from a specified tutorial group. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + PREFIX_GRP + \"GRP \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + PREFIX_LSN + \"PATH \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"lesson for tutorial group %2$s deleted: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_LESSON_NOT_FOUND \u003d \"This lesson for tutorial group %1$s does not exists.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_GROUP_DOES_NOT_EXIST \u003d \"Specified Tutorial Group does not exist!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final GrpContainsKeywordPredicate trgtGrp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String toDel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Creates an AddGrpCommand to add the specified {@code Group}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DeleteLsnCommand(String lesson, GrpContainsKeywordPredicate target) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        trgtGrp \u003d target;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        toDel \u003d lesson;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        model.updateFilteredGroupList(trgtGrp);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new CommandException(MESSAGE_GROUP_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Group trgtGrp \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Lesson toDel \u003d new Lesson(this.toDel, trgtGrp.getStudents());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!trgtGrp.getLessons().contains(toDel)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_LESSON_NOT_FOUND, toDel, trgtGrp));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        trgtGrp.getLessons().remove(toDel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        model.updateLessonList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toDel, trgtGrp), false, false, false, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                || (other instanceof AddLsnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u0026\u0026 toDel.equals(((DeleteLsnCommand) other).toDel));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit} edited with {@code"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * editPersonDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the corresponding field value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if modification is"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "         * attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 13,
      "successs404": 2,
      "-": 212
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 1,
      "successs404": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "successs404": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 1,
      "successs404": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MarkAttCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * Marks the attendance of a class or a student in the class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class MarkAttCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"markatt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s: \\nAttendance - present\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_ALL_SUCCESS \u003d \"Attendance of all students marked present!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \": Marks the attendance of all students / a student in a class. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \"all or \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + PREFIX_STUDENT + \" NAME\" + \" \" + PREFIX_ID + \" STUDENT_NUMBER\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"all\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \"or \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + PREFIX_STUDENT + \" Aaron Tan\" + \" \" + PREFIX_ID + \" e0123456\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private Student toMarkAtt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private boolean isWholeClass;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Creates an MarkAttCommand to mark all {@code Student} present"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public MarkAttCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Mark all students present"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        isWholeClass \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Creates an MarkAttCommand to mark the specified {@code Student} present"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public MarkAttCommand(Student student) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        isWholeClass \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Specified student to mark present"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        toMarkAtt \u003d student;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson uniqueLesson \u003d model.getFilteredLessonList().get(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        UniqueStudentInfoList uniqueStudentInfoList \u003d uniqueLesson.getStudentsInfo();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        ObservableList\u003cStudentInfo\u003e studentsInfo \u003d uniqueStudentInfoList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        if (!isWholeClass) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            // Mark single student attendance"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            for (int i \u003d 0; i \u003c studentsInfo.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                StudentInfo studentInfo \u003d studentsInfo.get(i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                boolean isCorrectStudent \u003d studentInfo.containsStudent(toMarkAtt);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                if (isCorrectStudent) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    Attendance update \u003d studentInfo.getAttendance().setAttendance(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    StudentInfo updatedStudentInfo \u003d studentInfo.updateAttendance(update);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    uniqueStudentInfoList.setStudentInfo(studentInfo, updatedStudentInfo);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    model.updateLessonList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    model.updateStudentInfoList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toMarkAtt));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Mark whole class attendance"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        for (StudentInfo each: studentsInfo) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            Attendance update \u003d each.getAttendance().setAttendance(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            StudentInfo updatedStudentInfo \u003d each.updateAttendance(update);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            uniqueStudentInfoList.setStudentInfo(each, updatedStudentInfo);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            model.updateLessonList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            model.updateStudentInfoList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ALL_SUCCESS));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnmarkAttCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class UnmarkAttCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unmarkatt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s: \\nAttendance - absent\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \": Unmarks the attendance of a student in a class. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + PREFIX_STUDENT + \" NAME\" + \" \" + PREFIX_ID + \" STUDENT_NUMBER\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            + PREFIX_STUDENT + \" Aaron Tan\" + \" \" + PREFIX_ID + \" e0123456\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private Student toUnmarkAtt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Creates an UnmarkAttCommand to mark the specified {@code Student} absent"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public UnmarkAttCommand(Student student) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Specified student to mark present"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        toUnmarkAtt \u003d student;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson uniqueLesson \u003d model.getFilteredLessonList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        UniqueStudentInfoList uniqueStudentInfoList \u003d uniqueLesson.getStudentsInfo();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        ObservableList\u003cStudentInfo\u003e studentsInfo \u003d uniqueStudentInfoList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Mark single student attendance"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        for (int i \u003d 0; i \u003c studentsInfo.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            StudentInfo studentInfo \u003d studentsInfo.get(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            boolean isCorrectStudent \u003d studentInfo.containsStudent(toUnmarkAtt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            if (isCorrectStudent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                Attendance update \u003d studentInfo.getAttendance().setAttendance(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                StudentInfo updatedStudentInfo \u003d studentInfo.updateAttendance(update);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                uniqueStudentInfoList.setStudentInfo(studentInfo, updatedStudentInfo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                model.updateLessonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                model.updateStudentInfoList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toUnmarkAtt));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewGrpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * Finds and lists all students and lessons in the group specifeied. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class ViewGrpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewgrp\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final Object MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \": Finds all students who are part of the specified group (case-insensitive) \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Parameters: GROUP \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_GRP + \" G04\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final GrpContainsKeywordPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ViewGrpCommand(GrpContainsKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private String getMessage(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return model.getFilteredGroupList().isEmpty()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                ? Messages.MESSAGE_GROUP_EMPTY"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                : String.format(Messages.MESSAGE_GROUP_LISTED_OVERVIEW, model.getFilteredGroupList().get(0).getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        model.updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return new CommandResult(this.getMessage(model), false, false, false, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "ryanlimjr": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewLsnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LSN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.LsnContainsKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Finds and lists the attendance and class participation of all the students from"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * a specified group and lesson. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class ViewLsnCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewlsn\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Object MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \": Finds the attendance and class participation of all students \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"from the specified lesson of a specific group (case-insensitive) and \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"Parameters: GROUP LESSON\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_GRP + \" G04 \" + PREFIX_LSN + \" 2-2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final GrpContainsKeywordPredicate grpPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final LsnContainsKeywordPredicate lsnPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a ViewLsnCommand to view the specified {@code Lesson}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ViewLsnCommand(GrpContainsKeywordPredicate grpPredicate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                          LsnContainsKeywordPredicate lsnPredicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.grpPredicate \u003d grpPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lsnPredicate \u003d lsnPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private String getMessage(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return model.getFilteredGroupList().isEmpty()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                ? Messages.MESSAGE_LESSON_EMPTY"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                : String.format(Messages.MESSAGE_LESSON_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                model.getFilteredGroupList().get(0).getName(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                model.getFilteredLessonList().get(0).getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        model.updateFilteredGroupList(grpPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.updateFilteredLessonList(lsnPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return new CommandResult(this.getMessage(model), false, false, true, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof ViewLsnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 grpPredicate.equals(((ViewLsnCommand) other).grpPredicate)) // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 lsnPredicate.equals(((ViewLsnCommand) other).lsnPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 60,
      "ryanlimjr": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "successs404": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                .tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 9,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddGrpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.commands.AddGrpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Parses input arguments and creates a new AddGrpCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class AddGrpCommandParser implements Parser\u003cAddGrpCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGrpCommand and returns an AddGrpCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public AddGrpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_PATH) || !argMultimap.getPreamble()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGrpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_GRP).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Path filePath \u003d Paths.get(argMultimap.getValue(PREFIX_PATH).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group group \u003d new Group(name, filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new AddGrpCommand(group);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 9,
      "successs404": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddLsnCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LSN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.commands.AddLsnCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * Parses input arguments and creates a new AddGrpCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class AddLsnCommandParser implements Parser\u003cAddLsnCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGrpCommand and returns an AddGrpCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public AddLsnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_LSN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_LSN) || !argMultimap.getPreamble()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                .isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLsnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String grpName \u003d argMultimap.getValue(PREFIX_GRP).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String lsnName \u003d argMultimap.getValue(PREFIX_LSN).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return new AddLsnCommand(lsnName, new GrpContainsKeywordPredicate(grpName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddQnCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.AddGrpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.AddQnCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new AddQnCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class AddQnCommandParser implements Parser\u003cAddQnCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddQnCommand and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * returns an AddQnCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public AddQnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_QN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QN) || !argMultimap.getPreamble()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                .isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGrpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String question \u003d argMultimap.getValue(PREFIX_QN).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question newQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new AddQnCommand(newQuestion);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddScoreCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.commands.AddScoreCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class AddScoreCommandParser implements Parser\u003cAddScoreCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddScoreCommand and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * returns a AddScoreCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public AddScoreCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                        .tokenize(userInput, PREFIX_STUDENT, PREFIX_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Optional\u003cStudent\u003e student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        int score;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STUDENT).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_ID).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            score \u003d SerenityParserUtil.parseScore(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            if (score \u003c 0 || score \u003e 5) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                throw new ParseException(\"Score should be between 0 to 5\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentName \u003d SerenityParserUtil.parseStudent(argMultimap.getValue(PREFIX_STUDENT).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentNumber \u003d SerenityParserUtil.parseStudentID(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            student \u003d Optional.ofNullable(new Student(studentName, studentNumber));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new AddScoreCommand(student.get(), score);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddScoreCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class AddStudentCommandParser implements Parser\u003cAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final ParseException addStudentCommandParserException \u003d new ParseException("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public AddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_STUDENT, PREFIX_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_STUDENT, PREFIX_ID) || !argMultimap.getPreamble()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw addStudentCommandParserException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] grpKeywordArray \u003d argMultimap.getValue(PREFIX_GRP).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] studentNameArray \u003d argMultimap.getValue(PREFIX_STUDENT).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] studentIdArray \u003d argMultimap.getValue(PREFIX_ID).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //if id or group keyword is more than 1, or if student name has more than 10 letters, throw exception"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesGrp \u003d grpKeywordArray.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesId \u003d studentIdArray.length \u003d\u003d 1 \u0026\u0026 studentIdArray[0].length() \u003d\u003d 8;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesStudentName \u003d studentNameArray.length \u003c\u003d 10;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!matchesGrp || !matchesId || !matchesStudentName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw addStudentCommandParserException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d String.join(\" \", studentNameArray);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d studentIdArray[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String grpName \u003d grpKeywordArray[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new AddStudentCommand(studentName, studentId, new GrpContainsKeywordPredicate(grpName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained. Keys are unique, but the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * of argument values may contain duplicate argument values, i.e. the same argument value can be inserted multiple times"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map previously contained a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this will return an empty"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * list. Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 11,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e e.g. {@code some"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * preamble text t/ 11.00 t/12.00 k/ m/ July} where prefixes are {@code t/ k/ m/}.\u003cbr\u003e 1. An argument\u0027s value can be an"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e 2. Leading and trailing whitespaces of an"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * argument value will be discarded.\u003cbr\u003e 3. An argument may be repeated and all its values will be accumulated e.g. the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * value of {@code t/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting from index {@code"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * fromIndex}. An occurrence is valid if there is a whitespace before {@code prefix}. Returns -1 if no such"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * occurrence can be found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0, this method returns -1"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * as there are no valid occurrences of \"p/\" with whitespace before it. However, if {@code argsString} \u003d \"e/hi"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *                        \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        prefixPositions"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}. The"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 25,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // Prefix definitions for Serenity"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Prefix PREFIX_GRP \u003d new Prefix(\"grp/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Prefix PREFIX_PATH \u003d new Prefix(\"path/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Prefix PREFIX_LSN \u003d new Prefix(\"lsn/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final Prefix PREFIX_STUDENT \u003d new Prefix(\"name/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final Prefix PREFIX_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Prefix PREFIX_QN \u003d new Prefix(\"qn/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "xinyee20": 2,
      "successs404": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DelGrpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.commands.DelGrpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Parses input arguments and creates a new AddGrpCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DelGrpCommandParser implements Parser\u003cDelGrpCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final ParseException delGrpCommandParserException \u003d new ParseException("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelGrpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public DelGrpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw delGrpCommandParserException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String[] grpKeyword \u003d argMultimap.getValue(PREFIX_GRP).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (grpKeyword.length \u003e 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw delGrpCommandParserException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new DelGrpCommand(new GrpContainsKeywordPredicate(grpKeyword[0]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DelQnCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.DelQnCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new DelQnCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DelQnCommandParser implements Parser\u003cDelQnCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DelQnCommand and returns a DelQnCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DelQnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new DelQnCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelQnCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DelStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.commands.DelStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class DelStudentCommandParser implements Parser\u003cDelStudentCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final ParseException deleteStudentCommandParserException \u003d new ParseException("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public DelStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_STUDENT, PREFIX_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_STUDENT, PREFIX_ID) || !argMultimap.getPreamble()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw deleteStudentCommandParserException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] grpKeywordArray \u003d argMultimap.getValue(PREFIX_GRP).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] studentNameArray \u003d argMultimap.getValue(PREFIX_STUDENT).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] studentIdArray \u003d argMultimap.getValue(PREFIX_ID).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //if id or group keyword is more than 1, or if student name has more than 10 letters, throw exception"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesGrp \u003d grpKeywordArray.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesId \u003d studentIdArray.length \u003d\u003d 1 \u0026\u0026 studentIdArray[0].length() \u003d\u003d 8;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesStudentName \u003d studentNameArray.length \u003c\u003d 10;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!matchesGrp || !matchesId || !matchesStudentName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw deleteStudentCommandParserException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d String.join(\" \", studentNameArray);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d studentIdArray[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String grpName \u003d grpKeywordArray[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new DelStudentCommand(studentName, studentId, new GrpContainsKeywordPredicate(grpName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand and returns a DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteLsnCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LSN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.commands.AddLsnCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.commands.DeleteLsnCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DeleteLsnCommandParser implements Parser\u003cDeleteLsnCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGrpCommand and returns an AddGrpCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DeleteLsnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_LSN);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_LSN) || !argMultimap.getPreamble()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                .isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLsnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String grpName \u003d argMultimap.getValue(PREFIX_GRP).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String lsnName \u003d argMultimap.getValue(PREFIX_LSN).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return new DeleteLsnCommand(lsnName, new GrpContainsKeywordPredicate(grpName));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                .tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                .setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                .setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                .setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty. If {@code tags}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * contain only one element which is an empty string, it will be parsed into a {@code Set\u003cTag\u003e} containing zero"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * tags."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 18,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand and returns a FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MarkAttCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.commands.MarkAttCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * Parses input arguments and creates a new MarkAttCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * Current support:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * markatt name/NAME id/STUDENT_NUMBER"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * markatt all"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class MarkAttCommandParser implements Parser\u003cMarkAttCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkAttCommand and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * returns a MarkAttCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public MarkAttCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                        .tokenize(args, PREFIX_STUDENT, PREFIX_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Optional\u003cStudent\u003e student;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Optional\u003cString\u003e keyToAll \u003d Optional.ofNullable(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STUDENT).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_ID).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            // If single student specified, get student"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentName \u003d SerenityParserUtil.parseStudent(argMultimap.getValue(PREFIX_STUDENT).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentNumber \u003d SerenityParserUtil.parseStudentID(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            student \u003d Optional.ofNullable(new Student(studentName, studentNumber));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new MarkAttCommand(student.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } else if (keyToAll.get().equals(\"all\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            // mark attendance of all students"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new MarkAttCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAttCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 6,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SerenityParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.AddGrpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.commands.AddLsnCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.AddQnCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.commands.AddScoreCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.commands.DelGrpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.DelQnCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.commands.DelStudentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.commands.DeleteLsnCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.commands.MarkAttCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.commands.UnmarkAttCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.ViewGrpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.ViewLsnCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class SerenityParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // Serenity"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "        case AddGrpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return new AddGrpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        case AddStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        case DelStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return new DelStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case AddLsnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new AddLsnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "        case DelGrpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return new DelGrpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case ViewGrpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new ViewGrpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case ViewLsnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new ViewLsnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        case MarkAttCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new MarkAttCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        case AddScoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new AddScoreCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        case UnmarkAttCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new UnmarkAttCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case AddQnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new AddQnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case DelQnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new DelQnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // AB3"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case DeleteLsnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new DeleteLsnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 25,
      "xinyee20": 12,
      "chunyongg": 11,
      "ryanlimjr": 10,
      "successs404": 10,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SerenityParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Participation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class SerenityParserUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Parses a {@code String student} into a {@code String}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the given {@code student} is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static String parseStudent(String name) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        if (!Student.isValidString(trimmedName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new ParseException(Student.STUDENT_NAME_ERROR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return trimmedName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Parses a {@code String id} into a {@code String}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the given {@code id} is invalid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static String parseStudentID(String id) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String trimmedId \u003d id.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        if (!Student.isValidStudentNumber(trimmedId)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new ParseException(Student.STUDENT_NUMBER_ERROR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return trimmedId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Parses {@code String inputScore} into an {@code int} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the specified score is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static int parseScore(String inputScore) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String trimmedScore \u003d inputScore.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        int score;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            score \u003d Integer.parseInt(trimmedScore);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return score;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new ParseException(Participation.SCORE_ERROR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses a {@code String question} into a {@code String}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static String parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return trimmedQuestion;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 14,
      "xinyee20": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnmarkAttCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.commands.UnmarkAttCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * Parses input arguments and creates a new UnMarkAttCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * Current support:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * unmarkatt name/NAME id/STUDENT_NUMBER"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class UnmarkAttCommandParser implements Parser\u003cUnmarkAttCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnmarkAttCommand and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * returns a UnmarkAttCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public UnmarkAttCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                        .tokenize(args, PREFIX_STUDENT, PREFIX_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Optional\u003cStudent\u003e student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STUDENT, PREFIX_ID)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmarkAttCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        studentName \u003d SerenityParserUtil.parseStudent(argMultimap.getValue(PREFIX_STUDENT).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        studentNumber \u003d SerenityParserUtil.parseStudentID(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        student \u003d Optional.ofNullable(new Student(studentName, studentNumber));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return new UnmarkAttCommand(student.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewGrpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.commands.ViewGrpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class ViewGrpCommandParser implements Parser\u003cViewGrpCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ParseException viewGrpCommandParserException \u003d new ParseException("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGrpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ViewGrpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw viewGrpCommandParserException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String[] grpKeyword \u003d argMultimap.getValue(PREFIX_GRP).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (grpKeyword.length \u003e 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw viewGrpCommandParserException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return new ViewGrpCommand(new GrpContainsKeywordPredicate(grpKeyword[0]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewLsnCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LSN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.ViewLsnCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.LsnContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class ViewLsnCommandParser implements Parser\u003cViewLsnCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ParseException viewLsnCommandParserException \u003d new ParseException("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewLsnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ViewLsnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_LSN);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_LSN) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw viewLsnCommandParserException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] grpKeyword \u003d argMultimap.getValue(PREFIX_GRP).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] lsnKeyword \u003d argMultimap.getValue(PREFIX_LSN).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (grpKeyword.length \u003e 1 || lsnKeyword.length \u003e 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw viewLsnCommandParserException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new ViewLsnCommand(new GrpContainsKeywordPredicate(grpKeyword[0]),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                new LsnContainsKeywordPredicate(lsnKeyword[0]));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}. {@code persons} must not contain duplicate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds a person to the address book. The person must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}. {@code target} must exist in the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * address book. The person identity of {@code editedPerson} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}. {@code key} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 10,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ArrayObservableList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ModifiableObservableListBase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A modifiable observable list to support rendering of different"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * set of information when navigating to different groups"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class ArrayObservableList\u003cE\u003e extends ModifiableObservableListBase\u003cE\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final List\u003cE\u003e delegate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Creates a generic ArrayObservableList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ArrayObservableList(ObservableList\u003cE\u003e list) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (E e : list) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            delegate.add(e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public E get(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return delegate.get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return delegate.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    protected void doAdd(int index, E element) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        delegate.add(index, element);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    protected E doSet(int index, E element) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return delegate.set(index, element);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    protected E doRemove(int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return delegate.remove(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Deletes the given person. The person must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds the given person. {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}. {@code target} must exist in the address"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * book. The person identity of {@code editedPerson} must not be the same as another existing person in the address"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Serenity \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns the user prefs\u0027 serenity file path."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Path getSerenityFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Sets the user prefs\u0027 serenity file path."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void setSerenityFilePath(Path serenityFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Replaces serenity data with the data in {@code serenity}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void setSerenity(ReadOnlySerenity serenity);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns the Serenity"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "successs404"
        },
        "content": "    ReadOnlySerenity getSerenity();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns true if a group with the same identity as {@code group} exists in serenity."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "successs404"
        },
        "content": "    boolean hasGroup(Group group);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Deletes the given group. The group must exist in serenity."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void deleteGroup(Group target);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds the given group. {@code group} must not already exist in serenity."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void addGroup(Group group);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds a Student to a Group"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void addStudentToGroup(Student student, Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes a Student from a Group."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void removeStudentFromGroup(Student student, Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Updates the filter of the filtered group list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Updates the student list when changing to another group of interest."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void updateStudentList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Updates the lesson list to filter when changing to another group of interest."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void updateLessonList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Updates the filter of the filtered lesson list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Updates the student info list to filter when changing to another lesson of interest."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void updateStudentInfoList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Updates the question list to filter when changing to another lesson of interest."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void updateQuestionList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the filtered group list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "successs404"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the student list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the lesson list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the filtered lesson list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the student info list"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cStudentInfo\u003e getStudentInfoList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the question list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuestionList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 41,
      "xinyee20": 1,
      "chunyongg": 33,
      "ryanlimjr": 22,
      "successs404": 34,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueLessonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueQuestionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueStudentList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final Serenity serenity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ArrayObservableList\u003cStudent\u003e students;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ArrayObservableList\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final FilteredList\u003cLesson\u003e filteredLessons;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ArrayObservableList\u003cStudentInfo\u003e studentsInfo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ArrayObservableList\u003cQuestion\u003e questions;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs and serenity."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ReadOnlySerenity serenity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, serenity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "            + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "            + \" and serenity \" + serenity);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.serenity \u003d new Serenity(serenity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "        filteredGroups \u003d new FilteredList\u003c\u003e(this.serenity.getGroupList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        students \u003d new ArrayObservableList\u003c\u003e(new UniqueStudentList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessons \u003d new ArrayObservableList\u003c\u003e(new UniqueLessonList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        filteredLessons \u003d new FilteredList\u003c\u003e(lessons);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        studentsInfo \u003d new ArrayObservableList\u003c\u003e(new UniqueStudentInfoList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        questions \u003d new ArrayObservableList\u003c\u003e(new UniqueQuestionList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "        filteredGroups \u003d new FilteredList\u003c\u003e(this.serenity.getGroupList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        students \u003d new ArrayObservableList\u003c\u003e(new UniqueStudentList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessons \u003d new ArrayObservableList\u003c\u003e(new UniqueLessonList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        filteredLessons \u003d new FilteredList\u003c\u003e(lessons);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        studentsInfo \u003d new ArrayObservableList\u003c\u003e(new UniqueStudentInfoList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        questions \u003d new ArrayObservableList\u003c\u003e(new UniqueQuestionList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new Serenity());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Serenity \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return userPrefs.getSerenityFilePath();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setSerenityFilePath(Path serenityFilePath) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(serenityFilePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "successs404"
        },
        "content": "        userPrefs.setSerenityFilePath(serenityFilePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setSerenity(ReadOnlySerenity serenity) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.serenity.resetData(serenity);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ReadOnlySerenity getSerenity() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenity;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenity.hasGroup(group);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "successs404"
        },
        "content": "        serenity.removeGroup(target);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "successs404"
        },
        "content": "        filteredGroups.clear();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "successs404"
        },
        "content": "        students.clear();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "successs404"
        },
        "content": "        lessons.clear();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "successs404"
        },
        "content": "        filteredLessons.clear();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "successs404"
        },
        "content": "        studentsInfo.clear();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "successs404"
        },
        "content": "        serenity.addGroup(group);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void addStudentToGroup(Student student, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(student, predicate);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!filteredGroups.isEmpty()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            students.add(student);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Group currentGroup \u003d filteredGroups.get(0);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            currentGroup.addStudentToGroup(student);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void removeStudentFromGroup(Student student, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(student, predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueStudentList students \u003d filteredGroups.get(0).getStudents();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!filteredGroups.isEmpty() \u0026\u0026 students.contains(student)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            students.remove(student);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Group currentGroup \u003d filteredGroups.get(0);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            currentGroup.removeStudentFromGroup(student);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireAllNonNull(predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.filteredGroups.setPredicate(predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        updateStudentList();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        updateLessonList();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void updateStudentList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!filteredGroups.isEmpty()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.students.setAll(this.filteredGroups.get(0).getStudentsAsUnmodifiableObservableList());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void updateLessonList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!filteredGroups.isEmpty()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.lessons.setAll(this.filteredGroups.get(0).getLessonsAsUnmodifiableObservableList());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(predicate);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredLessons.setPredicate(predicate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        updateStudentInfoList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        updateQuestionList();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateStudentInfoList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!filteredGroups.isEmpty() || !filteredLessons.isEmpty()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.studentsInfo.setAll(this.filteredLessons.get(0).getStudentsInfoAsUnmodifiableObservableList());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateQuestionList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!filteredGroups.isEmpty() || !filteredLessons.isEmpty()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.questions.setAll(this.filteredLessons.get(0).getQuestionListAsUnmodifiableObservableList());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return filteredGroups;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return filteredLessons;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e getStudentInfoList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return studentsInfo;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return questions;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of {@code"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * versionedAddressBook}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 58,
      "chunyongg": 26,
      "ryanlimjr": 38,
      "successs404": 68,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an unmodifiable view of the persons list. This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlySerenity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Unmodifiable view of a Serenity object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "public interface ReadOnlySerenity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an unmodifiable view of the group list. This list will not contain any duplicate groups."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    List\u003cGroup\u003e getGroupList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "successs404": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Path getSerenityFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Serenity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Wraps all data at the serenity level Duplicates are not allowed (by .isSameGroup comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Serenity implements ReadOnlySerenity {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final UniqueGroupList groups;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Serenity() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groups \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Creates a Serenity object using the Groups in the {@code toBeCopied}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Serenity(ReadOnlySerenity toBeCopied) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the contents of the group list with {@code groups}. {@code groups} must not contain duplicate groups."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.groups.setGroups(groups);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Resets the existing data of this {@code Serenity} with {@code newData}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void resetData(ReadOnlySerenity newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setGroups(newData.getGroupList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "    //// group-level operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns true if a group with the same identity as {@code group} exists in serenity."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return groups.contains(group);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds a group to the serenity. The group must not already exist in the serenity."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void addGroup(Group g) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groups.add(g);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the given group {@code group} in the list with {@code editedGroup}. {@code target} must exist in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * serenity. The group identity of {@code editedGroup} must not be the same as another existing group in serenity."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(editedGroup);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groups.setGroup(target, editedGroup);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes {@code key} from this {@code Serenity}. {@code key} must exist in serenity."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void removeGroup(Group key) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groups.remove(key);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return groups.asUnmodifiableObservableList().size() + \" groups\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return groups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "            || (other instanceof Serenity // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 groups.equals(((Serenity) other).groups));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return groups.hashCode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 9,
      "successs404": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Path serenityFilePath \u003d Paths.get(\"data\", \"serenity.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // Serenity"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenityFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setSerenityFilePath(Path serenityFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(serenityFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.serenityFilePath \u003d serenityFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "successs404": 11,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Attendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a {@code Student} attendance in a Class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private final boolean isPresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private final boolean isFlagged;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Creates a default Attendance object that is not flagged and not present"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Attendance() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.isFlagged \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.isPresent \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Creates an Attendance object that is not flagged and with presence marked accordingly"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param isPresent True if student is present and false if student is absent"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Attendance(boolean isPresent) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        this.isPresent \u003d isPresent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        this.isFlagged \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return Boolean.toString(isPresent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean getAttendance() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return isPresent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Attendance setAttendance(boolean isPresent) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance updatedAttendance \u003d new Attendance(isPresent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return updatedAttendance;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean getFlagged() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return isFlagged;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Attendance other \u003d (Attendance) obj;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return other.getAttendance() \u003d\u003d getAttendance() \u0026\u0026 other.getFlagged() \u003d\u003d getFlagged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 16,
      "chunyongg": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Group.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import seedu.address.commons.util.CsvUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a tutorial Group in serenity. Guarantees: details are present and not null, field values are validated,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final UniqueLessonList lessons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code Group}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name     A valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param filePath A valid filePath."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Group(String name, Path filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireAllNonNull(name, filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        CsvUtil util \u003d new CsvUtil(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        students.setStudents(new ArrayList\u003c\u003e(util.readStudentsFromCsv()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //todo: implement scores data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Set\u003cStudentInfo\u003e studentsInfo \u003d util.readStudentsInfoFromCsv(util.readStudentsFromCsv());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessons.setLessons(new ArrayList\u003c\u003e(util.readLessonsFromCsv(studentsInfo)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code Group}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name     A valid name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param students A list of students."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Group(String name, UniqueStudentList students) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireAllNonNull(name, students);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code Group}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name     A valid name."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param students A list of students."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param lessons  A list of tutorial lessons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Group(String name, UniqueStudentList students, UniqueLessonList lessons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(name, students, lessons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.lessons \u003d lessons;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public UniqueStudentList getStudents() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentsAsUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonsAsUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return lessons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public UniqueLessonList getLessons() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public UniqueLessonList getSortedLessons() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessons.sort(Comparator.comparing(Lesson::getName));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds a Student to a Group"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param student Student to be added"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void addStudentToGroup(Student student) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        addToStudentList(student);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        addToStudentListInLessons(student);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes a Student from the Group."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param student Student to be added"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void removeStudentFromGroup(Student student) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        removeStudentFromStudentListInLessons(student);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private void addToStudentList(Student student) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        students.add(student);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private void addToStudentListInLessons(Student student) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            StudentInfo newStudent \u003d new StudentInfo(student);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            UniqueStudentInfoList studentInfos \u003d lesson.getStudentsInfo();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            studentInfos.add(newStudent);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Lesson updatedLesson \u003d new Lesson(lesson.getName(), studentInfos);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            lessons.setLesson(lesson, updatedLesson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private void removeStudentFromStudentListInLessons(Student student) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            StudentInfo newStudent \u003d new StudentInfo(student);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            UniqueStudentInfoList studentInfos \u003d lesson.getStudentsInfo();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            studentInfos.remove(newStudent);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Lesson updatedLesson \u003d new Lesson(lesson.getName(), studentInfos);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            lessons.setLesson(lesson, updatedLesson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if both groups of the same name have at least one other identity field that is the same. This"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * defines a weaker notion of equality between two groups."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean isSameGroup(Group otherGroup) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (otherGroup \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return otherGroup !\u003d null"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 otherGroup.getName().equals(getName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 otherGroup.getStudents().equals(getStudents())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \u0026\u0026 otherGroup.getLessons().equals(getLessons());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if both groups have the same identity and data fields. This defines a stronger notion of equality"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * between two groups."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!(other instanceof Group)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group otherGroup \u003d (Group) other;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return otherGroup.getName().equals(getName())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 otherGroup.getStudents().equals(getStudents())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \u0026\u0026 otherGroup.getLessons().equals(getLessons());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return Objects.hash(name, students, lessons);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return String.format(\"Group %s\", name);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 3,
      "chunyongg": 66,
      "ryanlimjr": 23,
      "successs404": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GrpContainsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Tests that a {@code Group} matches the keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class GrpContainsKeywordPredicate implements Predicate\u003cGroup\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public GrpContainsKeywordPredicate(String string) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.keyword \u003d string;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean test(Group group) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return StringUtil.containsWordIgnoreCase(group.getName(), keyword);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof GrpContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 keyword.equals(((GrpContainsKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "ryanlimjr": 22,
      "successs404": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a tutorial class in serenity. Guarantees: details are present and not null, field values are validated,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String NAME_CONSTRAINT \u003d \"Class name cannot be empty\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String STUDENTS_INFO_CONSTRAINT \u003d \"Students information cannot be empty\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final UniqueStudentInfoList studentsInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final UniqueQuestionList questionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs a {@code Lesson}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param studentsInfo A valid list of studentInfo."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Lesson(String name, UniqueStudentInfoList studentsInfo) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireAllNonNull(name, studentsInfo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        checkArgument(isValidName(name), NAME_CONSTRAINT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        checkArgument(isValidStudentInfo(studentsInfo), STUDENTS_INFO_CONSTRAINT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        this.studentsInfo \u003d studentsInfo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs a {@code Lesson}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param studentsInfo A valid list of studentInfo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param questionList A list of questions."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Lesson(String name, UniqueStudentInfoList studentsInfo, UniqueQuestionList questionList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(name, studentsInfo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        checkArgument(isValidName(name), NAME_CONSTRAINT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        checkArgument(isValidStudentInfo(studentsInfo), STUDENTS_INFO_CONSTRAINT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentsInfo \u003d studentsInfo;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionList \u003d questionList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Constructs a {@code Lesson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param students"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Lesson(String name, UniqueStudentList students) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireAllNonNull(name, students);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        checkArgument(isValidName(name), NAME_CONSTRAINT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.studentsInfo \u003d this.generateStudentInfo(students.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.questionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private UniqueStudentInfoList generateStudentInfo(ObservableList\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        UniqueStudentInfoList studentInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (Student s : students) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            studentInfo.add(new StudentInfo(s, new Participation(), new Attendance()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return studentInfo;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean isValidName(String name) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return name.length() \u003e 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    boolean isValidStudentInfo(UniqueStudentInfoList studentsInfo) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return studentsInfo.size() \u003e 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public UniqueStudentInfoList getStudentsInfo() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return studentsInfo;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public UniqueQuestionList getQuestionList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return questionList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e getStudentsInfoAsUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return studentsInfo.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isSame(Lesson otherLsn) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return otherLsn.getName().equals(getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionListAsUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return questionList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!(obj instanceof Lesson)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Lesson otherClass \u003d (Lesson) obj;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return otherClass.getName().equals(getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 otherClass.getStudentsInfo().equals(getStudentsInfo())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 otherClass.getQuestionList().equals(getQuestionList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"Lesson %s\", name);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 48,
      "xinyee20": 5,
      "chunyongg": 48,
      "ryanlimjr": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/LsnContainsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Tests that a {@code Lesson} matches the keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class LsnContainsKeywordPredicate implements Predicate\u003cLesson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public LsnContainsKeywordPredicate(String string) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.keyword \u003d string;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean test(Lesson lesson) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return StringUtil.containsWordIgnoreCase(lesson.getName(), keyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof LsnContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 keyword.equals(((LsnContainsKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Participation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Participation {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String SCORE_ERROR \u003d \"Score must be a number\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final int score;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Participation() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.score \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Creates a Participation object containing the score of a student"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param score Score of Student"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Participation(int score) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return Integer.toString(score);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public int getScore() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Participation setScore(int score) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Participation updatedScore \u003d new Participation(score);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return updatedScore;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Participation other \u003d (Participation) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return other.getScore() \u003d\u003d getScore();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 14,
      "chunyongg": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a Lesson\u0027s question in Serenity. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * #isValidQuestion(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Questions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The first character of the question must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs an {@code Question}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        value \u003d question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 value.equals(((Question) other).getQuestion())); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a tutorial Group in serenity. Guarantees: details are present and not null, field values are validated,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String STUDENT_NAME_ERROR \u003d \"Name cannot be empty\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String STUDENT_NUMBER_ERROR \u003d \"Student number cannot be empty \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"and must follow the format \u0027eXXXXXXX\u0027 \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"where X is a digit from 0 to 9\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private String studentNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code Student}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name          A valid name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param studentNumber A valid student number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Student(String name, String studentNumber) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(name, studentNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        checkArgument(isValidString(name), STUDENT_NAME_ERROR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        checkArgument(isValidStudentNumber(studentNumber), STUDENT_NUMBER_ERROR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.studentNumber \u003d studentNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static boolean isValidString(String s) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return s.length() \u003e 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Checks whether String s is a valid Student number"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param s Student number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Whether String is valid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static boolean isValidStudentNumber(String s) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //8 digits long"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        s \u003d s.toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesLength \u003d s.length() \u003d\u003d 8;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesChar \u003d s.charAt(0) \u003d\u003d \u0027e\u0027;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!matchesChar || !matchesLength) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            System.out.println(s);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return s.length() \u003d\u003d 8 \u0026\u0026 s.charAt(0) \u003d\u003d \u0027e\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getStudentNumber() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return studentNumber;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return name + \" \" + studentNumber;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else if (obj instanceof Student) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Student other \u003d (Student) obj;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return other.getName().equals(getName()) \u0026\u0026 other.getStudentNumber().equals(getStudentNumber());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "chunyongg": 45,
      "successs404": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/StudentInfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a {@code Student} interaction with a Class Stores the {@code Student} {@code Participation} and {@code"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Attendance}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class StudentInfo {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final Student student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private final Participation participation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Creates a {@code Score} from a {@code Student} {@code Participation} and {@code"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *  * Attendance}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param participation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param attendance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public StudentInfo(Student student, Participation participation, Attendance attendance) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(student, participation, attendance);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Creates an empty {@code StudentInfo} from a {@code Student}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public StudentInfo(Student student) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.participation \u003d new Participation();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Student getStudent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return student;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Participation getParticipation() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return participation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Check whether the student in Student Info matches the specific student given in the input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param student Student to be checked"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @return Yes if student is correct, No if student is wrong"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public boolean containsStudent(Student student) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        boolean isCorrectStudent \u003d this.student.equals(student);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return isCorrectStudent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Marks the student present or absent for the class"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param updatedAttendance The attendance of the student for the lesson"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @return The updated Attendance"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public StudentInfo updateAttendance(Attendance updatedAttendance) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        StudentInfo updatedStudentInfo \u003d new StudentInfo(this.student, this.participation, updatedAttendance);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return updatedStudentInfo;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Updates the student participation score for the class"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param updatedScore The participation score of the student for the lesson"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @return The updated Participation object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public StudentInfo updateParticipation(Participation updatedScore) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        StudentInfo updatedStudentInfo \u003d new StudentInfo(this.student, updatedScore, this.attendance);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return updatedStudentInfo;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        StudentInfo other \u003d (StudentInfo) obj;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return student.equals(other.getStudent()) \u0026\u0026 participation.equals(other.getParticipation())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \u0026\u0026 attendance.equals(other.getAttendance());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .format(\"Name: %s, participation: %s, attendance: %s\", student, participation, attendance);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 37,
      "chunyongg": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/UniqueGroupList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateGroupException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.exceptions.GroupNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A list of groups that enforces uniqueness between its elements and does not allow nulls. A group is considered unique"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * by comparing using {@code Group#isSameGroup(Group)}. As such, adding and updating of groups uses"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Group#isSameGroup(Group) for equality so as to ensure that the group being added or updated is unique in terms of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * identity in the UniqueGroupList. However, the removal of a group uses Group#equals(Object) so as to ensure that the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * group with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": " * @see Group#isSameGroup(Group)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class UniqueGroupList implements Iterable\u003cGroup\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns true if the list contains an equivalent group as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean contains(Group toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameGroup);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds a group to the list. The group must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void add(Group toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the group {@code target} in the list with {@code editedGroup}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * The group identity of {@code editedGroup} must not be the same as another existing group in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireAllNonNull(target, editedGroup);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!target.isSameGroup(editedGroup) \u0026\u0026 contains(editedGroup)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "        internalList.set(index, editedGroup);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes the equivalent group from the list. The group must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void remove(Group toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setGroups(UniqueGroupList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the contents of this list with {@code groups}. {@code groups} must not contain duplicate groups."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireAllNonNull(groups);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!groupsAreUnique(groups)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "        internalList.setAll(groups);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ObservableList\u003cGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Iterator\u003cGroup\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "            || (other instanceof UniqueGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueGroupList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns true if {@code groups} contains only unique groups."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private boolean groupsAreUnique(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "successs404"
        },
        "content": "            for (int j \u003d i + 1; j \u003c groups.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "successs404"
        },
        "content": "                if (groups.get(i).isSameGroup(groups.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "successs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 10,
      "successs404": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/UniqueLessonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A list of Lessons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A Lesson is considered unique by comparing using {@code Lesson#equal(Object)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class UniqueLessonList implements Iterable\u003cLesson\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if the list contains an equivalent lesson as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean contains(Lesson toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Adds a lesson to the list. The lesson must not already exist in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void add(Lesson toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces the lesson {@code target} in the list with {@code lesson}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * The lesson identity of {@code lesson} must not be the same as another existing lesson in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!target.equals(editedLesson) \u0026\u0026 contains(editedLesson)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        internalList.set(index, editedLesson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Removes the equivalent lesson from the list. The lesson must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void remove(Lesson toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (internalList.get(i).isSame(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                internalList.remove(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces all the lessons from the list with a new list of lessons"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void lessons(UniqueLessonList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}. {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireAllNonNull(lessons);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!lessonsAreUnique(lessons)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        internalList.setAll(lessons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cLesson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void sort(Comparator\u003cLesson\u003e comparator) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        internalList.sort(comparator);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Iterator\u003cLesson\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                || (other instanceof UniqueLessonList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLessonList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if {@code lessons} contains only unique lessons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private boolean lessonsAreUnique(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            for (int j \u003d i + 1; j \u003c lessons.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                if (lessons.get(i).equals(lessons.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/UniqueQuestionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A list of Questions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A Question is considered unique by comparing using {@code Question#equal(Object)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class UniqueQuestionList implements Iterable\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if the list contains an equivalent question as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean contains(Question toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Adds a question to the list. The question must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add(Question toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the question {@code target} in the list with {@code question}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The question identity of {@code question} must not be the same as another existing question in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(target, editedQuestion);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!target.equals(editedQuestion) \u0026\u0026 contains(editedQuestion)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        internalList.set(index, editedQuestion);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Removes the equivalent question from the list. The question must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove(Question toRemove) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces all the questions from the list with a new list of questions"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions(UniqueQuestionList replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the contents of this list with {@code questionList}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code questionList} must not contain duplicate questions."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(questionList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!questionsAreUnique(questionList)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        internalList.setAll(questionList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cQuestion\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Iterator\u003cQuestion\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof UniqueQuestionList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueQuestionList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if {@code questionList} contains only unique questions."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private boolean questionsAreUnique(List\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (int i \u003d 0; i \u003c questionList.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c questionList.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                if (questionList.get(i).equals(questionList.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/UniqueStudentInfoList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateGroupException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateStudentInfoException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.exceptions.StudentInfoNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A list of Students Info that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A Student Info is considered unique by comparing using {@code StudentInfo#equal(Object)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class UniqueStudentInfoList implements Iterable\u003cStudentInfo\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ObservableList\u003cStudentInfo\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ObservableList\u003cStudentInfo\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if the list contains an equivalent student info as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean contains(StudentInfo toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Adds a student info to the list. The student info must not already exist in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add(StudentInfo toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateStudentInfoException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Removes the equivalent student info from the list. The student info must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove(StudentInfo toRemove) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new StudentInfoNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the student info {@code target} in the list with {@code editedStudentInfo}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The identity of {@code editedStudentInfo} must not be the same as another existing student info in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setStudentInfo(StudentInfo target, StudentInfo editedStudentInfo) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(target, editedStudentInfo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new StudentInfoNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!target.equals(editedStudentInfo) \u0026\u0026 contains(editedStudentInfo)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateStudentInfoException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        internalList.set(index, editedStudentInfo);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setStudentInfo(UniqueStudentInfoList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the contents of this list with {@code studentsInfo}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code studentsInfo} must not contain duplicate students info."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setStudentInfo(List\u003cStudentInfo\u003e studentsInfo) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(studentsInfo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!studentsInfoAreUnique(studentsInfo)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        internalList.setAll(studentsInfo);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Iterator\u003cStudentInfo\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof UniqueStudentInfoList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueStudentInfoList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if {@code studentsInfo} contains only unique students info."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private boolean studentsInfoAreUnique(List\u003cStudentInfo\u003e studentsInfo) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (int i \u003d 0; i \u003c studentsInfo.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c studentsInfo.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                if (studentsInfo.get(i).equals(studentsInfo.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/UniqueStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A list of Students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A Student is considered unique by comparing using {@code Student#equal(Object)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Adds a student to the list. The student must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code student}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * The student identity of {@code student} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!target.equals(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Removes the equivalent student from the list. The student must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces all the students from the list with a new list of students"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void students(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces the contents of this list with {@code students}. {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                if (students.get(i).equals(students.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/DuplicateGroupException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Signals that the operation will result in duplicate Groups (Groups are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DuplicateGroupException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public DuplicateGroupException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(\"Operation would result in duplicate groups\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "successs404": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/DuplicateLessonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * Signals that the operation will result in duplicate Lesson (Lessons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(\"Operation would result in duplicate Lesson!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/DuplicateQuestionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that the operation will result in duplicate Questions (Questions are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * if they have the same values)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DuplicateQuestionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DuplicateQuestionException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(\"Operation would result in duplicate Question!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/DuplicateStudentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(\"Operation would result in duplicate Student!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "ryanlimjr": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/DuplicateStudentInfoException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that the operation will result in duplicate Student Info"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * (Student Info are considered duplicates if they have the same student identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DuplicateStudentInfoException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DuplicateStudentInfoException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(\"Operation would result in duplicate Student Info!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/GroupNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Signals that the operation is unable to find the specified group."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class GroupNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 3,
      "successs404": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * Signals that the operation is unable to find the specified lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class LessonNotFoundException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/QuestionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that the operation is unable to find the specified question."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class QuestionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/StudentInfoNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that the operation is unable to find the specified student info."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class StudentInfoNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/StudentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "ryanlimjr": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a Person\u0027s address in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a Person\u0027s email in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 4,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a Person\u0027s name in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a Person in the address book. Guarantees: details are present and not null, field values are validated,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if modification is attempted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same. This"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if both persons have the same identity and data fields. This defines a stronger notion of equality"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * between two persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 7,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a Person\u0027s phone number in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls. A person is considered"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of persons uses"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is unique in terms of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds a person to the list. The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes the equivalent person from the list. The person must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the contents of this list with {@code persons}. {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 10,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 3,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a Tag in the address book. Guarantees: immutable; name is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.Serenity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueLessonList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueStudentList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static Group[] getSampleGroups() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Set\u003cStudentInfo\u003e studentsInfo \u003d getStudentInfoSet(new Student(\"John\", \"E0123456\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Student(\"James\", \"E02030303\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueStudentInfoList studentsInfoList \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        studentsInfoList.setStudentInfo(new ArrayList\u003c\u003e(studentsInfo));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Set\u003cStudent\u003e students \u003d getStudentSet(new Student(\"John\", \"E0123456\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Student(\"James\", \"E02030303\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueStudentList studentsList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        studentsList.setStudents(new ArrayList\u003c\u003e(students));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueLessonList lessonsList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Set\u003cLesson\u003e lessons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        lessons.add(new Lesson(\"1-1\", studentsInfoList));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Group[] {new Group(\"G04\", studentsList, lessonsList)};"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static ReadOnlySerenity getSampleSerenity() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Serenity sampleS \u003d new Serenity();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (Group sampleGroup : getSampleGroups()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "            sampleS.addGroup(sampleGroup);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return sampleS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static Set\u003cStudentInfo\u003e getStudentInfoSet(Student... students) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Set\u003cStudentInfo\u003e studentsInfo \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentsInfo.add(new StudentInfo(student));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return studentsInfo;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns a student set containing the list of strings given."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static Set\u003cStudent\u003e getStudentSet(Student... students) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return Arrays.stream(students)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "successs404"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns a class set containing the list of strings given."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static Set\u003cClass\u003e getClassSet(Class... classes) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return Arrays.stream(classes)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "successs404"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 16,
      "xinyee20": 5,
      "chunyongg": 14,
      "ryanlimjr": 1,
      "successs404": 28,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}. Returns {@code Optional.empty()} if storage file is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 6,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueLessonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueStudentList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Jackson-friendly version of {@link Group}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonAdaptedGroup {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts a given {@code Group} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonAdaptedGroup(Group source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        students.addAll(source.getStudents().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "            .map(JsonAdaptedStudent::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessons.addAll(source.getSortedLessons().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            .map(JsonAdaptedLesson::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts this Jackson-friendly adapted group object into the model\u0027s {@code Group} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted group."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Group toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String modelName \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "        final List\u003cStudent\u003e groupStudents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (JsonAdaptedStudent groupStudent : students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "            groupStudents.add(groupStudent.toModelType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        final UniqueStudentList modelStudents \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        modelStudents.setStudents(new ArrayList\u003c\u003e(groupStudents));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final UniqueStudentInfoList studentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final List\u003cLesson\u003e groupLessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (JsonAdaptedLesson groupLesson : lessons) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Lesson lessonItem \u003d new Lesson(groupLesson.getName(), studentsInfo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            groupLessons.add(lessonItem);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final UniqueLessonList modelLessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        modelLessons.setLessons(new ArrayList\u003c\u003e(groupLessons));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Group(modelName, modelStudents, modelLessons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 17,
      "chunyongg": 1,
      "ryanlimjr": 4,
      "successs404": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Jackson-friendly version of {@link Lesson}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given {@code name}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public JsonAdaptedLesson(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Converts a given {@code Lesson} into this Lesson for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public JsonAdaptedLesson(Lesson source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 6,
      "chunyongg": 1,
      "successs404": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 8,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final String studentNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given {@code name} and {@ocde studentNumber}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonAdaptedStudent(String name, String studentNumber) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.studentNumber \u003d studentNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        studentNumber \u003d source.getStudentNumber();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // add some validation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new Student(name, studentNumber);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerenityStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": " * A class to access Serenity data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class JsonSerenityStorage implements SerenityStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSerenityStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonSerenityStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Optional\u003cReadOnlySerenity\u003e readSerenity() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return readSerenity(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Similar to {@link #readSerenity()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Optional\u003cReadOnlySerenity\u003e readSerenity(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Optional\u003cJsonSerializableSerenity\u003e jsonSerenity \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "            filePath, JsonSerializableSerenity.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (jsonSerenity.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return Optional.of(jsonSerenity.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void saveSerenity(ReadOnlySerenity serenity) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "        saveSerenity(serenity, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Similar to {@link #saveSerenity(ReadOnlySerenity)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void saveSerenity(ReadOnlySerenity serenity, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(serenity);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSerenity(serenity), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        persons.addAll("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableSerenity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.Serenity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": " * An Immutable Serenity that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "@JsonRootName(value \u003d \"serenity\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonSerializableSerenity {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \"Group list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final List\u003cJsonAdaptedGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code JsonSerializableSerenity} with the given groups."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonSerializableSerenity(@JsonProperty(\"groups\") List\u003cJsonAdaptedGroup\u003e groups) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.groups.addAll(groups);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts a given {@code ReadOnlySerenity} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSerenity}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonSerializableSerenity(ReadOnlySerenity source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        groups.addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            source.getGroupList().stream().map(JsonAdaptedGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts this serenity object into the model\u0027s {@code Serenity} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Serenity toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Serenity serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (JsonAdaptedGroup jsonAdaptedGroup : groups) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "            Group group \u003d jsonAdaptedGroup.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (serenity.hasGroup(group)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "            serenity.addGroup(group);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenity;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "successs404": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/SerenityStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Serenity}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "public interface SerenityStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Path getSerenityFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns Serenity data as a {@link ReadOnlySerenity}. Returns {@code Optional.empty()} if storage file is not"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Optional\u003cReadOnlySerenity\u003e readSerenity() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @see #getSerenityFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Optional\u003cReadOnlySerenity\u003e readSerenity(Path filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Saves the given {@link ReadOnlySerenity} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param serenity cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void saveSerenity(ReadOnlySerenity serenity) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @see #saveSerenity(ReadOnlySerenity)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void saveSerenity(ReadOnlySerenity serenity, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 6,
      "successs404": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, SerenityStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // ---- Serenity ----//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Path getSerenityFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Optional\u003cReadOnlySerenity\u003e readSerenity() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void saveSerenity(ReadOnlySerenity serenity) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 13,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private SerenityStorage serenityStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage}, {@code UserPrefStorage} and {@code"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * SerenityStorage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        SerenityStorage serenityStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.serenityStorage \u003d serenityStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Serenity methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenityStorage.getSerenityFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Optional\u003cReadOnlySerenity\u003e readSerenity() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return readSerenity(serenityStorage.getSerenityFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Optional\u003cReadOnlySerenity\u003e readSerenity(Path filePath)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "successs404"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenityStorage.readSerenity(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void saveSerenity(ReadOnlySerenity serenity) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "        saveSerenity(serenity, serenityStorage.getSerenityFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void saveSerenity(ReadOnlySerenity serenity, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "        serenityStorage.saveSerenity(serenity, filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 8,
      "successs404": 32,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns UserPrefs data from storage. Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DataDisplayWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DataDisplayWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"DataDisplayWindow.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private GroupDataPanel groupDataPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private LessonDataPanel lessonDataPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private boolean isDisplayGroupData \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private StackPane dataPanelPlaceholder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Area where data is being displayed and managed depending on the commands of the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DataDisplayWindow(Logic logic) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        groupDataPanel \u003d new GroupDataPanel(logic.getLessonList(), logic.getStudentList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessonDataPanel \u003d new LessonDataPanel(logic.getStudentInfoList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Node node \u003d groupDataPanel.getRoot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        dataPanelPlaceholder.getChildren().add(groupDataPanel.getRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Toggle to lesson data view"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean toggleLsnView() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (isDisplayGroupData) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            dataPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            dataPanelPlaceholder.getChildren().add(lessonDataPanel.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            isDisplayGroupData \u003d !isDisplayGroupData;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Toggle to tutorial group data view"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean toggleGrpView() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!isDisplayGroupData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            dataPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            dataPanelPlaceholder.getChildren().add(groupDataPanel.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            isDisplayGroupData \u003d !isDisplayGroupData;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupDataPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class GroupDataPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"GroupDataPanel.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private LessonListPanel lessonListPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private StackPane lessonListPanelPlaceholder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Constructor for panel to display tutorial group datea"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public GroupDataPanel(ObservableList\u003cLesson\u003e lessonList, ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(studentList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessonListPanel \u003d new LessonListPanel(lessonList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessonListPanelPlaceholder.getChildren().add(lessonListPanel.getRoot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class LessonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"LessonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Creates a {@code StudentCard} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public LessonCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        name.setText(\"tutorial \" + lesson.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        LessonCard card \u003d (LessonCard) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u0026\u0026 lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonDataPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class LessonDataPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"LessonDataPanel.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private StudentInfoListPanel studentInfoListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private StackPane studentInfoListPanelPlaceholder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Constructor for panel to display Lesson data"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public LessonDataPanel(ObservableList\u003cStudentInfo\u003e studentInfoList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        studentInfoListPanel \u003d new StudentInfoListPanel(studentInfoList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        studentInfoListPanelPlaceholder.getChildren().add(studentInfoListPanel.getRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class LessonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"LessonListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private ListView\u003cLesson\u003e lessonListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public LessonListPanel(ObservableList\u003cLesson\u003e studentList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessonListView.setItems(studentList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        lessonListView.setCellFactory(listView -\u003e new LessonListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    class LessonListViewCell extends ListCell\u003cLesson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        protected void updateItem(Lesson lesson, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            super.updateItem(lesson, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (empty || lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setGraphic(new LessonCard(lesson, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where other JavaFX elements"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    // Ui parts relating to serentiy"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private DataDisplayWindow dataDisplayWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private StackPane dataDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        dataDisplayWindow \u003d new DataDisplayWindow(logic);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        dataDisplayPlaceholder.getChildren().add(dataDisplayWindow.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Switch to group data view if in lesson data view"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private void toggleLsnView() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        dataDisplayWindow.toggleLsnView();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Switch to lesson data view if in group data view"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private void toggleGrpView() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        dataDisplayWindow.toggleGrpView();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (commandResult.isToggleGrpView()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                toggleGrpView();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (commandResult.isToggleLsnView()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                toggleLsnView();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 3,
      "ryanlimjr": 30,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a consequence, UI"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * elements\u0027 variable names cannot be set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 4,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label studentNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Creates a {@code StudentCard} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        name.setText(student.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        studentNumber.setText(student.getStudentNumber());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "ryanlimjr": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentInfoCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * An UI component that displays information of a {@code StudentInfo}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class StudentInfoCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String FXML \u003d \"StudentInfoListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public final StudentInfo studentInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Label studentNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Label participation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a {@code StudentCard} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public StudentInfoCard(StudentInfo studentInfo, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentInfo \u003d studentInfo;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        name.setText(studentInfo.getStudent().getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        studentNumber.setText(studentInfo.getStudent().getStudentNumber());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        attendance.setText(studentInfo.getAttendance().getAttendance() ? \"Present\" : \"Absent\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        participation.setText(String.valueOf(studentInfo.getParticipation().getScore()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!(other instanceof StudentInfoCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        StudentInfoCard card \u003d (StudentInfoCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 studentInfo.equals(card.studentInfo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentInfoListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Panel containing the list of student information."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class StudentInfoListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String FXML \u003d \"StudentInfoListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentInfoListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private ListView\u003cStudentInfo\u003e studentInfoListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a {@code StudentInfoListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public StudentInfoListPanel(ObservableList\u003cStudentInfo\u003e studentInfoList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        studentInfoListView.setItems(studentInfoList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        studentInfoListView.setCellFactory(listView -\u003e new StudentInfoListPanel.StudentInfoListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code StudentInfo} using a {@code StudentInfoCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    class StudentInfoListViewCell extends ListCell\u003cStudentInfo\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        protected void updateItem(StudentInfo studentInfo, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            super.updateItem(studentInfo, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            if (empty || studentInfo \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                setGraphic(new StudentInfoCard(studentInfo, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String contentText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns after the user has"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * closed the alert dialog."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String headerText,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String contentText) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the application after the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * user has closed the alert dialog."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 9,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It contains a scene graph with"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the {@code fx:controller}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not specify the {@code"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 12,
      "-": 81
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DataDisplayWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cStackPane fx:id\u003d\"dataPanelPlaceholder\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 8
    }
  },
  {
    "path": "src/main/resources/view/GroupDataPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003cVBox fx:id\u003d\"studentList\" alignment\u003d\"CENTER\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003cVBox fx:id\u003d\"lessonList\" alignment\u003d\"CENTER\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cStackPane fx:id\u003d\"lessonListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 21
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/LessonDataPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cVBox fx:id\u003d\"lessonList\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003cStackPane fx:id\u003d\"studentInfoListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 12
    }
  },
  {
    "path": "src/main/resources/view/LessonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "ryanlimjr": 31
    }
  },
  {
    "path": "src/main/resources/view/LessonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003cListView fx:id\u003d\"lessonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "ryanlimjr": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Serenity\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cStackPane fx:id\u003d\"dataDisplayPlaceholder\" minWidth\u003d\"680.0\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "ryanlimjr": 13,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/StudentInfoListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cLabel fx:id\u003d\"studentNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentNumber\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cLabel fx:id\u003d\"attendance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendance\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cLabel fx:id\u003d\"participation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$participation\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 35,
      "xinyee20": 1
    }
  },
  {
    "path": "src/main/resources/view/StudentInfoListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    \u003cListView fx:id\u003d\"studentInfoListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "xinyee20": 1
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cLabel fx:id\u003d\"studentNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentNumber\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "ryanlimjr": 31
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "ryanlimjr": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException} if {@code"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException} if {@code"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 5,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CsvUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class CsvUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void computeClassNameTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] expectedResults \u003d new String[] {\"1-1\", \"1-2\", \"2-1\", \"2-2\", \"3-1\", \"3-2\", \"4-1\", \"4-2\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"5-1\", \"5-2\", \"6-1\", \"6-2\", \"7-1\", \"7-2\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"8-1\", \"8-2\", \"9-1\", \"9-2\", \"10-1\", \"10-2\", \"11-1\", \"11-2\", \"12-1\", \"12-2\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int input \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (String expectedResult : expectedResults) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            assertTrue(seedu.address.commons.util.CsvUtil.computeClassName(input)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                .equals(expectedResults[input - 1]));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            input++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "chunyongg": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.storage.JsonSerenityStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonSerenityStorage serenityStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new JsonSerenityStorage(temporaryFolder.resolve(\"serenity.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, serenityStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonSerenityStorage serenityStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new JsonSerenityStorage(temporaryFolder.resolve(\"ioExceptionSerenity.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, serenityStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e - the feedback message is equal to {@code"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * expectedMessage} \u003cbr\u003e - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getSerenity());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is thrown \u003cbr\u003e - the resulting error"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * message is equal to {@code expectedMessage} \u003cbr\u003e - the internal model manager state is the same as that in {@code"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 12,
      "successs404": 8,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": " * A Model stub that contains a single person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        personsAdded.add(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chunyongg": 6,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGrpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.Serenity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "class AddGrpCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddGrpCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute_groupAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ModelStubAcceptingGroupAdded modelStub \u003d new ModelStubAcceptingGroupAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "        CommandResult commandResult \u003d new AddGrpCommand(validGroup).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(String.format(AddGrpCommand.MESSAGE_SUCCESS, validGroup), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(Arrays.asList(validGroup), modelStub.groupsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute_duplicateGroup_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "        AddGrpCommand addGrpCommand \u003d new AddGrpCommand(validGroup);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithGroup(validGroup);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "            AddGrpCommand.MESSAGE_DUPLICATE_GROUP, () -\u003e addGrpCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group groupA \u003d new GroupBuilder().withName(\"G04\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group groupB \u003d new GroupBuilder().withName(\"G05\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "        AddGrpCommand addGroupACommand \u003d new AddGrpCommand(groupA);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "        AddGrpCommand addGroupBCommand \u003d new AddGrpCommand(groupB);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertTrue(addGroupACommand.equals(addGroupACommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "        AddGrpCommand addG04CommandCopy \u003d new AddGrpCommand(groupA);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertTrue(addGroupACommand.equals(addG04CommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertFalse(addGroupACommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertFalse(addGroupACommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // different group -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertFalse(addGroupACommand.equals(addGroupBCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void setSerenityFilePath(Path serenityFilePath) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void setSerenity(ReadOnlySerenity serenity) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public ReadOnlySerenity getSerenity() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void addGroup(Group group) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public void updateStudentList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public void updateLessonList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public void updateStudentInfoList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public void updateQuestionList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        public void addStudentToGroup(Student student, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        public void removeStudentFromGroup(Student student, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public ObservableList\u003cStudentInfo\u003e getStudentInfoList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public ObservableList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * A Model stub that contains a single group."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private class ModelStubWithGroup extends AddGrpCommandTest.ModelStub {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "successs404"
        },
        "content": "        private final Group group;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ModelStubWithGroup(Group group) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "successs404"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "successs404"
        },
        "content": "            this.group \u003d group;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "successs404"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return this.group.isSameGroup(group);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * A Model stub that always accept the group being added."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private class ModelStubAcceptingGroupAdded extends AddGrpCommandTest.ModelStub {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "successs404"
        },
        "content": "        final ArrayList\u003cGroup\u003e groupsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "successs404"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return groupsAdded.stream().anyMatch(group::isSameGroup);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void addGroup(Group group) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "successs404"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "successs404"
        },
        "content": "            groupsAdded.add(group);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public ReadOnlySerenity getSerenity() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return new Serenity();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 33,
      "chunyongg": 14,
      "ryanlimjr": 27,
      "successs404": 236
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddQnCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.testutil.TypicalQuestions.QUESTION_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.testutil.TypicalQuestions.QUESTION_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class AddQnCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void constructor_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddQnCommand(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void execute_questionAcceptedByModel_addQnSuccessful() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: assertEquals upon successful adding of Question"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void execute_duplicateQuestion_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: assertThrows when adding a duplicate Question"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        AddQnCommand addQnACommand \u003d new AddQnCommand(QUESTION_1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        AddQnCommand addQnBCommand \u003d new AddQnCommand(QUESTION_2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(addQnACommand.equals(addQnACommand));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        AddQnCommand addQnACommandCopy \u003d new AddQnCommand(QUESTION_1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(addQnACommandCopy.equals(addQnACommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(addQnACommand.equals(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(addQnACommand.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // different group -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(addQnACommand.equals(addQnBCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddScoreCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "class AddScoreCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddScoreCommand(null, 2));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_addScoreOutOfRange_failure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_addScore_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GROUP_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.testutil.GroupPredicateStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class AddStudentCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(\"\", \"\", null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null, \"\", new GroupPredicateStub()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(\"\", null, new GroupPredicateStub()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null, null, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void execute_missingGroup() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ModelStubWithoutGroup modelStub \u003d new ModelStubWithoutGroup();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Predicate\u003cGroup\u003e pred \u003d new GroupPredicateStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand command \u003d new AddStudentCommand(\"Jon\", \"e1234567\", pred);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            MESSAGE_GROUP_EMPTY, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void execute_duplicateStudent() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Group stubGroup \u003d new GroupBuilder().withName(\"G07\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .withStudents("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                new Student(\"Freddie\", \"e0000000\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                new Student(\"June\", \"e0101011\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            ).withClasses("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"4.2\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"5.1\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"5.2\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"6.1\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            ).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueGroupList groupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        groupList.add(stubGroup);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        FilteredList\u003cGroup\u003e filteredList \u003d new FilteredList\u003c\u003e(groupList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ModelStubWithGroup modelStub \u003d new ModelStubWithGroup(filteredList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Predicate\u003cGroup\u003e pred \u003d new GroupPredicateStub();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand command \u003d new AddStudentCommand(\"Freddie\", \"e0000000\", pred);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            MESSAGE_DUPLICATE_STUDENT, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d \"John\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d \"e1234567\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Predicate\u003cGroup\u003e pred \u003d new GroupPredicateStubWithGroupName(\"G04\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand first \u003d new AddStudentCommand(studentName, studentId, pred);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand second \u003d new AddStudentCommand(studentName,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            studentId, pred);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand differentStudentName \u003d new AddStudentCommand(\"J\", studentId, pred);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand differentStudentId \u003d new AddStudentCommand(studentName, \"e111\", pred);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand differentPredicate \u003d new AddStudentCommand(studentName, studentId,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new GroupPredicateStubWithGroupName(\"G05\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //same values -\u003e return true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(second));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //different values -\u003e return false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentStudentName));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentStudentId));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentPredicate));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A Model stub with a group"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "class ModelStubWithGroup extends ModelStub {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    ModelStubWithGroup(FilteredList\u003cGroup\u003e filteredList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.filteredGroups \u003d filteredList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return filteredGroups;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A Model stub that does not contain any group"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "class ModelStubWithoutGroup extends ModelStub {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new UniqueGroupList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A GrpContainsKeywordPredicate stub"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "class GroupPredicateStubWithGroupName implements Predicate\u003cGroup\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    GroupPredicateStubWithGroupName(String keyword) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean test(Group group) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            || (obj instanceof GrpContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \u0026\u0026 keyword.equals(((GroupPredicateStubWithGroupName) obj).keyword)); // state check"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, true, false)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, true, false)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, true, false).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, true, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "ryanlimjr": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Valid descriptions for Serenity"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_GRP_GROUP_A \u003d \"G04\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_GRP_GROUP_B \u003d \"G05\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Path VALID_PATH_GROUP_A \u003d Paths.get(\"LUMINUS_GROUP_A.csv\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Path VALID_PATH_GROUP_B \u003d Paths.get(\"LUMINUS_GROUP_B.csv\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_QN_A \u003d \"What is the deadline for the report?\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_QN_B \u003d \"When is the consultation held?\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String GRP_DESC_GROUP_A \u003d \" \" + PREFIX_GRP + VALID_GRP_GROUP_A;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String GRP_DESC_GROUP_B \u003d \" \" + PREFIX_GRP + VALID_GRP_GROUP_B;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String PATH_DESC_GROUP_A \u003d \" \" + PREFIX_PATH + VALID_PATH_GROUP_A;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String PATH_DESC_GROUP_B \u003d \" \" + PREFIX_PATH + VALID_PATH_GROUP_B;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String QN_DESC_GROUP_A \u003d \" \" + PREFIX_QN + VALID_QN_A;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String QN_DESC_GROUP_B \u003d \" \" + PREFIX_QN + VALID_QN_B;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String INVALID_QN_DESC \u003d \" \" + PREFIX_QN; // empty string not allowed in questions"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // ToDo: add invalid descriptions for Serenity"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e - the returned {@link CommandResult} matches {@code"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * expectedCommandResult} \u003cbr\u003e - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)} that takes a string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * {@code expectedMessage}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e - a {@code CommandException} is thrown \u003cbr\u003e - the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * CommandException message matches {@code expectedMessage} \u003cbr\u003e - the address book, filtered person list and"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the {@code"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * model}\u0027s address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 19,
      "chunyongg": 10,
      "successs404": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DelStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GROUP_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENT_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.testutil.GroupPredicateStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class DelStudentCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DelStudentCommand(\"\", \"\", null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DelStudentCommand(null, \"\", new GroupPredicateStub()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DelStudentCommand(\"\", null, new GroupPredicateStub()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DelStudentCommand(null, null, null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void execute_missingGroup() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ModelStubWithoutGroup modelStub \u003d new ModelStubWithoutGroup();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Predicate\u003cGroup\u003e pred \u003d new GroupPredicateStub();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand command \u003d new DelStudentCommand(\"Jon\", \"e1234567\", pred);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            MESSAGE_GROUP_EMPTY, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void execute_missingStudent() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Group stubGroup \u003d new GroupBuilder().withName(\"G07\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .withStudents("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                new Student(\"Freddie\", \"e0000000\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                ).withClasses("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"4.2\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"5.1\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"5.2\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                \"6.1\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            ).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueGroupList groupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        groupList.add(stubGroup);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        FilteredList\u003cGroup\u003e filteredList \u003d new FilteredList\u003c\u003e(groupList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ModelStubGroup modelStub \u003d new ModelStubGroup(filteredList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        GroupPredicateStub pred \u003d new GroupPredicateStub();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand command \u003d new DelStudentCommand(\"June\", \"e1234567\", pred);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            MESSAGE_STUDENT_EMPTY, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d \"John\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d \"e1234567\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        GroupPredicateStub pred \u003d new GroupPredicateStub();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand first \u003d new DelStudentCommand(studentName, studentId, pred);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand second \u003d new DelStudentCommand(studentName, studentId, pred);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand differentName \u003d new DelStudentCommand(\"James\", studentId, pred);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand differentId \u003d new DelStudentCommand(studentName, \"e7654321\", pred);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand differentPred \u003d new DelStudentCommand(studentName, studentId, new GroupPredicateStub());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //same values -\u003e return true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(second));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //different values -\u003e return false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentId));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentPred));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A Model stub with a group"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "class ModelStubGroup extends ModelStub {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    ModelStubGroup(FilteredList\u003cGroup\u003e filteredList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.filteredGroups \u003d filteredList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return filteredGroups;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chunyongg": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for {@code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_validIndexfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "chunyongg": 2,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteLsnCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "class DeleteLsnCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but smaller than size of address book"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "ryanlimjr": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "ryanlimjr": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MarkAttCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "class MarkAttCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_markStudent_success() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_markAllStudent_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnmarkAttCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "class UnmarkAttCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UnmarkAttCommand(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_unmarkStudent_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewGrpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "class ViewGrpCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddGrpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PATH_DESC_GROUP_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRP_GROUP_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATH_GROUP_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.commands.AddGrpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class AddGrpCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private AddGrpCommandParser parser \u003d new AddGrpCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGrpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // missing grp prefix"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertParseFailure(parser, VALID_GRP_GROUP_B + PATH_DESC_GROUP_B, expectedMessage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // missing path prefix"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertParseFailure(parser, PATH_DESC_GROUP_B + VALID_PATH_GROUP_B, expectedMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // ToDo: add invalid grp and path codes here"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "successs404": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddQnCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QN_DESC_GROUP_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QN_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.logic.commands.AddQnCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class AddQnCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private AddQnCommandParser parser \u003d new AddQnCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QN_A);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertParseSuccess(parser, QN_DESC_GROUP_A, new AddQnCommand(expectedQuestion));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddQnCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // assertParseFailure(parser, VALID_QN_A, expectedMessage); // missing prefix"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // assertParseFailure(parser, INVALID_QN_DESC, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class AddStudentCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private AddStudentCommandParser parser \u003d new AddStudentCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void parse_missingArguments() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String missingGroup \u003d PREFIX_STUDENT + \"John\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String missingStudent \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String missingId \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_STUDENT + \"John\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String doubleGroup \u003d PREFIX_GRP + \"G04 G05\" + \" \" + PREFIX_STUDENT + \"John\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String doubleId \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_STUDENT + \"John\" + \" \" + PREFIX_ID + \"e1234567 e7654321\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, missingGroup, expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, missingStudent, expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, missingId, expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, doubleGroup, expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, doubleId, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void parse_successfulArguments() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d \"John\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d \"e1234567\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String groupName \u003d \"G04\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String args \u003d \" \" + PREFIX_GRP + groupName + \" \" + PREFIX_STUDENT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            + studentName + \" \" + PREFIX_ID + studentId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand result \u003d new AddStudentCommand(studentName, studentId,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new GrpContainsKeywordPredicate(groupName));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseSuccess(parser, args, result);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final SerenityParser parser \u003d new SerenityParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void parseCommand_addGrp() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // ToDo: test add grp parsing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "successs404": 5,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues} and only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created equals to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message equals to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DelStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.logic.commands.DelStudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.GrpContainsKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class DelStudentCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private DelStudentCommandParser parser \u003d new DelStudentCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void parse_missingArguments() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String missingGroup \u003d PREFIX_STUDENT + \"John\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String missingStudent \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String missingId \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_STUDENT + \"John\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String doubleGroup \u003d PREFIX_GRP + \"G04 G05\" + \" \" + PREFIX_STUDENT + \"John\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String doubleId \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_STUDENT + \"John\" + \" \" + PREFIX_ID + \"e1234567 e7654321\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, missingGroup, expectedMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, missingStudent, expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, missingId, expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, doubleGroup, expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, doubleId, expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void parse_successfulArguments() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d \"John\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d \"e1234567\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String groupName \u003d \"G04\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String args \u003d \" \" + PREFIX_GRP + groupName + \" \" + PREFIX_STUDENT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            + studentName + \" \" + PREFIX_ID + studentId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand result \u003d new DelStudentCommand(studentName, studentId,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new GrpContainsKeywordPredicate(groupName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseSuccess(parser, args, result);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations outside of the DeleteCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * code. For example, inputs \"1\" and \"1 abc\" take the same path through the DeleteCommand, and therefore we test only"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * one of them. The path variation for those two cases occur inside the ParserUtil, and therefore should be covered by"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 4,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteLsnCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "class DeleteLsnCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Serenity"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"What is the deadline for the report?\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // For Serenity"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SerenityParserUtil.parseQuestion((String) null));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SerenityParserUtil.parseQuestion(INVALID_QUESTION));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parseQuestion_validValueWithoutWhitespace_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String expectedQuestion \u003d new Question(VALID_QUESTION).getQuestion();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedQuestion, SerenityParserUtil.parseQuestion(VALID_QUESTION));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parseQuestion_validValueWithWhitespace_returnsTrimmedQuestion() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String expectedQuestion \u003d new Question(VALID_QUESTION).getQuestion();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedQuestion, SerenityParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 32,
      "chunyongg": 1,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewGrpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "class ViewGrpCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/SerenityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class SerenityTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void setGroups() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void resetData() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void hasGroup() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void addGroup() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void setGroup() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void removeGroup() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void getGroupList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/AttendanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    void getAttendance() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    void setAttendance() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    void getFlagged() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 12,
      "chunyongg": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class GroupTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void getStudents() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void getClasses() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void isSameGroup() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.JAMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.JOHN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Lesson(null, (UniqueStudentInfoList) null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueStudentInfoList studentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        StudentInfo studentInfo \u003d new StudentInfo(JOHN, new Participation(), new Attendance());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        studentsInfo.add(studentInfo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Lesson(invalidName, studentsInfo));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_emptyClass_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String name \u003d \"1-1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Set\u003cStudent\u003e students \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Lesson(name, new UniqueStudentInfoList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueStudentInfoList studentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        StudentInfo studentInfo \u003d new StudentInfo(JOHN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        studentsInfo.add(studentInfo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson oneOne \u003d new Lesson(\"1-1\", studentsInfo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson oneOneClone \u003d new Lesson(\"1-1\", studentsInfo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson classTwoOne \u003d new Lesson(\"2-1\", studentsInfo); //same students, different name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueStudentInfoList newStudentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        newStudentsInfo.add(new StudentInfo(JOHN));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        newStudentsInfo.add(new StudentInfo(JAMES));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson oneOneWithTwoStudents \u003d new Lesson(\"1-1\", newStudentsInfo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson twoOneWithTwoStudents \u003d new Lesson(\"2-1\", newStudentsInfo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(oneOneClone.equals(oneOne)); //same"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(oneOneWithTwoStudents.equals(oneOne)); //same class name, different students"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(classTwoOne.equals(oneOne)); //different class name, same students"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(twoOneWithTwoStudents.equals(oneOne)); //different class name, different students"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "xinyee20": 12,
      "chunyongg": 38,
      "ryanlimjr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/ParticipationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class ParticipationTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    //TODO: Test cases"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/QuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.testutil.TypicalQuestions.QUESTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.testutil.TypicalQuestions.QUESTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class QuestionTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(\"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(\" \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_getQuestion() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_1.getQuestion(), \"What is the deadline for the report?\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_2.getQuestion(), \"When is the consultation held?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_isValidQuestion() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // invalid questions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"When is the consultation held?\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"-\")); // one character"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What is the deadline for the report? \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                + \"Do we submit it in Luminus folders?\")); // long question"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/StudentInfoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class StudentInfoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StudentInfo(null, null, null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 2,
      "chunyongg": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "class StudentTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Student(null, null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Student(\"\", \"E1234567\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_invalidStudentNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Student(\"John\", \"A012334444333\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void test_getStudentName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(new Student(\"John\", \"E1234567\").getName().equals(\"John\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void test_getStudentNumber() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(new Student(\"John\", \"E1234567\").getStudentNumber().equals(\"E1234567\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void test_toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(new Student(\"John\", \"E1234567\").toString().equals(\"John E1234567\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void test_equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d \"John\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d \"E1234567\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student first \u003d new Student(studentName, studentId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student second \u003d new Student(studentName, studentId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student differentName \u003d new Student(\"James\", studentId);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student differentId \u003d new Student(studentName, \"E7654321\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //same value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(second));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //different values"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentId));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //compare with null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 60,
      "successs404": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/UniqueGroupListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class UniqueGroupListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void contains() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void setGroup() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void setGroups() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testSetGroups() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void iterator() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/UniqueQuestionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.testutil.TypicalQuestions.QUESTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static seedu.address.testutil.TypicalQuestions.QUESTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class UniqueQuestionListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final UniqueQuestionList uniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void contains_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void contains_questionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(uniqueQuestionList.contains(QUESTION_1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void contains_questionInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(QUESTION_1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(uniqueQuestionList.contains(QUESTION_1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.add(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add_duplicateQuestion_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(QUESTION_1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e uniqueQuestionList.add(QUESTION_1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion_nullTargetQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestion(null, QUESTION_1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion_nullEditedQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestion(QUESTION_1, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion_targetQuestionNotInList_throwsQuestionNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(QuestionNotFoundException.class, () -\u003e uniqueQuestionList.setQuestion(QUESTION_1, QUESTION_1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion_editedQuestionIsSameQuestion_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(QUESTION_1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.setQuestion(QUESTION_1, QUESTION_1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        expectedUniqueQuestionList.add(QUESTION_1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion_editedQuestionHasNonUniqueIdentity_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(QUESTION_1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(QUESTION_2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e uniqueQuestionList.setQuestion(QUESTION_1, QUESTION_2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.remove(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove_personDoesNotExist_throwsQuestionNotFoundException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(QuestionNotFoundException.class, () -\u003e uniqueQuestionList.remove(QUESTION_1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove_existingQuestion_removesQuestion() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(QUESTION_1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.remove(QUESTION_1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions_nullUniqueQuestionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestions((UniqueQuestionList) null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions_uniqueQuestionList_replacesOwnListWithProvidedUniqueQuestionList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(QUESTION_1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        expectedUniqueQuestionList.add(QUESTION_2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.setQuestions(expectedUniqueQuestionList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestions((List\u003cQuestion\u003e) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(QUESTION_1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        List\u003cQuestion\u003e questionList \u003d Collections.singletonList(QUESTION_2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.setQuestions(questionList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        expectedUniqueQuestionList.add(QUESTION_2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions_listWithDuplicateQuestions_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        List\u003cQuestion\u003e listWithDuplicateQuestions \u003d Arrays.asList(QUESTION_1, QUESTION_1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            uniqueQuestionList.setQuestions(listWithDuplicateQuestions));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            uniqueQuestionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/UniqueStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "class UniqueStudentListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void contains() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void setStudent() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void students() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void setStudents() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedClassTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonAdaptedClassTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void toModelType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedGroupTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.GROUP_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonAdaptedGroupTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static final String VALID_NAME \u003d GROUP_A.getName();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final List\u003cJsonAdaptedStudent\u003e VALID_STUDENTS \u003d GROUP_A.getStudents().asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .map(JsonAdaptedStudent::new)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final List\u003cJsonAdaptedLesson\u003e VALID_CLASSES \u003d GROUP_A.getLessons().asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        .map(JsonAdaptedLesson::new)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "   The following testcases failed because the order of the students\u0027 names (in the Set) was not the same."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void toModelType_validGroupDetails_returnsGroup() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonAdaptedGroup group \u003d new JsonAdaptedGroup(GROUP_A);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(GROUP_A, group.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonAdaptedGroup group \u003d new JsonAdaptedGroup(null, VALID_STUDENTS, VALID_CLASSES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"name\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void toModelType_nullStudents_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonAdaptedGroup group \u003d new JsonAdaptedGroup(VALID_NAME, null, VALID_CLASSES);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"students\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void toModelType_nullClasses_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonAdaptedGroup group \u003d new JsonAdaptedGroup(VALID_NAME, VALID_STUDENTS, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"classes\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "chunyongg": 1,
      "ryanlimjr": 3,
      "successs404": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void toModelType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerenityStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonSerenityStorageTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void getSerenityFilePath() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void readSerenity() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testReadSerenity() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void saveSerenity() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testSaveSerenity() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableSerenityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonSerializableSerenityTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void toModelType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonSerenityStorage serenityStorage \u003d new JsonSerenityStorage(getTempFilePath(\"serenity\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, serenityStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 2,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A utility class to help with building Addressbook objects. Example usage: \u003cbr\u003e {@code AddressBook ab \u003d new"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception. This is a wrapper method that"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency with our custom {@link"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * #assertThrows(Class, String, Executable)} method. To standardize API calls in this project, users should use this"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * method instead of {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call {@link #assertThrows(Class,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Executable)} instead."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Executable executable) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 6,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor} that we are"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GroupBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import seedu.address.commons.util.CsvUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueLessonList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.UniqueStudentList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": " * A utility class to help with building Group objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class GroupBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"G04\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Set\u003cStudent\u003e DEFAULT_STUDENTS \u003d new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "        new Student(\"Aaron Tan\", \"e0123456\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        new Student(\"Baron Wong\", \"e0654321\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        new Student(\"Cherry Lee\", \"e0135791\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "        new Student(\"Dickson Low\", \"e0246810\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        new Student(\"Eng Wee Kiat\", \"e0101010\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final Set\u003cLesson\u003e DEFAULT_CLASSES \u003d new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private UniqueStudentList students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private UniqueLessonList classes \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Creates a {@code GroupBuilder} with the default details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        students.setStudents(new ArrayList\u003c\u003e(DEFAULT_STUDENTS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        classes.setLessons(new ArrayList\u003c\u003e(DEFAULT_CLASSES));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Initializes the GroupBuilder with the data of {@code groupToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder(Group groupToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        name \u003d groupToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        students \u003d groupToCopy.getStudents();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        classes \u003d groupToCopy.getLessons();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Initializes the GroupBuilder from the data inside the CSV file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder(String name, Path filePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        students.setStudents(new ArrayList\u003c\u003e(new CsvUtil(filePath).readStudentsFromCsv()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        classes.setLessons(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Sets the {@code Name} of the {@code Group} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder withName(String name) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Parses the {@code students} into a {@code Set\u003cStudent\u003e} and set it to the {@code Group} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder withStudents(Student... students) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.students.setStudents(Arrays.asList(students));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Parses the {@code filePath} into a {@code Set\u003cStudent\u003e} and set it to the {@code Group} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder withFilePath(Path filePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        students.setStudents(new ArrayList\u003c\u003e(new CsvUtil(filePath).readStudentsFromCsv()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Creates and parses the {@code classes} into a {@code Set\u003cClass\u003e} and set it to the {@code Group} that we are"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public GroupBuilder withClasses(String... classes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueStudentInfoList studentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentsInfo.add(new StudentInfo(student));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (String className : classes) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            this.classes.add(new Lesson(className, studentsInfo));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Group build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new Group(name, students, classes);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 8,
      "xinyee20": 2,
      "chunyongg": 8,
      "ryanlimjr": 12,
      "successs404": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GroupPredicateStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class GroupPredicateStub implements Predicate\u003cGroup\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean test(Group group) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GroupUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.logic.commands.AddGrpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": " * A utility class for Group."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class GroupUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns an add command string for adding the {@code group}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static String getAddGrpCommand(Group group) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return AddGrpCommand.COMMAND_WORD + \" \" + getGroupDetails(group);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns the part of command string for the given {@code group}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static String getGroupDetails(Group group) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "        sb.append(PREFIX_GRP + group.getName() + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // need more modifications"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.StudentInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void setSerenityFilePath(Path serenityFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void setSerenity(ReadOnlySerenity serenity) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void addStudentToGroup(Student student, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void removeStudentFromGroup(Student student, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ReadOnlySerenity getSerenity() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateStudentList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateLessonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateStudentInfoList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateQuestionList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e getStudentInfoList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 198
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerenityBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.Serenity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A utility class to help with building Serenity objects. Example usage: \u003cbr\u003e {@code Serenity serenity \u003d new"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * SerenityBuilder().withGroup(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class SerenityBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Serenity serenity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public SerenityBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "        serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public SerenityBuilder(Serenity serenity) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.serenity \u003d serenity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Adds a new {@code Group} to the {@code Serenity} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public SerenityBuilder withGroup(Group group) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        serenity.addGroup(group);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Serenity build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "successs404": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path. Creates the sandbox folder if"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalGroups.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRP_GROUP_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRP_GROUP_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATH_GROUP_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATH_GROUP_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.Serenity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": " * A utility class containing a list of {@code Group} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class TypicalGroups {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Group GROUP_C \u003d new GroupBuilder().withName(\"G06\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .withStudents("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new Student(\"Jeffery\", \"e0000000\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new Student(\"Luna\", \"e0111111\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Student(\"Queenie\", \"e0222222\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ).withClasses("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"4.2\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"5.1\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Group GROUP_D \u003d new GroupBuilder().withName(\"G07\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .withStudents("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new Student(\"Freddie\", \"e0000000\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Student(\"June\", \"e0101011\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ).withClasses("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"4.2\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"5.1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"5.2\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"6.1\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // Manually added - Group\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Group GROUP_A \u003d new GroupBuilder().withName(VALID_GRP_GROUP_A)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .withFilePath(VALID_PATH_GROUP_A).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Group GROUP_B \u003d new GroupBuilder().withName(VALID_GRP_GROUP_B)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .withFilePath(VALID_PATH_GROUP_B).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private TypicalGroups() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns an {@code Serenity} with all the typical groups."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static Serenity getTypicalSerenity() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Serenity serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (Group group : getTypicalGroups()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "            serenity.addGroup(group);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenity;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static List\u003cGroup\u003e getTypicalGroups() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GROUP_C, GROUP_D));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 10,
      "successs404": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalQuestions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import seedu.address.model.group.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class TypicalQuestions {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Question QUESTION_1 \u003d new Question(\"What is the deadline for the report?\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Question QUESTION_2 \u003d new Question(\"When is the consultation held?\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudent.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import seedu.address.model.group.Student;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class TypicalStudent {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final Student JOHN \u003d new Student(\"John\", \"E1234567\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final Student JAMES \u003d new Student(\"James\", \"E7654321\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A test object which can be constructed via an FXML file. Unlike other JavaFX classes, this class can be constructed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 4,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * UiPart used for testing. It should only be used with invalid FXML files or the valid file located at {@link"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 112
    }
  }
]
