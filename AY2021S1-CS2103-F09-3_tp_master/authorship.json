[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F09-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* This is implemented for **CS2103 Software Engineering Module**.\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  * as a UI mock up for a actual library administration system."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  * as a personal library management system."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* The project simulates an library administration software used for managing the details of library."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  * It is written in **OOP fashion**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* For the detailed documentation of this project, see the **[IntelliBrary Product Website](https://github.com/AY2021S1-CS2103-F09-3/tp/)**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 8,
      "-": 5
    }
  },
  {
    "path": "bin/main/view/BookListCard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isbn\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cLabel fx:id\u003d\"publisher\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$publisher\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cLabel fx:id\u003d\"times\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$times\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 5,
      "-": 34
    }
  },
  {
    "path": "bin/main/view/BookListPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "-": 7
    }
  },
  {
    "path": "bin/main/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "davidsqf": 9
    }
  },
  {
    "path": "bin/main/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 39
    }
  },
  {
    "path": "bin/main/view/LibraryBookDetailCard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"stocking\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"50\" maxHeight\u003d\"1000\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cLabel fx:id\u003d\"times\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$times\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 39
    }
  },
  {
    "path": "bin/main/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cVBox fx:id\u003d\"bookList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "          \u003cStackPane fx:id\u003d\"bookListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 60
    }
  },
  {
    "path": "bin/main/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 9
    }
  },
  {
    "path": "bin/main/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 12
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "HCY123902": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "### Xu Caiyi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "\u003cimg src\u003d\"images/caiyi34777.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "[[github](https://github.com/Caiyi34777)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "[[portfolio](team/caiyi34777.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Responsibilities: Documentation. In charge of Model."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "### Huang Chengyu"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cimg src\u003d\"images/hcy123902.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "[[github](http://github.com/HCY123902)] [[portfolio](team/hcy123902.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Responsibilities: Integration. In charge of Storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Liu Yangming"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003cimg src\u003d\"images/richardcom.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "[[github](http://github.com/richardcom)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "[[portfolio](team/richardcom.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Responsibilities: Testing. In charge of Storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "### Jiang Siyuan"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "\u003cimg src\u003d\"images/stefan-jiang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "[[github](http://github.com/Stefan-Jiang)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "[[portfolio](team/Stefan-Jiang.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Responsibilities: Code Quality. In charge of UI."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "### Song Qifeng"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "\u003cimg src\u003d\"images/davidsqf.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "[[github](http://github.com/davidsqf)] [[portfolio](team/davidsqf.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* Responsibilities: Deliverables and deadlines. In charge of Logic."
      }
    ],
    "authorContributionMap": {
      "davidsqf": 4,
      "Stefan-Jiang": 3,
      "richardcom": 13,
      "-": 34,
      "Caiyi34777": 4,
      "HCY123902": 3
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "1. Category the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "Caiyi34777": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `BookListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a book)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cBook\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Category` list in the `AddressBook`, which `Book` references. This allows `AddressBook` to only require one `Category` object per unique `Category`, instead of each `Book` needing their own `Category` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "### Storing and retrieving of stocking information"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#### Existing implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The existing implementation of the storing and retriving of stocking information is facilitated by `Stocking`, `JsonAdaptedStocking`, `StockCommand`, and `StockCommandParser`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The relevant methods are"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `StockCommand#excecute()` — Execute the stock command according to the predicate specified by the book name and ISBN."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `JsonAdaptedStocking#JsonAdaptedStocking(int, int)` — Reads the stocking map from the json file and also changes the storage model into the json map to store the stocking information when necessary."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `JsonAdaptedStocking#JsonAdaptedStocking(Stocking)` — Transforms the stocking model into the json adapted model."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `JsonAdaptedStocking#toModelType(Stocking)` — Transforms the json adapted model into the stocking model."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The relationship between the book and stocking and other components is shown as below."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "![The relationship between the book and the stocking and other components](images/ModelClassBookStockingDiagram.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "These operations are incoperated into the storage read and write process in the execution."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Given below is an example usage scenario of how stocking information with be parsed when adding a book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 1. The user launches the application and types command add with `s/science library 10 central library 30`, and the logic manager calls the address book parser which calls the add command parser."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "![The add command parser](images/AddStockingSequenceDiagram1.png)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 2. The add command paser calss the ParseUtil, which parses the string and returns a stocking"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "![The creation of the stocking](images/AddStockingParserSequenceDiagram.png)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 3. The add command uses the stocking and returns an add command, and this is returned by address book parser, and the logic manager executes the command and make some changes to the model."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "![Add book with stocking information](images/AddStockingSequenceDiagram.png)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Given below is an example usage scenario of how the stocking command will be executed, "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 1. The user types `Stock n/gun`, and the logic manager calls the address book parser which calls the stock command parser."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "![The stock command parser](images/StockCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 2. The stock command parser gets the list of book names and list of ISBN from the string and calls the constructor of "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "![The creation of the stock command](images/StockCommandParserSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Step 3. The stock command is returned and excecuted, updating the book list shown on the user interface."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The current implementation of the stocking is consistent with other components of the book, which brings convenience to the program integration."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Alternative 1 (current choice):** Requires the user to type out the library name to specify the stocking in a location."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Pros: The command is clear and understandable."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Cons: May bring some inconvenience when typing since some of the library name is a bit long."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Alternative 2:** Enables the user to use abbreviation of the library location."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Pros: Reduces the amount of typing and brings convenience to users."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Cons: May cause confusion to new user because of the abbreviation of the library location."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th book in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new book. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Step 4. The user now decides that adding the book was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the book being deleted)."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* library administrators"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* has a need to manage a large number of books stored in different libraries and locations"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* has a need to purchase books according to the current stock and borrow frequency"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* has a need to keep track of the borrow history of books "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| -------- | ------------------------------------------ | -------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* * *`  | library administrator                      | check the location(e.g. central library, Hon Sui Sen Memorial Library) of each book   |provide accurate information to borrowers                                                                                 |"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* * *`  | library administrator                      | view the stockings of different books                                                 |efficiently increase the stockings of those very popular books to meet the demand of the readers                          |"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | get an auto-generated list of most popular books                                      |know what books to purchase in the future                                                                                 |"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | view book reviews made by other readers                                               |choose the interesting books based on reader feedback and reorder them so that they can be easily reached by other readers|"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | edit the information of a book                                                        |keep the book information in the database up to date                                                                      |"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | add book reviews provided by readers                                                  |share my reading experience with other readers and help them during book selection                                        |"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | make users grouped into different categories based on their reading appetite          |have a better understanding of the type of each of the user                                                               |"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | see the books that are most frequently read by each category of users                 |know what books should be purchased for each category of users                                                            |"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | library administrator                      | keep track of the group of books where a large number of users read all of them       |transfer the books read by the same category of users to the same location to make it convenient for the user             |"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | expert user                                | add friendlier syntax                                                                 |boost efficiency                                                                                                          |"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "| `* *`    | expert user                                | delete and add multiple book information within one command                           |it is more time efficient                                                                                                 |"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "| `* * *`  | first time user                            | view the list of smaple data   | get a rough idea of how the project will look like                     |"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "| `* * *`  | library administrator                      | purge all sample data in one go       |start using the app without further ado             |"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "| `* * *`  | library administrator                      | check the borrowing status of a certain book       |tell students whether they can borrow this book or not             |"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "(For all use cases below, the **System** is the `ItelliBrary` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Use case: UC01 - Purge sample data**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  1. User requests to purge all sample data."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* 1a. Some or all sample data had already been deleted before the \u0027purge\u0027 request "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    * 1a1. The application deletes all remaining sample data."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**Use case: UC02 - Add Books**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  1. User request to add a new book into the library."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  2. The application adds the book to the library and shows a successfull message to the user."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* 1a. The book to be added is already found in the library."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * 1a1. The application shows an error message that the book is already stored in the library."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* 1b. Some information about the book is not entered in the command."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * 1b1. The application shows an error message that the information about the book is incomplete."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* 1c. The data type of some of the book information is incorrect."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * 1c1. The application shows an error message that data type of some of the book information is incorrect."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Use case: UC03 - Delete Books**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  1. User request to delete a book from the library."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  2. The application deletes the book from the library and shows a successfull message to the user."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* 1a. The book to be deleted cannot be found in the library."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * 1a1. The application shows an error message that the book to be deleted cannot be found in the library."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**Use case: UC04 - Check the location**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "1.  User request to check the location of a book using a command."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "2.  The application shows the relevant information of the book, including the storage location."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* 1a. The book name or ISBN given by the user is not found in the record."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * 1a1. The application shows an error message that the book is not found."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* 1b. The location of the book is not recorded or the list is empty."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * 1b1. The application shows an error message that the location of the book is not recorded."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**Use case: UC05 - view the stockings of different books**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "1.  User request to check the stocking of a book using a command."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "2.  The application shows the relevant information of the book, including the stocking of the book."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* 1a. The book name or ISBN given by the user is not found in the record."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * 1a1. The application shows an error message that the book is not found."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* 1b. The stocking of the book is not recorded."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * 1b1. The application shows an error message that the stocking of the book is not recorded."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "**Use case UC06 - View Sample Data**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "1.  User requests to view the sample data of the app"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "2.  IntelliBrary shows the information of a list of books"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* 2a. Sample Data is missing."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "  "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Use case UC07 - Delete a book**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "1.  User requests to list books"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "2.  IntelliBrary shows a list of books"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "3.  User requests to delete a specific book in the list"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "4.  IntelliBrary deletes the book"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    * 3a1. IntelliBrary shows an error message."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Use case: UC08 - Edit a book**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  1. User requests to edit a book and inputs new information."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  2. IntelliBrary modifies the current information of that book."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* 1a. The book to be editted cannot be found."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    * 1a1. IntelliBrary shows an error message."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Use case: UC09 - Check the borrowing status of a book**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  1. User requests to check the borrowing status of a book."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  2. IntelliBrary tells the user whether there are available stockings of this book."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "  "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* 1a. The book to be checked cannot be found."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    * 1a1. IntelliBrary shows an error message."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      Use case ends.  "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "**Use case: UC10 - Get usage times of a book**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  1. User requests to get the usage times of a book and input book title."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  2. IntelliBrary tells the user the usage times of the certain book."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* 1a. The book title to be checked cannot be found."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    * 1a1. IntelliBrary shows an error message."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      Use case ends.        "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "**Use case: UC11 - Get number of books borrowed**"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  1. User requests to get the number of books borrowed by the whole borrower cluster."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "  2. IntelliBrary tells the user the number of books borrowed by the whole borrower cluster."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Use case ends.  "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1.  Technical requirements: should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "richardcom"
        },
        "content": "2.  Data requirements: should be able to hold up to 1000 books without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "richardcom"
        },
        "content": "3.  Performance requirements: for core functions, the system should respond within two seconds."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "richardcom"
        },
        "content": "4.  Quality requirements: a user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "richardcom"
        },
        "content": "5.  Process requirements: the project is expected to adhere to the course schedule and delivers weekly tasks on time."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "richardcom"
        },
        "content": "6.  Domain rules: the number of books at each library cannot be less than three."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Deleting a book"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. Deleting a book while all books are being shown"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "richardcom"
        },
        "content": "   1. Prerequisites: List all books using the `list` command. Multiple books in the list."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      Expected: No book is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 47,
      "Stefan-Jiang": 19,
      "richardcom": 62,
      "-": 323,
      "Caiyi34777": 23,
      "HCY123902": 122
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "IntelliBrary is an **app for managing storage, purchase, borrowing, and reader review of books in NUS library via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). The product is targeted at users who can type fast, IntelliBrary can get your book management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Add books `[coming soon]` : `addBook`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Checks the list of locations of where a certain book is stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Format: `addBook /name:NAME /author:AUTHOR /publisher:PUBLISHER /ISBN:ISBN  /cat:CATEGORY /loc:LOCATION STORAGE`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* `addBook /name: Numerical linear algebra [electronic resource] : an introduction /author: Holger Wendland /publisher: Cambridge University Press /ISBN: 9781316544938 /cat: Math /loc: Central Library /storage: 5`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* `addBook /name: Artificial Intelligence, A mordern approach /author: Stuart Russell /publisher: PEARSON /ISBN: 978-0-13-461099-3 /cat: Computer Science /loc: Central Library /storage: 6`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Delete books `[coming soon]`: `deleteBookByIsbn, deleteBookByTimes, deleteBookByName`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Checks the list of locations of where a certain book is stored."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Format:  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`deleteBookByISBN /ISBN`  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`deleteBookByTimes /NUMBER_OF_TIMES_BEEN_BORROWED`  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`deleteBookByName /NAMEOFBOOK`  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* `deleteBookByISBN /9781316544938`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* `deleteBookByTimes /0`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `deleteBookByName /Numerical linear algebra [electronic resource] : an introduction`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "### Check location `[coming soon]`: `locate`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Checks the list of locations of where a certain book is stored."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Format: `locate /name NAME [/ISBN ISBN]`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The ISBN of the book is an optional argument in the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `locate /name A brief history of time /ISBN 9780553175219`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `locate /name A brief history of time`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "### Check stocking `[coming soon]`: `stock`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Check the stock of the book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Format: `stock /name NAME [/ISBN ISBN]`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "The ISBN of the book is an optional argument in the command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `stock /name A brief history of time /ISBN /9780553175219`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* `stock /name A brief history of time`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "### View Sample Data `[coming soon]`: `view`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "Have a look at the sample data for the application when open app for the first time."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "Format: `view`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "### Editing a book : `edit`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "Edits the information of a book in the database."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "Format: `edit INDEX /BOOK_NAME /NAME /AUTHOR /PUBLISHER /ISBN /CATEGORY /LOCATION /STORAGE`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "* Edits the book at the specified `INDEX`. The index refers to the index number shown in the displayed book list. The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* When editing categories, the existing categories of the book will be removed i.e adding of categories is not cumulative."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* You can remove all the book’s categories by typing `t/` without"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    specifying any categories after it."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "*  edit /BOOK_NAME: Numerical linear algebra [electronic resource] : an introduction /author: Holger Wendland /publisher: Cambridge University Press /ISBN: 9781316544938 /cat: Math /loc: Central Library /storage: 5"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "### Check borrowed status `[coming soon]`: `check`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Check the status of a certain book- whether it is available or not."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Format: `status /BOOK_NAME`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `status /Harry Potter`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `status /Linear Algebra`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "### Purge sample data `[coming soon]`: `purge`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Purge all sample data in one go."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "Format: `purge`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "* `purge`"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 9,
      "Stefan-Jiang": 8,
      "richardcom": 15,
      "-": 68,
      "Caiyi34777": 3,
      "HCY123902": 16
    }
  },
  {
    "path": "docs/team/Stefan-Jiang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "title: Jiang Siyuan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## Project: IntelliBrary"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "IntelliBrary is a desktop library management application used for library administrators to manage books. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* **New Feature**: Added the ability to View Sample Data and Edit Books"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "richardcom": 13
    }
  },
  {
    "path": "docs/team/caiyi34777.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* Hi! I am Caiyi! Welcome to my portfolio!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "* I am looking forward to upcoming tasks for tp! :P "
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 2
    }
  },
  {
    "path": "docs/team/davidsqf.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "title: Song Qifeng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## Project: IntelliBrary"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "IntelliBrary is a desktop library management application used for library administrators to manage books. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* **New Feature**: Added the ability to Purge sample data and Check borrowed status"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "richardcom": 13
    }
  },
  {
    "path": "docs/team/hcy123902.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "title: Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "## Project: IntelliBrary"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "IntelliBrary is a desktop library management application used for library administrators to manage books. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **New Feature**: Coming soon"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Managed releases"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Coming soon"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * Added documentation for the features"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    * Added implementation details."
      }
    ],
    "authorContributionMap": {
      "HCY123902": 27
    }
  },
  {
    "path": "docs/team/richardcom.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "title: Liu Yangming\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## Project: IntelliBrary"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "IntelliBrary is a desktop library management application used for library administrators to manage books. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* **New Feature**: Added the ability to add books into the library."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * What it does: allows the user to add new books into the library."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make changes to the booklist in the library."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * Added documentation for the features `add` and `delete`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * Added documentation for the features `add` and `delete`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    * Added documentation about Non-functional requirements of the project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "richardcom": 24
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Changes the remark of an existing book in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the book identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"by the index number used in the last book listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param index of the book in the filtered book list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param remark of the book to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of book data. We achieve that by working with the `Book` model. Each field in a Book is implemented as a separate class (e.g. a `Name` object represents the book’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Create a new `Remark` in `seedu.address.model.book`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each book."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Simply add the following to [`seedu.address.ui.BookCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`BookCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Then insert the following into [`main/resources/view/BookListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`BookListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## Modify `Book` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Since `BookCard` displays data from a `Book`, we need to update `Book` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Modify `Book`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "richardcom"
        },
        "content": "We change the constructor of `Book` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Update other usages of `Book`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Unfortunately, a change to `Book` will cause other commands to break, you will have to modify these commands to use the updated `Book`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "richardcom"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Book` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "richardcom"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedBook` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedBook` to work with our new `Book`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Now that we have finalized the `Book` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`BookCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public BookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    remark.setText(book.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "richardcom"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Book`. Since all fields in a `Book` are immutable, we create a new instance of a `Book` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "richardcom"
        },
        "content": "save it with `Model#setBook()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Book: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Book: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new Book(bookToEdit.getName(), bookToEdit.getIsbn(), bookToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                bookToEdit.getAddress(), remark, bookToEdit.getCategories());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedBook));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code bookToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String generateSuccessMessage(Book bookToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return String.format(message, bookToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "richardcom": 39,
      "-": 355
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Book` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Book`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "The `address` field in `Book` is actually an instance of the `seedu.address.model.book.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditBookDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Let’s try removing references to `Address` in `EditBookDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. Safe delete the field `address` in `EditBookDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Book` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `BookCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "A quick look at the `BookCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`BookCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`BookCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "\u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isbn\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "**`invalidBookAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \"name\": \"Book with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    \"isbn\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "richardcom": 14,
      "-": 87,
      "Caiyi34777": 2
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/ISBN] [e/EMAIL] [a/ADDRESS] [t/CATEGORY]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditBookDescriptor`. Recall that we can verify the contents of `editBookDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       Book editedBook \u003d createEditedBook(bookToEdit, editBookDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       if (!bookToEdit.isSameBook(editedBook) \u0026\u0026 model.hasBook(editedBook)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_BOOK_SUCCESS, editedBook));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "richardcom"
        },
        "content": "       books.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "richardcom"
        },
        "content": "           source.getBookList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                 .map(JsonAdaptedBook::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. It appears that a `JsonAdaptedBook` is created for each `Book` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    5.  Add a new field to `Book`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "richardcom": 13,
      "-": 236,
      "Caiyi34777": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 1,
      "-": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_DISPLAYED_INDEX \u003d \"The book index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_DELETE_NAME \u003d \"The book to delete is not found\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_CHECK_NAME \u003d \"The book to check is not found\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_BOOKS_LISTED_OVERVIEW \u003d \"%1$d books listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_BORROWING_TIMES_HISTORY \u003d \"All history borrowing times sum up to %1$d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 10,
      "Caiyi34777": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of books */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return model.getFilteredBookList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 3,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STOCKING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Adds a book to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a book to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + PREFIX_ISBN + \"ISBN \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_TIMES + \"TIMES \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_STOCKING + \"STOCKINGS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_AUTHOR + \"AUTHOR \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_PUBLISHER + \"PUBLISHER\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_NAME + \"Linear Algebra \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + PREFIX_ISBN + \"98765432 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_EMAIL + \"xxxxxx@example.com \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_ADDRESS + \"xxxxx \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_CATEGORY + \"Science \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_CATEGORY + \"Math \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_TIMES + \"20 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_STOCKING + \"central library 0 science library 0 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + PREFIX_AUTHOR + \"Victor \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            + PREFIX_PUBLISHER + \"pku\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New book added: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the address book\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final Book toAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Book}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public AddCommand(Book book) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        toAdd \u003d book;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (model.hasBook(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.addBook(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 3,
      "richardcom": 28,
      "-": 44,
      "Caiyi34777": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteByCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Deletes a book identified using name, isbn, or times."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DeleteByCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteBy\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \": Deletes the book identified by the name, isbn or times borrowed.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Parameters: NAME OR ISBN OR TIMES\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"Example: \" + \"1. \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Linear Algebra\" + \"   \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"2. \" + COMMAND_WORD + \" \" + PREFIX_ISBN + \"123456\" + \"   \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"3. \" + COMMAND_WORD + \" \" + PREFIX_TIMES + \"10\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final String target;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final int attribute;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Delete a book by name, isbn or times."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param target a string representing the input content."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param attribute indicating which attribute shall we refer to when deleting."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DeleteByCommand(String target, int attribute) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToDelete \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e deleteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (Book book : lastShownList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            switch (attribute) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (book.getName().fullName.equals(target)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    bookToDelete \u003d book;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    deleteList.add(bookToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (book.getIsbn().value.equals(target)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    bookToDelete \u003d book;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    deleteList.add(bookToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (Integer.parseInt(book.getTimes().value) \u003e\u003d Integer.parseInt(target)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    bookToDelete \u003d book;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    deleteList.add(bookToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (bookToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DELETE_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (Book book : deleteList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            model.deleteBook(book);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, deleteList.toString()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof DeleteByCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 target.equals(((DeleteByCommand) other).target)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Deletes a book identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \": Deletes the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Edits the details of an existing book in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the book identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"by the index number used in the displayed book list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"[\" + PREFIX_ISBN + \"ISBN] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            + \"[\" + PREFIX_AUTHOR + \"AUTHOR]\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            + \"[\" + PREFIX_PUBLISHER + \"PUBLISHER]\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + PREFIX_ISBN + \"91234567 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOK_SUCCESS \u003d \"Edited Book: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the address book.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final EditBookDescriptor editBookDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param index of the book in the filtered book list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param editBookDescriptor details to edit the book with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditCommand(Index index, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(editBookDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.editBookDescriptor \u003d new EditBookDescriptor(editBookDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d createEditedBook(bookToEdit, editBookDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!bookToEdit.isSameBook(editedBook) \u0026\u0026 model.hasBook(editedBook)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOK_SUCCESS, editedBook));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates and returns a {@code Book} with the details of {@code bookToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * edited with {@code editBookDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static Book createEditedBook(Book bookToEdit, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assert bookToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Name updatedName \u003d editBookDescriptor.getName().orElse(bookToEdit.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Isbn updatedIsbn \u003d editBookDescriptor.getIsbn().orElse(bookToEdit.getIsbn());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Email updatedEmail \u003d editBookDescriptor.getEmail().orElse(bookToEdit.getEmail());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Address updatedAddress \u003d editBookDescriptor.getAddress().orElse(bookToEdit.getAddress());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Times updatedTimes \u003d bookToEdit.getTimes();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d editBookDescriptor.getCategories().orElse(bookToEdit.getCategories());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Author updatedAuthor \u003d editBookDescriptor.getAuthor().orElse(bookToEdit.getAuthor());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Publisher updatedPublisher \u003d editBookDescriptor.getPublisher().orElse(bookToEdit.getPublisher());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Stocking updatedStocking \u003d editBookDescriptor.getStocking().orElse(bookToEdit.getStocking());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Book(updatedName, updatedIsbn, updatedEmail,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                updatedAddress, updatedTimes, updatedCategories, updatedStocking, updatedAuthor, updatedPublisher);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 editBookDescriptor.equals(e.editBookDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Stores the details to edit the book with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * corresponding field value of the book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static class EditBookDescriptor {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        private Isbn isbn;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        private Times times;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        private Author author;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        private Publisher publisher;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        private Stocking stocking;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public EditBookDescriptor() {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public EditBookDescriptor(EditBookDescriptor toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            setIsbn(toCopy.isbn);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            setTimes(toCopy.times);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            setCategories(toCopy.categories);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            setAuthor(toCopy.author);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            setPublisher(toCopy.publisher);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            setStocking(toCopy.stocking);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, isbn, email, address, times,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                categories, publisher, author, stocking);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        public void setIsbn(Isbn isbn) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        public Optional\u003cIsbn\u003e getIsbn() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return Optional.ofNullable(isbn);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        public void setTimes(Times times) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            this.times \u003d times;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        public Optional\u003cTimes\u003e getTimes() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            return Optional.ofNullable(times);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "         * Sets {@code categories} to this object\u0027s {@code categories}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        public void setCategories(Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            this.categories \u003d (categories !\u003d null) ? new HashSet\u003c\u003e(categories) : null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "         * Returns an unmodifiable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code categories} is null."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        public Optional\u003cSet\u003cCategory\u003e\u003e getCategories() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return (categories !\u003d null) ? Optional.of(Collections.unmodifiableSet(categories)) : Optional.empty();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void setAuthor(Author author) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            this.author \u003d author;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public Optional\u003cAuthor\u003e getAuthor() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return Optional.ofNullable(author);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        public void setPublisher(Publisher publisher) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            this.publisher \u003d publisher;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        public Optional\u003cPublisher\u003e getPublisher() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            return Optional.ofNullable(publisher);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        public void setStocking(Stocking stocking) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.stocking \u003d stocking;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        public Optional\u003cStocking\u003e getStocking() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return Optional.ofNullable(stocking);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (!(other instanceof EditBookDescriptor)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            EditBookDescriptor e \u003d (EditBookDescriptor) other;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    \u0026\u0026 getIsbn().equals(e.getIsbn())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    \u0026\u0026 getCategories().equals(e.getCategories())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u0026\u0026 getStocking().equals(e.getStocking())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    \u0026\u0026 getTimes().equals(e.getTimes())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                    \u0026\u0026 getAuthor().equals(e.getAuthor())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                    \u0026\u0026 getPublisher().equals(e.getPublisher());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 18,
      "Stefan-Jiang": 12,
      "richardcom": 63,
      "-": 157,
      "Caiyi34777": 26,
      "HCY123902": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Finds and lists all books in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all books whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(predicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 5,
      "-": 37,
      "HCY123902": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        List\u003cBook\u003e books \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        int history \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        for (Book book: books) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            history +\u003d book.getTimes().getValue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        model.updateFilteredBookList((book -\u003e false), Mode.NORMAL);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_BORROWING_TIMES_HISTORY,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                history));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || (other instanceof HistoryCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Lists all books in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all books\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList((book -\u003e false), Mode.NORMAL);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 5,
      "-": 19,
      "HCY123902": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StockCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NumberContainsKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class StockCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stock\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Search for the stocking of all the books with\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"the corresponding keyword and shows them as a list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/ a brief history of time\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Predicate\u003cBook\u003e predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a StockCommand to search for the stocking information in each location."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param names The list of names that are used as keyword."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param numbers The list of numbers that are used as keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public StockCommand(List\u003cString\u003e names, List\u003cString\u003e numbers) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        //Predicate\u003cBook\u003e bookPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NameContainsKeywordsPredicate nameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NumberContainsKeywordPredicate numberContainsKeywordPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (names !\u003d null \u0026\u0026 numbers !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            nameContainsKeywordsPredicate \u003d new NameContainsKeywordsPredicate(names);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            numberContainsKeywordPredicate \u003d new NumberContainsKeywordPredicate(numbers);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            predicate \u003d (book -\u003e nameContainsKeywordsPredicate.test(book)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    || numberContainsKeywordPredicate.test(book));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (names !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            predicate \u003d new NameContainsKeywordsPredicate(names);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (numbers !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            predicate \u003d new NumberContainsKeywordPredicate(numbers);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            predicate \u003d Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList((book -\u003e false), Mode.NORMAL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(predicate, Mode.DETAIL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof StockCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u0026\u0026 this.predicate.equals(((StockCommand) other).predicate));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "richardcom": 11,
      "HCY123902": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TimesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Changes the times of an existing book in the database."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class TimesCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"times\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the times of the book identified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + \"by the index number used in the last book listing. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + \"Existing times will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + PREFIX_TIMES + \"[TIMES]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            + PREFIX_TIMES + \"Likes to swim.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String MESSAGE_ADD_TIMES_SUCCESS \u003d \"Added times to Book: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String MESSAGE_DELETE_TIMES_SUCCESS \u003d \"Removed times from Book: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final Times times;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @param index of the book in the filtered book list to edit the times"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @param times of the book being borrowed to be updated to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public TimesCommand(Index index, Times times) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireAllNonNull(index, times);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.times \u003d times;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new Book(bookToEdit.getName(), bookToEdit.getIsbn(), bookToEdit.getEmail(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                bookToEdit.getAddress(), times, bookToEdit.getCategories(), bookToEdit.getStocking(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                bookToEdit.getAuthor(), bookToEdit.getPublisher());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedBook));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Generates a command execution success message based on whether the times is added to or removed from"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * {@code bookToEdit}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String generateSuccessMessage(Book bookToEdit) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        String message \u003d !times.value.isEmpty() ? MESSAGE_ADD_TIMES_SUCCESS : MESSAGE_DELETE_TIMES_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return String.format(message, bookToEdit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (!(other instanceof TimesCommand)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        TimesCommand e \u003d (TimesCommand) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                \u0026\u0026 times.equals(e.times);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 71,
      "richardcom": 15,
      "HCY123902": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UsageByCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Check usage of a book identified using name, isbn, or times."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class UsageByCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"usageBy\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \": Get the usage of the book identified by the name or isbn\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"Parameters: NAME OR ISBN\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"Example: \" + \"1. \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Linear Algebra\" + \"   \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"2. \" + COMMAND_WORD + \" \" + PREFIX_ISBN + \"123456\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_USAGE_BOOK_SUCCESS \u003d \"Usage of selected book: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final String target;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Check usage of a book by name or isbn."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @param target a string representing the input content."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public UsageByCommand(String target) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Book bookToCheck \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        for (Book book : lastShownList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            if (book.getName().fullName.equals(target) || book.getIsbn().value.equals(target)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                bookToCheck \u003d book;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (bookToCheck \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_CHECK_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_USAGE_BOOK_SUCCESS, bookToCheck.getTimes().getValue()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || (other instanceof UsageByCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 target.equals(((UsageByCommand) other).target)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UsageCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Check usage of a book identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class UsageCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"usage\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \": Usages the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_USAGE_BOOK_SUCCESS \u003d \"Usage of selected book: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public UsageCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_USAGE_BOOK_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                lastShownList.get(targetIndex.getZeroBased()).getTimes().getValue()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || (other instanceof UsageCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UsageCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STOCKING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_STOCKING, PREFIX_TIMES, PREFIX_AUTHOR, PREFIX_PUBLISHER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ISBN, PREFIX_ADDRESS, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Isbn isbn \u003d ParserUtil.parseIsbn(argMultimap.getValue(PREFIX_ISBN).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        Times times \u003d ParserUtil.parseTimes(argMultimap.getValue(PREFIX_TIMES).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Stocking stocking \u003d ParserUtil.parseStocking(argMultimap.getValue(PREFIX_STOCKING).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Author author \u003d ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()); // to be implemented"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Publisher publisher \u003d ParserUtil.parsePublisher(argMultimap.getValue(PREFIX_PUBLISHER).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book book \u003d new Book(name, isbn, email, address, times, categoryList, stocking,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                author, publisher);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new AddCommand(book);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 2,
      "Stefan-Jiang": 15,
      "richardcom": 6,
      "-": 46,
      "Caiyi34777": 3,
      "HCY123902": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case DeleteByCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new DeleteByCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        case StockCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new StockCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case TimesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new TimesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case UsageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new UsageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        case UsageByCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new UsageByCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 1,
      "-": 64,
      "Caiyi34777": 19,
      "HCY123902": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Prefix PREFIX_ISBN \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"ad/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Prefix PREFIX_TIMES \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final Prefix PREFIX_STOCKING \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Prefix PREFIX_AUTHOR \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final Prefix PREFIX_PUBLISHER \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 5,
      "richardcom": 1,
      "-": 12,
      "HCY123902": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteByCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.DeleteByCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Parses input arguments and creates a new DeleteByCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DeleteByCommandParser implements Parser\u003cDeleteByCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * and returns a DeleteByCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * * @return DeleteByCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DeleteByCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_TIMES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        int attribute \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        boolean isNamePresent \u003d isPrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ISBN, PREFIX_TIMES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        boolean isIsbnPresent \u003d isPrefixesPresent(argMultimap, PREFIX_ISBN)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIMES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        boolean isTimesPresent \u003d isPrefixesPresent(argMultimap, PREFIX_TIMES)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ISBN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if ((arePrefixesPresent(argMultimap, PREFIX_ISBN, PREFIX_TIMES)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIMES)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ISBN))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    DeleteByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (isNamePresent) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            content \u003d name.fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            attribute \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (isIsbnPresent) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Isbn isbn \u003d ParserUtil.parseIsbn(argMultimap.getValue(PREFIX_ISBN).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            content \u003d isbn.value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            attribute \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (isTimesPresent) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Times times \u003d ParserUtil.parseTimes(argMultimap.getValue(PREFIX_TIMES).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            content \u003d times.value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            attribute \u003d 2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String trimmedArgs \u003d content.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return new DeleteByCommand(trimmedArgs, attribute);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static boolean isPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STOCKING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_STOCKING, PREFIX_TIMES, PREFIX_AUTHOR, PREFIX_PUBLISHER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor editBookDescriptor \u003d new EditCommand.EditBookDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            editBookDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ISBN).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            editBookDescriptor.setIsbn(ParserUtil.parseIsbn(argMultimap.getValue(PREFIX_ISBN).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            editBookDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            editBookDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        parseCategoriesForEdit(argMultimap.getAllValues(PREFIX_CATEGORY))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .ifPresent(editBookDescriptor::setCategories);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STOCKING).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            editBookDescriptor.setStocking(ParserUtil.parseStocking(argMultimap.getValue(PREFIX_STOCKING).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMES).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            editBookDescriptor.setTimes(ParserUtil.parseTimes(argMultimap.getValue(PREFIX_TIMES).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            editBookDescriptor.setAuthor(ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PUBLISHER).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            editBookDescriptor.setPublisher(ParserUtil.parsePublisher(argMultimap.getValue(PREFIX_PUBLISHER).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!editBookDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new EditCommand(index, editBookDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e} if {@code categories} is non-empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * If {@code categories} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * {@code Set\u003cCategory\u003e} containing zero categories."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private Optional\u003cSet\u003cCategory\u003e\u003e parseCategoriesForEdit(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assert categories !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Collection\u003cString\u003e categorySet \u003d categories.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 categories.contains(\"\") ? Collections.emptySet() : categories;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return Optional.of(ParserUtil.parseCategories(categorySet));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 16,
      "richardcom": 9,
      "-": 59,
      "Caiyi34777": 14,
      "HCY123902": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses a {@code String isbn} into a {@code Isbn}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @throws ParseException if the given {@code isbn} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static Isbn parseIsbn(String isbn) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(isbn);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String trimmedIsbn \u003d isbn.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (!Isbn.isValidIsbn(trimmedIsbn)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new ParseException(Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new Isbn(trimmedIsbn);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static Times parseTimes(String times) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(times);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        String trimmedTimes \u003d times.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (!Times.isValidTimes(trimmedTimes)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            throw new ParseException(Times.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Times(times);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (!Category.isValidCategoryName(trimmedCategory)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Parses a {@code String author} into a {@code Author}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws ParseException if the given {@code author} is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static Author parseAuthor(String author) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(author);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String trimmedAuthor \u003d author.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!Author.isValidAuthor(trimmedAuthor)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new ParseException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Author(trimmedAuthor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Parses a {@code String publisher} into a {@code Publisher}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @throws ParseException if the given {@code publisher} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static Publisher parsePublisher(String publisher) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(publisher);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        String trimmedPublisher \u003d publisher.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (!Publisher.isValidPublisher(trimmedPublisher)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throw new ParseException(Publisher.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return new Publisher(trimmedPublisher);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static Set\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        for (String categoryName : categories) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            categorySet.add(parseCategory(categoryName));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return categorySet;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Parses {@code String stocking} into a {@code Stocking}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static Stocking parseStocking(String stocking) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(stocking);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(Stocking.VALIDATION_REGEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(stocking);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        int count \u003d matcher.groupCount();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        HashMap\u003cString, Integer\u003e stockingInLocation \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            if (matcher.find() \u0026\u0026 Stocking.isValidStocking(stocking)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                List\u003cString\u003e locations \u003d Arrays.asList(Stocking.LOCATION);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                locations.forEach((location) -\u003e {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    stockingInLocation.put(location, 0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                });"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d count; i \u003d i + 2) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    //if (matcher.group(i).strip().toUpperCase().equals(Stocking.LOCATION[(i - 1) / 2].toUpperCase())) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    String currentLocation \u003d matcher.group(i).strip();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    int currentCount \u003d Integer.parseInt(matcher.group(i + 1).strip());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    locations.forEach((location) -\u003e {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        if (location.toUpperCase().equals(currentLocation.toUpperCase())) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                            stockingInLocation.put(location, currentCount);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                throw new ParseException(Stocking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new ParseException(Stocking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new Stocking(stockingInLocation);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 24,
      "Stefan-Jiang": 4,
      "richardcom": 24,
      "-": 100,
      "Caiyi34777": 24,
      "HCY123902": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StockCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.StockCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Parses input arguments and creates a new StockCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class StockCommandParser implements Parser\u003cStockCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StockingCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * and returns a StockingCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public StockCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                userInput,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                CliSyntax.PREFIX_NAME,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                CliSyntax.PREFIX_ISBN"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e names \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e numbers \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (argumentMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            names \u003d Arrays.asList(argumentMultimap.getValue(CliSyntax.PREFIX_NAME).get().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (argumentMultimap.getValue(CliSyntax.PREFIX_ISBN).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            numbers \u003d Arrays.asList(argumentMultimap.getValue(CliSyntax.PREFIX_ISBN).get().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new StockCommand(names, numbers);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TimesCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.commands.TimesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Parses input arguments and creates a new {@code TimesCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class TimesCommandParser implements Parser\u003cTimesCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code TimesCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * and returns a {@code TimesCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public TimesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TIMES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimesCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        String times \u003d argMultimap.getValue(PREFIX_TIMES).orElse(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return new TimesCommand(index, new Times(times));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 36,
      "richardcom": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UsageByCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.commands.UsageByCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Parses input arguments and creates a new UsageByCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class UsageByCommandParser implements Parser\u003cUsageByCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UsageCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * and returns a UsageByCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * * @return UsageByCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public UsageByCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_TIMES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        boolean isNamePresent \u003d isPrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ISBN, PREFIX_TIMES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        boolean isIsbnPresent \u003d isPrefixesPresent(argMultimap, PREFIX_ISBN)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIMES);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if ((arePrefixesPresent(argMultimap, PREFIX_ISBN, PREFIX_TIMES)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIMES)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ISBN))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    UsageByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (isNamePresent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            content \u003d name.fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        } else if (isIsbnPresent) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            Isbn isbn \u003d ParserUtil.parseIsbn(argMultimap.getValue(PREFIX_ISBN).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            content \u003d isbn.value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            String trimmedArgs \u003d content.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, UsageByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new UsageByCommand(trimmedArgs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UsageByCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static boolean isPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UsageCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.commands.UsageCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Parses input arguments and creates a new UsageCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class UsageCommandParser implements Parser\u003cUsageCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UsageCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * and returns a UsageCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public UsageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            return new UsageCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UsageCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.UniqueBookList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Duplicates are not allowed (by .isSameBook comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final UniqueBookList books;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        books \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates an AddressBook using the Books in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the contents of the book list with {@code books}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.books.setBooks(books);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        setBooks(newData.getBookList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    //// book-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return books.contains(book);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Adds a book to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void addBook(Book p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        books.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the given book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(editedBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        books.setBook(target, editedBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void removeBook(Book key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        books.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return books.asUnmodifiableObservableList().size() + \" books\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return books.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 books.equals(((AddressBook) other).books));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return books.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 32,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    boolean hasBook(Book book);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Deletes the given book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book must exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void deleteBook(Book target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Adds the given book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code book} must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void addBook(Book book);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the given book {@code target} with {@code editedBook}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void setBook(Book target, Book editedBook);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /** Returns an unmodifiable view of the filtered book list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Updates the filter of the filtered book list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void updateFilteredBookList(Predicate\u003cBook\u003e predicate, Mode mode);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 17,
      "-": 70,
      "HCY123902": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.ui.BookListPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final FilteredList\u003cBook\u003e filteredBooks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        filteredBooks \u003d new FilteredList\u003c\u003e(this.addressBook.getBookList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return addressBook.hasBook(book);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        addressBook.removeBook(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void addBook(Book book) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        addressBook.addBook(book);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        addressBook.setBook(target, editedBook);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Book List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Book} backed by the internal list of"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return filteredBooks;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate, Mode mode) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        BookListPanel.setMode(mode);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        filteredBooks.setPredicate(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Updates the book list with the predicate."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param predicate The predicate that is used to update the list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        filteredBooks.setPredicate(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 filteredBooks.equals(other.filteredBooks);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "richardcom": 26,
      "-": 133,
      "HCY123902": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns an unmodifiable view of the books list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * This list will not contain any duplicate books."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    ObservableList\u003cBook\u003e getBookList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Author.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAuthor(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Author {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public final String author;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Author(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        checkArgument(isValidAuthor(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        author \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static boolean isValidAuthor(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof Author // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 author.equals(((Author) other).author)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return author.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Book.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Book {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final Isbn isbn;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final Author author;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private final Publisher publisher;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final Times times;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final Stocking stocking;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Book(Name name, Isbn isbn, Email email, Address address,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                Times times, Set\u003cCategory\u003e categories, Stocking stocking, Author author, Publisher publisher) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireAllNonNull(name, isbn, email, address, times, categories, author);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.times \u003d times;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // add"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.publisher \u003d publisher;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.stocking \u003d stocking;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public Isbn getIsbn() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return isbn;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public Publisher getPublisher() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return publisher;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Times getTimes() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return times;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Returns an immutable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return Collections.unmodifiableSet(categories);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Stocking getStocking() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return this.stocking;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if both books of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * This defines a weaker notion of equality between two books."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean isSameBook(Book otherBook) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (otherBook \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return otherBook !\u003d null"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getName().equals(getName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 (otherBook.getIsbn().equals(getIsbn()) || otherBook.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if both books have the same identity and data fields."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * This defines a stronger notion of equality between two books."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!(other instanceof Book)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book otherBook \u003d (Book) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return otherBook.getName().equals(getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getIsbn().equals(getIsbn())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getCategories().equals(getCategories())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getAuthor().equals(getAuthor())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 otherBook.getPublisher().equals(getPublisher());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return Objects.hash(name, isbn, email, address, categories, author, publisher);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .append(\" Isbn: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .append(getIsbn())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                .append(\" Times: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                .append(getTimes())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .append(\" Categories: \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        builder.append(\" Author: \").append(getAuthor());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        builder.append(\" Publisher: \").append(getPublisher());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 9,
      "Stefan-Jiang": 9,
      "richardcom": 32,
      "-": 84,
      "Caiyi34777": 15,
      "HCY123902": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Isbn.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s isbn number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIsbn(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class Isbn {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            \"Isbn numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Constructs a {@code Isbn}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @param isbn A valid isbn number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public Isbn(String isbn) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(isbn);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        checkArgument(isValidIsbn(isbn), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        value \u003d isbn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Returns true if a given string is a valid isbn number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static boolean isValidIsbn(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || (other instanceof Isbn // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 value.equals(((Isbn) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 38,
      "Caiyi34777": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/NameMatchesKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class NameMatchesKeywordPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public NameMatchesKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof NameMatchesKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameMatchesKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/NumberContainsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Tests that a {@code Book}\u0027s number matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class NumberContainsKeywordPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public NumberContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .anyMatch((number) -\u003e book.getIsbn().value.toUpperCase().contains(number.toUpperCase()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof NumberContainsKeywordPredicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u0026\u0026 this.keywords.equals(((NumberContainsKeywordPredicate) other).keywords));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 5,
      "HCY123902": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Publisher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Represents a Book\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPublisher(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class Publisher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public final String publisher;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public Publisher(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        checkArgument(isValidPublisher(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        publisher \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static boolean isValidPublisher(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return publisher;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                || (other instanceof Publisher // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                \u0026\u0026 publisher.equals(((Publisher) other).publisher)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return publisher.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 57,
      "richardcom": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Stocking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class Stocking {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"stocking needs to map from a location to the\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            + \" number of stocking in that location\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String[] LOCATION \u003d new String[]{\"central library\", \"science library\"};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \"^\\\\s*(central library)?\\\\s+(\\\\d{1,5})?\\\\s+(science library)?\\\\s+(\\\\d{1,5})?\\\\s*$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public final HashMap\u003cString, Integer\u003e storage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    //public final int stockingInCentralLibrary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    //public final int stockingInScienceLibrary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param stocking A valid stocking."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Stocking(HashMap\u003cString, Integer\u003e stocking) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        requireNonNull(stocking);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        //checkArgument(isValidAddress(stocking), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        //value \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        //this.stockingInCentralLibrary \u003d stocking[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        //this.stockingInScienceLibrary \u003d stocking[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        for (int i \u003d 0; i \u003c LOCATION.length; i \u003d i + 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.storage.put(LOCATION[i], 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.storage.putAll(stocking);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static boolean isValidStocking(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return \"central library \" + storage.getOrDefault(\"central library\", 0) + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                + \"science library \" + storage.getOrDefault(\"scienece library\", 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                || (other instanceof Stocking // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 storage.equals(((Stocking) other).storage)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return storage.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "richardcom": 1,
      "HCY123902": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Times.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Represents how many times a book is borrowed before."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTimes(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class Times {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"times should be a non-negative number\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-9]\\\\d*|0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Constructs a {@code Times}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * @param times A valid times."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public Times(String times) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        requireNonNull(times);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        checkArgument(isValidTimes(times), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        value \u003d times;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Returns true if a given string is a valid times."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static boolean isValidTimes(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                || (other instanceof Times // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                \u0026\u0026 value.equals(((Times) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 49,
      "richardcom": 1,
      "Caiyi34777": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/UniqueBookList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A list of books that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A book is considered unique by comparing using {@code Book#isSameBook(Book)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * books uses Book#isSameBook(Book) for equality so as to ensure that the book being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * unique in terms of identity in the UniqueBookList. However, the removal of a book uses Book#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * as to ensure that the book with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * @see Book#isSameBook(Book)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class UniqueBookList implements Iterable\u003cBook\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if the list contains an equivalent book as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean contains(Book toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Adds a book to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void add(Book toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!target.isSameBook(editedBook) \u0026\u0026 contains(editedBook)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        internalList.set(index, editedBook);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Removes the equivalent book from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The book must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void remove(Book toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks(UniqueBookList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Replaces the contents of this list with {@code books}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        requireAllNonNull(books);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!booksAreUnique(books)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        internalList.setAll(books);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ObservableList\u003cBook\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Iterator\u003cBook\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || (other instanceof UniqueBookList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBookList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns true if {@code books} contains only unique books."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private boolean booksAreUnique(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (int i \u003d 0; i \u003c books.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            for (int j \u003d i + 1; j \u003c books.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (books.get(i).isSameBook(books.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "richardcom": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/BookNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Signals that the operation is unable to find the specified book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/DuplicateBookException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Signals that the operation will result in duplicate Books (Books are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DuplicateBookException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DuplicateBookException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(\"Operation would result in duplicate books\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/category/Category.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Represents a Category in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCategoryName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Categories names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @param categoryName A valid category name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public Category(String categoryName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        checkArgument(isValidCategoryName(categoryName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Returns true if a given string is a valid category name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static boolean isValidCategoryName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return \u0027[\u0027 + categoryName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static Book[] getSampleBooks() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        HashMap\u003cString, Integer\u003e storage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        storage.put(\"centralLibrary\", 10);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        storage.put(\"scienceLibrary\", 8);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Stocking stocking \u003d new Stocking(storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Book[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            new Book(new Name(\"Pride and Prejudice\"), new Isbn(\"9780141439518\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Email(\"pride\u0026prejudice@example.com\"), new Address(\"English\"), new Times(\"195\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    getCategorySet(\"Novels\"), stocking, new Author(\"Jane Austen\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Publisher(\"Penguin Publishing Group\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            new Book(new Name(\"A Brief History Of Time From Big Bang To Black Holes\"), new Isbn(\"9780553175219\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Email(\"abriefhistoryoftime@example.com\"), new Address(\"English\"), new Times(\"20278\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                getCategorySet(\"Science\"), stocking,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Author(\"Stephen Hawking\"), new Publisher(\"Bantam\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            new Book(new Name(\"The Great Gatsby\"), new Isbn(\"9780743273565\"), new Email(\"thegreatgatsby@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                new Address(\"English\"), new Times(\"6529\"), getCategorySet(\"Classics\"), stocking,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Author(\"Scott Fitzgerald\"), new Publisher(\"Scribner\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            new Book(new Name(\"Introduction to Linear Algebra\"), new Isbn(\"9780980232776\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Email(\"introtolinearalgebra@example.com\"), new Address(\"English\"), new Times(\"243\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                getCategorySet(\"Textbook\"), stocking,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                    new Author(\"Gilbert Strang\"), new Publisher(\"Wellesley Cambridge Press\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (Book sampleBook : getSampleBooks()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            sampleAb.addBook(sampleBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Returns a category set containing the list of strings given."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static Set\u003cCategory\u003e getCategorySet(String... strings) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .map(Category::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 9,
      "Stefan-Jiang": 17,
      "richardcom": 4,
      "-": 29,
      "Caiyi34777": 4,
      "HCY123902": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Jackson-friendly version of {@link Book}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "class JsonAdaptedBook {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Book\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private String isbn;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String times;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e categorised \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String author;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private String publisher;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final JsonAdaptedStocking stocking;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a {@code JsonAdaptedBook} with the given book details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public JsonAdaptedBook(@JsonProperty(\"name\") String name, @JsonProperty(\"isbn\") String isbn,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                           @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                           @JsonProperty(\"times\") String times,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedCategory\u003e categorised,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                           @JsonProperty(\"stocking\") JsonAdaptedStocking stocking,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                           @JsonProperty(\"author\") String author,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                           @JsonProperty(\"publisher\") String publisher) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.times \u003d times;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (categorised !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            this.categorised.addAll(categorised);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.publisher \u003d publisher;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.stocking \u003d stocking;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts a given {@code Book} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public JsonAdaptedBook(Book source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        isbn \u003d source.getIsbn().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        times \u003d source.getTimes().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        categorised.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        author \u003d source.getAuthor().author;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        publisher \u003d source.getPublisher().publisher;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        stocking \u003d new JsonAdaptedStocking(source.getStocking());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Book} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Book toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final List\u003cCategory\u003e bookCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        for (JsonAdaptedCategory category : categorised) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            bookCategories.add(category.toModelType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (isbn \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                    Isbn.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (!Isbn.isValidIsbn(isbn)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new IllegalValueException(Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        final Isbn modelIsbn \u003d new Isbn(isbn);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        if (times \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Times.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        final Times modelTimes \u003d new Times(times);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(bookCategories);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (author \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Author.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!Author.isValidAuthor(author)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new IllegalValueException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final Author modelAuthor \u003d new Author(author);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (publisher \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                    Publisher.class.getSimpleName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        if (!Publisher.isValidPublisher(publisher)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            throw new IllegalValueException(Publisher.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        final Publisher modelPublisher \u003d new Publisher(publisher);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (stocking \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    JsonAdaptedStocking.class.getSimpleName()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        final Stocking modelStocking \u003d stocking.toModelType();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Book(modelName, modelIsbn, modelEmail, modelAddress, modelTimes,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                modelCategories, modelStocking, modelAuthor, modelPublisher);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 17,
      "Stefan-Jiang": 5,
      "richardcom": 49,
      "-": 67,
      "Caiyi34777": 15,
      "HCY123902": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCategory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": " * Jackson-friendly version of {@link Category}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "class JsonAdaptedCategory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Constructs a {@code JsonAdaptedCategory} with the given {@code categoryName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public JsonAdaptedCategory(String categoryName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Converts a given {@code Category} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public JsonAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        categoryName \u003d source.categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code Category} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (!Category.isValidCategoryName(categoryName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        return new Category(categoryName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "Caiyi34777": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStocking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Jackson-friendly version of {@link Stocking}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class JsonAdaptedStocking {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final int centralLibrary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final int scienceLibrary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Constructs a {@code JsonAdaptedStocking} with the given stocking information."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public JsonAdaptedStocking(@JsonProperty(\"centralLibrary\") int centralLibrary,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                               @JsonProperty(\"scienceLibrary\") int scienceLibrary) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.centralLibrary \u003d centralLibrary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.scienceLibrary \u003d scienceLibrary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Converts a given {@code Stocking} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public JsonAdaptedStocking(Stocking stocking) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (stocking \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.centralLibrary \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.scienceLibrary \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.centralLibrary \u003d stocking.storage.getOrDefault(\"central library\", 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.scienceLibrary \u003d stocking.storage.getOrDefault(\"science library\", 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Stocking} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted stocking."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Stocking toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        HashMap\u003cString, Integer\u003e storage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!Stocking.isValidStocking(\"central library \" + centralLibrary + \" science library \" + scienceLibrary)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            throw new IllegalValueException(Stocking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        storage.put(\"central library\", this.centralLibrary);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        storage.put(\"science library\", this.scienceLibrary);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return new Stocking(storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "HCY123902": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"Books list contains duplicate book(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final List\u003cJsonAdaptedBook\u003e books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given books."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"books\") List\u003cJsonAdaptedBook\u003e books) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.books.addAll(books);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        books.addAll(source.getBookList().stream().map(JsonAdaptedBook::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (JsonAdaptedBook jsonAdaptedBook : books) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Book book \u003d jsonAdaptedBook.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (addressBook.hasBook(book)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            addressBook.addBook(book);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * An UI component that displays information of a {@code Book}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final String FXML \u003d \"BookListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private Label isbn;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Label times;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Label publisher;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates a {@code BookCode} with the given {@code Book} and index to display."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        name.setText(book.getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        isbn.setText(book.getIsbn().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        address.setText(book.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        email.setText(book.getEmail().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        times.setText(book.getTimes().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        book.getCategories().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        author.setText(book.getAuthor().author);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        publisher.setText(book.getPublisher().publisher);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!(other instanceof BookCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        BookCard card \u003d (BookCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "Stefan-Jiang": 2,
      "richardcom": 22,
      "-": 57,
      "Caiyi34777": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCardWithCover.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * An UI component that displays information of a {@code Book} with book cover."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class BookCardWithCover extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String FXML \u003d \"BookListCardWithCover.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final BookCoverManager BOOK_COVER_MANAGER \u003d new BookCoverManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label isbn;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label times;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label publisher;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private ImageView cover;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a {@code BookCardWithCover} with the given {@code Book} and index to display."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param book The corresponding book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param displayedIndex The number corresponding to the order of the book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public BookCardWithCover(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        name.setText(book.getName().fullName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        isbn.setText(\"isbn: \" + book.getIsbn().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        address.setText(book.getAddress().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        email.setText(\"contact: \" + book.getEmail().value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        times.setText(\"Number of time: \" + book.getTimes().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        book.getCategories().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        author.setText(\"author: \" + book.getAuthor().author);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        publisher.setText(\"publisher: \" + book.getPublisher().publisher);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        logger.info(\"Get the book cover\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        cover.setImage(BOOK_COVER_MANAGER.getCategoryBookCover(book.getName().fullName, book.getCategories()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        cover.setPreserveRatio(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!(other instanceof BookCardWithCover)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        BookCardWithCover card \u003d (BookCardWithCover) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCoverManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * An UI component that returns the book cover of the {@code Book}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class BookCoverManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String GENERAL \u003d \"General\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String SCIENCE \u003d \"Science\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String HISTORY \u003d \"History\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String NOVEL \u003d \"Novels\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String PHYSICS \u003d \"Physics\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String CHEMISTRY \u003d \"Chemistry\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MATHEMATICS \u003d \"Mathematics\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MODERN_WAR \u003d \"ModernWar\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String ANCIENT_WAR \u003d \"AncientWar\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String MODERN_HISTORY \u003d \"ModernHistory\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String ANCIENT_HISTORY \u003d \"AncientHistory\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final HashMap\u003cString, String[]\u003e CATEGORY_MAP \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] GENERAL_COVER \u003d new String[]{\"/images/general.jpg\", \"/images/general2.jpg\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] SCIENCE_COVER \u003d new String[]{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/science.jpg\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/science2.jpg\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/science3.jpg\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/science4.jpg\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] HISTORY_COVER \u003d new String[]{\"/images/history.jpg\", \"/images/history1.jpg\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] NOVEL_COVER \u003d new String[]{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/novel.jpg\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/novel2.jpg\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/novel3.jpg\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] PHYSICS_COVER \u003d new String[]{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/physics.jpg\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/physics2.jpg\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/physics3.jpg\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \"/images/physics4.jpg\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] CHEMISTRY_COVER \u003d new String[]{\"/images/chemistry.jpg\", \"/images/chemistry2.jpg\"};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] MATHEMATICS_COVER \u003d new String[]{\"/images/mathematics.jpg\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] MODERN_WAR_COVER \u003d new String[]{\"/images/modernWar.jpg\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] ANCIENT_WAR_COVER \u003d new String[]{\"/images/ancientWar.jpg\"};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] MODERN_HISTORY_COVER \u003d new String[]{\"/images/modernHistory.jpg\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String[] ANCIENT_HISTORY_COVER \u003d new String[]{\"/images/ancientHistory.jpg\"};"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Creates a new {@code BookCoverManager}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public BookCoverManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert CATEGORY_MAP !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert GENERAL_COVER !\u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert SCIENCE_COVER !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert HISTORY_COVER !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert NOVEL_COVER !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert PHYSICS_COVER !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert CHEMISTRY_COVER !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert MATHEMATICS_COVER !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert MODERN_WAR_COVER !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert ANCIENT_WAR_COVER !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert MODERN_HISTORY_COVER !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert ANCIENT_HISTORY_COVER !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(GENERAL, GENERAL_COVER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(SCIENCE, SCIENCE_COVER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(HISTORY, HISTORY_COVER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(NOVEL, NOVEL_COVER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(PHYSICS, PHYSICS_COVER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(CHEMISTRY, CHEMISTRY_COVER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(MATHEMATICS, MATHEMATICS_COVER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(MODERN_WAR, MODERN_WAR_COVER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(ANCIENT_WAR, ANCIENT_WAR_COVER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(MODERN_HISTORY, MODERN_HISTORY_COVER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        CATEGORY_MAP.putIfAbsent(ANCIENT_HISTORY, ANCIENT_HISTORY_COVER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Returns a corresponding book cover image according to the set of categories of the book and"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * the name of the book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param bookName The name of the book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @param categorySet The set of categories of the book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @return The corresponding book cover of the book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public Image getCategoryBookCover(String bookName, Set\u003cCategory\u003e categorySet) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assert bookName !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (categorySet \u003d\u003d null || categorySet.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d (bookName.hashCode() % GENERAL_COVER.length);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(GENERAL))[number]));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Set\u003cString\u003e categoryNames \u003d categorySet.stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .map(category -\u003e category.categoryName.toUpperCase())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (categoryNames.contains(PHYSICS.toUpperCase())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % PHYSICS_COVER.length);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(PHYSICS))[number]));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(CHEMISTRY.toUpperCase())) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % CHEMISTRY_COVER.length);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(CHEMISTRY))[number]));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(MATHEMATICS.toUpperCase())) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % MATHEMATICS_COVER.length);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(MATHEMATICS))[number]));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(MODERN_WAR.toUpperCase())) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % MODERN_WAR_COVER.length);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(MODERN_WAR))[number]));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(ANCIENT_WAR.toUpperCase())) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % ANCIENT_WAR_COVER.length);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(ANCIENT_WAR))[number]));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(MODERN_HISTORY.toUpperCase())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % MODERN_HISTORY_COVER.length);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(MODERN_HISTORY))[number]));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(ANCIENT_HISTORY.toUpperCase())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % ANCIENT_HISTORY_COVER.length);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(ANCIENT_HISTORY))[number]));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(SCIENCE.toUpperCase())) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % SCIENCE_COVER.length);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(SCIENCE))[number]));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(HISTORY.toUpperCase())) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % HISTORY_COVER.length);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(HISTORY))[number]));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else if (categoryNames.contains(NOVEL.toUpperCase())) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % NOVEL_COVER.length);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(NOVEL))[number]));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            int number \u003d Math.abs(bookName.hashCode() % GENERAL_COVER.length);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream((CATEGORY_MAP.get(GENERAL))[number]));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Panel containing the list of books."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final String FXML \u003d \"BookListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static Mode mode \u003d Mode.NORMAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BookListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private ListView\u003cBook\u003e bookListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates a {@code BookListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookListPanel(ObservableList\u003cBook\u003e bookList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        bookListView.setItems(bookList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        bookListView.setCellFactory(listView -\u003e new BookListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void setMode(Mode mode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        BookListPanel.mode \u003d mode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Book} using a {@code BookCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    class BookListViewCell extends ListCell\u003cBook\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        protected void updateItem(Book book, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            super.updateItem(book, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (empty || book \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (mode.equals(Mode.NORMAL)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    //setGraphic(new BookCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    setGraphic(new BookCardWithCover(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    setGraphic(new LibraryBookDetailCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 58,
      "HCY123902": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LibraryBookDetailCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * An UI component that displays detailed information of a {@code Book}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public class LibraryBookDetailCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final String FXML \u003d \"LibraryBookDetailCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final BookCoverManager BOOK_COVER_MANAGER \u003d new BookCoverManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label isbn;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private FlowPane stocking;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private ImageView cover;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates a {@code BookCode} with the given {@code Book} and index to display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public LibraryBookDetailCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        name.setText(book.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        isbn.setText(\"isbn: \" + book.getIsbn().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        book.getCategories().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        book.getStocking().storage.forEach((location, storage) -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            if (storage \u003e 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                stocking.getChildren().add(new Label(location + \": \" + storage + \" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        author.setText(\"author: \" + book.getAuthor().author);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        cover.setImage(BOOK_COVER_MANAGER.getCategoryBookCover(book.getName().fullName, book.getCategories()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        cover.setPreserveRatio(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        if (!(other instanceof LibraryBookDetailCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        LibraryBookDetailCard card \u003d (LibraryBookDetailCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 10,
      "HCY123902": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private BookListPanel bookListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private StackPane bookListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        bookListPanel \u003d new BookListPanel(logic.getFilteredBookList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        bookListPanelPlaceholder.getChildren().add(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookListPanel getBookListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return bookListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 6,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Mode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * The Mode class indicates the type of component to show."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    NORMAL,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    DETAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 9
    }
  },
  {
    "path": "src/main/resources/view/BookListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "      \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isbn\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "      \u003cLabel fx:id\u003d\"publisher\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$publisher\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "      \u003cLabel fx:id\u003d\"times\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$times\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 1,
      "Stefan-Jiang": 1,
      "richardcom": 1,
      "-": 34,
      "Caiyi34777": 2
    }
  },
  {
    "path": "src/main/resources/view/BookListCardWithCover.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cStackPane alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"100\" maxWidth\u003d\"80\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" bottom\u003d\"5.0\" left\u003d\"35.0\" right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cImageView fx:id\u003d\"cover\" fitHeight\u003d\"105.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER_LEFT\" hgap\u003d\"5\" vgap\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"30\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"categories\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isbn\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"publisher\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$publisher\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"times\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$times\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 49
    }
  },
  {
    "path": "src/main/resources/view/BookListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/LibraryBookDetailCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cStackPane alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"100\" maxWidth\u003d\"80\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" bottom\u003d\"5.0\" left\u003d\"35.0\" right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cImageView fx:id\u003d\"cover\" fitHeight\u003d\"105.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"30\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"stocking\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"50\" maxHeight\u003d\"1000\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 46
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        \u003cVBox fx:id\u003d\"bookList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "          \u003cStackPane fx:id\u003d\"bookListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final Index fifthBookIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(fifthBookIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(fifthBookIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(fifthBookIndex.equals(fifthBookIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(fifthBookIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(fifthBookIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(fifthBookIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PUBLISHER_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STOCKING_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMES_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + ISBN_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_AMY + STOCKING_DESC_AMY + TIMES_DESC_AMY + AUTHOR_DESC_AMY + PUBLISHER_DESC_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(AMY).withCategories().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.addBook(expectedBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredBookList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 15,
      "-": 150,
      "Caiyi34777": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_newBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.addBook(validBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandSuccess(new AddCommand(validBook), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validBook), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookInList \u003d model.getAddressBook().getBookList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(new AddCommand(bookInList), model, AddCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 11,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void constructor_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_bookAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ModelStubAcceptingBookAdded modelStub \u003d new ModelStubAcceptingBookAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validBook).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validBook), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(Arrays.asList(validBook), modelStub.booksAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBook(validBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_BOOK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book alice \u003d new BookBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bob \u003d new BookBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate, Mode mode) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * A Model stub that contains a single book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private class ModelStubWithBook extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        private final Book book;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ModelStubWithBook(Book book) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            this.book \u003d book;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return this.book.isSameBook(book);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * A Model stub that always accept the book being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private class ModelStubAcceptingBookAdded extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final ArrayList\u003cBook\u003e booksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return booksAdded.stream().anyMatch(book::isSameBook);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            booksAdded.add(book);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 41,
      "-": 153,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STOCKING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String VALID_ISBN_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String VALID_ISBN_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String VALID_TIMES_AMY \u003d \"23\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String VALID_TIMES_BOB \u003d \"2\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String VALID_CATEGORY_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String VALID_CATEGORY_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String VALID_STOCKING_AMY \u003d \"central library 10 science library 10\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String VALID_STOCKING_BOB \u003d \"central library 30 science library 15\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String VALID_AUTHOR_BOB \u003d \"a\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String VALID_PUBLISHER_BOB \u003d \"pub\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String VALID_AUTHOR_AMY \u003d \"a\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String VALID_PUBLISHER_AMY \u003d \"pub\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String ISBN_DESC_AMY \u003d \" \" + PREFIX_ISBN + VALID_ISBN_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String ISBN_DESC_BOB \u003d \" \" + PREFIX_ISBN + VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String TIMES_DESC_AMY \u003d \" \" + PREFIX_TIMES + VALID_TIMES_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String TIMES_DESC_BOB \u003d \" \" + PREFIX_TIMES + VALID_TIMES_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String CATEGORY_DESC_FRIEND \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String CATEGORY_DESC_HUSBAND \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String STOCKING_DESC_AMY \u003d \" \" + PREFIX_STOCKING + VALID_STOCKING_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final String STOCKING_DESC_BOB \u003d \" \" + PREFIX_STOCKING + VALID_STOCKING_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String AUTHOR_DESC_BOB \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String PUBLISHER_DESC_BOB \u003d \" \" + PREFIX_PUBLISHER + VALID_PUBLISHER_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String AUTHOR_DESC_AMY \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String PUBLISHER_DESC_AMY \u003d \" \" + PREFIX_PUBLISHER + VALID_PUBLISHER_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String INVALID_ISBN_DESC \u003d \" \" + PREFIX_ISBN + \"911a\"; // \u0027a\u0027 not allowed in isbns"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            \" \" + PREFIX_CATEGORY + \"hubby*\"; // \u0027*\u0027 not allowed in categories"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String INVALID_STOCKING_DESC \u003d \" \" + PREFIX_STOCKING + \"central library: 20 science library:10\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String INVALID_TIMES_DESC \u003d \" \" + PREFIX_TIMES + \"03282\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String INVALID_AUTHOR_DESC \u003d \" \" + PREFIX_AUTHOR + \"james\u0026\u0026\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String INVALID_PUBLISHER_DESC \u003d \" \" + PREFIX_PUBLISHER + \"david\u0026\u0026\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final EditCommand.EditBookDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final EditCommand.EditBookDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DESC_AMY \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withIsbn(VALID_ISBN_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                .withCategories(VALID_CATEGORY_FRIEND).withTimes(VALID_TIMES_AMY).withStockings(VALID_STOCKING_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .withAuthor(VALID_AUTHOR_AMY).withPublisher(VALID_PUBLISHER_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DESC_BOB \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withIsbn(VALID_ISBN_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                .withStockings(VALID_STOCKING_BOB).withTimes(VALID_TIMES_BOB).withPublisher(VALID_PUBLISHER_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND, VALID_CATEGORY_FRIEND).withAuthor(VALID_AUTHOR_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * - the address book, filtered book list and selected book in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the book at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void showBookAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book book \u003d model.getFilteredBookList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final String[] splitName \u003d book.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])), Mode.NORMAL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(1, model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 13,
      "richardcom": 32,
      "-": 95,
      "Caiyi34777": 13,
      "HCY123902": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteByCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DeleteByCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_validBookToBeDeleted_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String name1 \u003d bookToDelete.getName().fullName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        list.add(bookToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteByCommand deleteByCommand \u003d new DeleteByCommand(name1, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteByCommand.MESSAGE_DELETE_BOOK_SUCCESS, list.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandSuccess(deleteByCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_invalidBookName_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String bookName \u003d \" \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteByCommand deleteByCommand \u003d new DeleteByCommand(bookName, 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(deleteByCommand, model, Messages.MESSAGE_INVALID_BOOK_DELETE_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteByCommand deleteFirstCommand \u003d new DeleteByCommand(\"TEST\", 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteByCommand deleteSecondCommand \u003d new DeleteByCommand(\"TEST2\", 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteByCommand deleteFirstCommandCopy \u003d new DeleteByCommand(\"TEST\", 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showNoBook(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getBookList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private void showNoBook(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        model.updateFilteredBookList(p -\u003e false, Mode.NORMAL);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(model.getFilteredBookList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 27,
      "-": 81,
      "HCY123902": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBookDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PUBLISHER_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMES_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class EditBookDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor descriptorWithSameValues \u003d new EditCommand.EditBookDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        EditCommand.EditBookDescriptor editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // different isbn -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withIsbn(VALID_ISBN_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different times -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withCategories(VALID_TIMES_AMY).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different authors -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withCategories(VALID_AUTHOR_AMY).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different publishers -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withCategories(VALID_PUBLISHER_AMY).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 15,
      "richardcom": 7,
      "-": 45,
      "Caiyi34777": 4,
      "HCY123902": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    Editing times is currently not allowed in the current editing function, that may explain why this test case fails."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    We can consider removing this test case or implement our \"editing times\" function later on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    We shall see how it goes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index indexLastBook \u003d Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book lastBook \u003d model.getFilteredBookList().get(indexLastBook.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        BookBuilder bookInList \u003d new BookBuilder(lastBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d bookInList.withName(VALID_NAME_BOB).withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withIsbn(VALID_ISBN_BOB).withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastBook, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.setBook(lastBook, editedBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK, new EditBookDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookInFilteredList \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new BookBuilder(bookInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_duplicateBookUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(firstBook).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_BOOK, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_duplicateBookFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // edit book in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book bookInList \u003d model.getAddressBook().getBookList().get(INDEX_SECOND_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new EditBookDescriptorBuilder(bookInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_invalidBookIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_invalidBookIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getBookList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_BOOK, DESC_AMY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor copyDescriptor \u003d new EditCommand.EditBookDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_BOOK, copyDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_BOOK, DESC_AMY)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_BOOK, DESC_BOB)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 5,
      "richardcom": 57,
      "-": 111,
      "Caiyi34777": 4,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_zeroKeywords_noBookFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_multipleKeywords_multipleBooksFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredBookList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 15,
      "-": 68,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 3,
      "-": 35,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StockCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ELLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for StockCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "class StockCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void execute_oneKeyword_oneBookFound() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NameContainsKeywordsPredicate nameContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(\"Elle\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.updateFilteredBookList(nameContainsKeywordsPredicate, Mode.NORMAL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand(Arrays.asList(\"Elle\"), null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertCommandSuccess(stockCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(Arrays.asList(ELLE), model.getFilteredBookList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 8,
      "HCY123902": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TimesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMES_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMES_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for TimesCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class TimesCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final String TIMES_STUB \u003d \"12345\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new BookBuilder(firstBook).withTimes(TIMES_STUB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TimesCommand remarkCommand \u003d new TimesCommand(INDEX_FIRST_BOOK, new Times(editedBook.getTimes().value));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(TimesCommand.MESSAGE_ADD_TIMES_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.setBook(firstBook, editedBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedBook \u003d new BookBuilder(model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased()))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                .withTimes(TIMES_STUB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TimesCommand remarkCommand \u003d new TimesCommand(INDEX_FIRST_BOOK, new Times(editedBook.getTimes().value));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String expectedMessage \u003d String.format(TimesCommand.MESSAGE_ADD_TIMES_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedModel.setBook(firstBook, editedBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_invalidBookIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        TimesCommand remarkCommand \u003d new TimesCommand(outOfBoundIndex, new Times(VALID_TIMES_BOB));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void execute_invalidBookIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getBookList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        TimesCommand remarkCommand \u003d new TimesCommand(outOfBoundIndex, new Times(VALID_TIMES_BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        final TimesCommand standardCommand \u003d new TimesCommand(INDEX_FIRST_BOOK, new Times(VALID_TIMES_AMY));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TimesCommand commandWithSameValues \u003d new TimesCommand(INDEX_FIRST_BOOK, new Times (VALID_TIMES_AMY));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(standardCommand.equals(new TimesCommand(INDEX_SECOND_BOOK, new Times(VALID_TIMES_AMY))));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different times -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(standardCommand.equals(new TimesCommand(INDEX_FIRST_BOOK, new Times(VALID_TIMES_BOB))));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 85,
      "richardcom": 29,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PUBLISHER_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STOCKING_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMES_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PUBLISHER_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PUBLISHER_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STOCKING_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STOCKING_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMES_DESC_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMES_DESC_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PUBLISHER_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STOCKING_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMES_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOB).withCategories(VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB + TIMES_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_BOB + CATEGORY_DESC_FRIEND + TIMES_DESC_BOB + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // multiple isbns - last isbn accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_AMY + ISBN_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_BOB + CATEGORY_DESC_FRIEND + TIMES_DESC_BOB + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_BOB + CATEGORY_DESC_FRIEND + TIMES_DESC_BOB + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_BOB + CATEGORY_DESC_FRIEND + TIMES_DESC_BOB + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // multiple categories - all accepted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book expectedBookMultipleCategories \u003d new BookBuilder(BOB).withCategories(VALID_CATEGORY_FRIEND,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                        + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB, new AddCommand(expectedBookMultipleCategories));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        //multiple stocking - last stocking accepted"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                        + ADDRESS_DESC_BOB + TIMES_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + STOCKING_DESC_BOB + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // zero categories"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(AMY).withCategories().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + ISBN_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + ADDRESS_DESC_AMY + TIMES_DESC_AMY + STOCKING_DESC_AMY + AUTHOR_DESC_AMY + PUBLISHER_DESC_AMY,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + TIMES_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // missing isbn prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_ISBN_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + TIMES_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + TIMES_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + TIMES_DESC_BOB + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_ISBN_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + VALID_TIMES_BOB + CATEGORY_DESC_FRIEND + VALID_STOCKING_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + VALID_AUTHOR_BOB + VALID_PUBLISHER_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // new attributes need to be added here"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // invalid isbn"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_ISBN_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + INVALID_CATEGORY_DESC + VALID_CATEGORY_FRIEND + STOCKING_DESC_BOB + AUTHOR_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // invalid stocking"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + INVALID_STOCKING_DESC"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB, Stocking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        // invalid author"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + INVALID_AUTHOR_DESC"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + PUBLISHER_DESC_BOB, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        // invalid publisher"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + AUTHOR_DESC_BOB + INVALID_PUBLISHER_DESC, Publisher.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // invalid times"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                + INVALID_TIMES_DESC + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB, Times.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + ISBN_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                + TIMES_DESC_BOB + STOCKING_DESC_BOB + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + ISBN_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMES_DESC_BOB + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND + STOCKING_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        + AUTHOR_DESC_BOB + PUBLISHER_DESC_BOB,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 49,
      "Stefan-Jiang": 14,
      "richardcom": 33,
      "-": 80,
      "Caiyi34777": 19,
      "HCY123902": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.commands.TimesCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(BookUtil.getAddCommand(book));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(new AddCommand(book), command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } //After implementation of edit */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_BOOK), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(book).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + INDEX_FIRST_BOOK.getOneBased() + \" \" + BookUtil.getEditBookDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_BOOK, descriptor), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // After implementation of Edit */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void parseCommand_times() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        final Times times \u003d new Times(\"20\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        TimesCommand command \u003d (TimesCommand) parser.parseCommand(TimesCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + INDEX_FIRST_BOOK.getOneBased() + \" \" + PREFIX_TIMES + times.value);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(new TimesCommand(INDEX_FIRST_BOOK, times), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 8,
      "richardcom": 17,
      "-": 79,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String argsString \u003d \"  some random string /t category with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "Caiyi34777": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteByCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.DeleteByCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "class DeleteByCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private DeleteByCommandParser parser \u003d new DeleteByCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void parse_validArgs_returnsStockCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB, new DeleteByCommand(VALID_NAME_BOB, 0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_BOOK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PUBLISHER_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STOCKING_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMES_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PUBLISHER_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STOCKING_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMES_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PUBLISHER_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STOCKING_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMES_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String CATEGORY_EMPTY \u003d \" \" + PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1 q/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ISBN_DESC, Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid isbn"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        //invalid address"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        //invalid category"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STOCKING_DESC, Stocking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid stocking"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIMES_DESC, Times.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid times"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AUTHOR_DESC, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid author"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PUBLISHER_DESC, Publisher.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // invalid publisher"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        //All Failed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // invalid isbn followed by valid email"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ISBN_DESC + EMAIL_DESC_AMY, Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // valid isbn followed by invalid isbn. The test case for invalid isbn followed by valid isbn"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + ISBN_DESC_BOB + INVALID_ISBN_DESC, Isbn.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // while parsing {@code PREFIX_CATEGORY} alone will reset the categories of the {@code Book} being edited,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // parsing it together with a valid category results in error"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_FRIEND + CATEGORY_DESC_HUSBAND + CATEGORY_EMPTY,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_FRIEND + CATEGORY_EMPTY + CATEGORY_DESC_HUSBAND,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_EMPTY + CATEGORY_DESC_FRIEND + CATEGORY_DESC_HUSBAND,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_ISBN_AMY,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ISBN_DESC_BOB + CATEGORY_DESC_HUSBAND"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withIsbn(VALID_ISBN_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND, VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ISBN_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // isbn"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_AMY).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // categories"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withCategories(VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // stocking"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STOCKING_DESC_AMY;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withStockings(VALID_STOCKING_AMY).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // times"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TIMES_DESC_AMY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withTimes(VALID_TIMES_AMY).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // author"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_AMY;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_AMY).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // publisher"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PUBLISHER_DESC_AMY;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withPublisher(VALID_PUBLISHER_AMY).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ISBN_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                + CATEGORY_DESC_FRIEND + ISBN_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + CATEGORY_DESC_FRIEND"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                + ISBN_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withCategories(VALID_CATEGORY_FRIEND,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                 VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_ISBN_DESC + ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB).build();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_ISBN_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                + ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parse_resetCategories_success() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_EMPTY;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withCategories().build();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 34,
      "richardcom": 64,
      "-": 137,
      "Caiyi34777": 30,
      "HCY123902": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String INVALID_ISBN \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String VALID_ISBN \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String VALID_CATEGORY_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String VALID_CATEGORY_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final String VALID_STOCKING \u003d \"central library 0 science library 0\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseIsbn_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIsbn((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseIsbn_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIsbn(INVALID_ISBN));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseIsbn_validValueWithoutWhitespace_returnsIsbn() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Isbn expectedIsbn \u003d new Isbn(VALID_ISBN);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertEquals(expectedIsbn, ParserUtil.parseIsbn(VALID_ISBN));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseIsbn_validValueWithWhitespace_returnsTrimmedIsbn() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String isbnWithWhitespace \u003d WHITESPACE + VALID_ISBN + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Isbn expectedIsbn \u003d new Isbn(VALID_ISBN);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertEquals(expectedIsbn, ParserUtil.parseIsbn(isbnWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY_1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategories(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategories_collectionWithInvalidCategories_throwsParseException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                INVALID_CATEGORY)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategories_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertTrue(ParserUtil.parseCategories(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void parseCategories_collectionWithValidCategories_returnsCategorySet() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Set\u003cCategory\u003e actualCategorySet \u003d ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, VALID_CATEGORY_2));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Set\u003cCategory\u003e expectedCategorySet \u003d new HashSet\u003cCategory\u003e(Arrays.asList(new Category(VALID_CATEGORY_1),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                new Category(VALID_CATEGORY_2)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertEquals(expectedCategorySet, actualCategorySet);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public void parseStocking_validValueWithoutWhitespace_returnsStocking() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        HashMap\u003cString, Integer\u003e storage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        storage.put(\"central library\", 30);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        storage.put(\"science library\", 45);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Stocking expectedStocking \u003d new Stocking(storage);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertEquals(expectedStocking, ParserUtil.parseStocking(VALID_STOCKING));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 8,
      "-": 151,
      "Caiyi34777": 40,
      "HCY123902": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StockCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.commands.StockCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "class StockCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private StockCommandParser stockCommandParser \u003d new StockCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    void parse_validArgs_returnsStockCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertParseSuccess(stockCommandParser,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                NAME_DESC_AMY,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "                new StockCommand(Arrays.asList(VALID_NAME_AMY.split(\"\\\\s+\")), null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HCY123902": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TimesCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import seedu.address.logic.commands.TimesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class TimesCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private TimesCommandParser parser \u003d new TimesCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private final String nonEmptyTimes \u003d \"123\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // have times"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_TIMES + nonEmptyTimes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TimesCommand expectedCommand \u003d new TimesCommand(INDEX_FIRST_BOOK, new Times(nonEmptyTimes));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, TimesCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertParseFailure(parser, TimesCommand.COMMAND_WORD + \" \" + nonEmptyTimes, expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 34,
      "richardcom": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getBookList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void resetData_withDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // Two books with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e newBooks \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newBooks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasBook(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void hasBook_bookNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(addressBook.hasBook(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void hasBook_bookInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        addressBook.addBook(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(addressBook.hasBook(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void hasBook_bookWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        addressBook.addBook(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(addressBook.hasBook(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void getBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getBookList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * A stub ReadOnlyAddressBook whose books list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        private final ObservableList\u003cBook\u003e books \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        AddressBookStub(Collection\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            this.books.setAll(books);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return books;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 31,
      "-": 68,
      "Caiyi34777": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.ui.Mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasBook(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void hasBook_bookNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(modelManager.hasBook(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void hasBook_bookInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        modelManager.addBook(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(modelManager.hasBook(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredBookList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withBook(ALICE).withBook(BENSON).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        modelManager.updateFilteredBookList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)), Mode.NORMAL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        modelManager.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS, Mode.NORMAL);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 16,
      "-": 116,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/AuthorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class AuthorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Author(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Author(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Author.isValidAuthor(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(Author.isValidAuthor(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e book.getCategories().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void isSameBook() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(ALICE.isSameBook(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(ALICE.isSameBook(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // different isbn and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withIsbn(VALID_ISBN_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // same name, same isbn, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withIsbn(VALID_ISBN_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // same name, same isbn, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book aliceCopy \u003d new BookBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // different isbn -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withIsbn(VALID_ISBN_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 27,
      "-": 59,
      "Caiyi34777": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/IsbnTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class IsbnTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Isbn(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void constructor_invalidIsbn_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String invalidIsbn \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Isbn(invalidIsbn));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void isValidIsbn() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // null isbn number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Isbn.isValidIsbn(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // invalid isbn numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\"isbn\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertFalse(Isbn.isValidIsbn(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // valid isbn numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertTrue(Isbn.isValidIsbn(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertTrue(Isbn.isValidIsbn(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertTrue(Isbn.isValidIsbn(\"124293842033123\")); // long isbn numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "Caiyi34777": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // Keywords match isbn, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withName(\"Alice\").withIsbn(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 10,
      "-": 64,
      "Caiyi34777": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/NumberContainsKeywordPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "class NumberContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"a\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        List\u003cString\u003e secondKeywords \u003d Arrays.asList(\"a\", \"b\", \"c\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NumberContainsKeywordPredicate numberContainsKeywordPredicate \u003d new NumberContainsKeywordPredicate(keywords);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NumberContainsKeywordPredicate secondPredicate \u003d new NumberContainsKeywordPredicate(secondKeywords);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertTrue(numberContainsKeywordPredicate.equals(numberContainsKeywordPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        NumberContainsKeywordPredicate copyPredicate \u003d new NumberContainsKeywordPredicate(keywords);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertTrue(numberContainsKeywordPredicate.equals(copyPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertFalse(numberContainsKeywordPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertFalse(numberContainsKeywordPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HCY123902"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        assertFalse(numberContainsKeywordPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2,
      "HCY123902": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/PublisherTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "public class PublisherTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Publisher(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Publisher(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Publisher.isValidPublisher(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertFalse(Publisher.isValidPublisher(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertFalse(Publisher.isValidPublisher(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertFalse(Publisher.isValidPublisher(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertFalse(Publisher.isValidPublisher(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertTrue(Publisher.isValidPublisher(\"pku\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertTrue(Publisher.isValidPublisher(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertTrue(Publisher.isValidPublisher(\"pku 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertTrue(Publisher.isValidPublisher(\"PKU\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        assertTrue(Publisher.isValidPublisher(\"PKU THU NUS\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/StockingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "class StockingTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    void isValidStocking() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        Assertions.assertTrue(Stocking.isValidStocking(\"central library 10 science library 10\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 11,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/TimesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "public class TimesTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Times times \u003d new Times(\"20\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(times.equals(times));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Times remarkCopy \u003d new Times(times.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertTrue(times.equals(remarkCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(times.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(times.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        Times differentRemark \u003d new Times(\"15\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        assertFalse(times.equals(differentRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Stefan-Jiang": 30,
      "richardcom": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/UniqueBookListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class UniqueBookListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private final UniqueBookList uniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void contains_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void contains_bookNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertFalse(uniqueBookList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void contains_bookInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(uniqueBookList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void contains_bookWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertTrue(uniqueBookList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void add_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void add_duplicateBook_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_nullTargetBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBook(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_nullEditedBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBook(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_targetBookNotInList_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(BookNotFoundException.class, () -\u003e uniqueBookList.setBook(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_editedBookIsSameBook_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.setBook(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedUniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_editedBookHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                .withCategories(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.setBook(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedUniqueBookList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_editedBookHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.setBook(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedUniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBook_editedBookHasNonUniqueIdentity_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.setBook(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void remove_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void remove_bookDoesNotExist_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(BookNotFoundException.class, () -\u003e uniqueBookList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void remove_existingBook_removesBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks_nullUniqueBookList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBooks((UniqueBookList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks_uniqueBookList_replacesOwnListWithProvidedUniqueBookList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedUniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.setBooks(expectedUniqueBookList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBooks((List\u003cBook\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e bookList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        uniqueBookList.setBooks(bookList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        expectedUniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBooks_listWithDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cBook\u003e listWithDuplicateBooks \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.setBooks(listWithDuplicateBooks));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            -\u003e uniqueBookList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 82,
      "-": 84,
      "Caiyi34777": 3,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/category/CategoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void constructor_invalidCategoryName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String invalidCategoryName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategoryName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void isValidCategoryName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        // null category name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategoryName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Caiyi34777": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.storage.JsonAdaptedBook.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class JsonAdaptedBookTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String INVALID_ISBN \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final String VALID_ISBN \u003d BENSON.getIsbn().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private static final String VALID_TIMES \u003d BENSON.getTimes().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private static final List\u003cJsonAdaptedCategory\u003e VALID_CATEGORIES \u003d BENSON.getCategories().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final String VALID_AUTHOR \u003d BENSON.getAuthor().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private static final String VALID_PUBLISHER \u003d BENSON.getPublisher().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private static final JsonAdaptedStocking VALID_STOCKING \u003d new JsonAdaptedStocking(BENSON.getStocking());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void toModelType_validBookDetails_returnsBook() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(BENSON, book.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // storage parser */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new JsonAdaptedBook(INVALID_NAME, VALID_ISBN, VALID_EMAIL, VALID_ADDRESS, VALID_TIMES,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        VALID_CATEGORIES, VALID_STOCKING, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(null, VALID_ISBN, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                VALID_TIMES, VALID_CATEGORIES, VALID_STOCKING, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void toModelType_invalidIsbn_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new JsonAdaptedBook(VALID_NAME, INVALID_ISBN, VALID_EMAIL, VALID_ADDRESS, VALID_TIMES,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        VALID_CATEGORIES, VALID_STOCKING, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String expectedMessage \u003d Isbn.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void toModelType_nullIsbn_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                VALID_TIMES, VALID_CATEGORIES, VALID_STOCKING, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Isbn.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new JsonAdaptedBook(VALID_NAME, VALID_ISBN, INVALID_EMAIL, VALID_ADDRESS, VALID_TIMES,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        VALID_CATEGORIES, VALID_STOCKING, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_NAME, VALID_ISBN, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                VALID_TIMES, VALID_CATEGORIES, VALID_STOCKING, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new JsonAdaptedBook(VALID_NAME, VALID_ISBN, VALID_EMAIL, INVALID_ADDRESS, VALID_TIMES,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        VALID_CATEGORIES, VALID_STOCKING, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_NAME, VALID_ISBN, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                VALID_TIMES, VALID_CATEGORIES, VALID_STOCKING, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public void toModelType_invalidCategories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        List\u003cJsonAdaptedCategory\u003e invalidCategories \u003d new ArrayList\u003c\u003e(VALID_CATEGORIES);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        invalidCategories.add(new JsonAdaptedCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new JsonAdaptedBook(VALID_NAME, VALID_ISBN, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "                        VALID_TIMES, invalidCategories, VALID_STOCKING, VALID_AUTHOR, VALID_PUBLISHER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, book::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 10,
      "Stefan-Jiang": 1,
      "richardcom": 36,
      "-": 62,
      "Caiyi34777": 13,
      "HCY123902": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void readAddressBook_invalidBookAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidBookAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void readAddressBook_invalidAndValidBookAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidBookAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        original.addBook(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        original.removeBook(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        original.addBook(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // storage parser */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 14,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import seedu.address.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final Path TYPICAL_BOOKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBookAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final Path INVALID_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBookAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final Path DUPLICATE_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBookAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void toModelType_typicalBooksFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BOOKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        AddressBook typicalBooksAddressBook \u003d TypicalBooks.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(addressBookFromFile, typicalBooksAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // storage parser */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void toModelType_invalidBookFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BOOK_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void toModelType_duplicateBooks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BOOK_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_BOOK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // storage parser */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 19,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /* AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    } // storage parser */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 12,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withBook(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Adds a new {@code Book} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public AddressBookBuilder withBook(Book book) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        addressBook.addBook(book);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A utility class to help with building Book objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    public static final String DEFAULT_ISBN \u003d \"85355255\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public static final String DEFAULT_TIMES \u003d \"10\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final String DEFAULT_AUTHOR \u003d \"a\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    public static final String DEFAULT_PUBLISHER \u003d \"pub\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public static final HashMap\u003cString, Integer\u003e DEFAULT_STOCKING \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private Isbn isbn;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    private Times times;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Author author;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    private Publisher publisher;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    private Stocking stocking;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates a {@code BookBuilder} with the default details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        isbn \u003d new Isbn(DEFAULT_ISBN);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        times \u003d new Times(DEFAULT_TIMES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        author \u003d new Author(DEFAULT_AUTHOR);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        publisher \u003d new Publisher(DEFAULT_PUBLISHER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        stocking \u003d new Stocking(DEFAULT_STOCKING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Initializes the BookBuilder with the data of {@code bookToCopy}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder(Book bookToCopy) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        name \u003d bookToCopy.getName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        isbn \u003d bookToCopy.getIsbn();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        email \u003d bookToCopy.getEmail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        address \u003d bookToCopy.getAddress();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        times \u003d bookToCopy.getTimes();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(bookToCopy.getCategories());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        author \u003d bookToCopy.getAuthor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        publisher \u003d bookToCopy.getPublisher();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        stocking \u003d bookToCopy.getStocking();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Name} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withName(String name) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code Book} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withCategories(String ... categories) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategorySet(categories);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Address} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Isbn} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withIsbn(String isbn) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        this.isbn \u003d new Isbn(isbn);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Email} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Times} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withTimes(String times) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        this.times \u003d new Times(times);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Author} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.author \u003d new Author(author);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Publisher} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public BookBuilder withPublisher(String publisher) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        this.publisher \u003d new Publisher(publisher);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "davidsqf"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Stocking} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public BookBuilder withStocking(String storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            Stocking stocking \u003d ParserUtil.parseStocking(storage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.stocking \u003d stocking;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            this.stocking \u003d new Stocking(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Book build() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return new Book(name, isbn, email, address, times, categories, stocking, author, publisher);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 9,
      "Stefan-Jiang": 9,
      "richardcom": 44,
      "-": 60,
      "Caiyi34777": 7,
      "HCY123902": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PUBLISHER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STOCKING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A utility class for Book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class BookUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns an add command string for adding the {@code book}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String getAddCommand(Book book) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getBookDetails(book);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the part of command string for the given {@code book}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String getBookDetails(Book book) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_NAME + book.getName().fullName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_ISBN + book.getIsbn().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_EMAIL + book.getEmail().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_ADDRESS + book.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        book.getCategories().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            s -\u003e sb.append(PREFIX_CATEGORY + s.categoryName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_STOCKING); // stock format here"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_TIMES + book.getTimes().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_AUTHOR + book.getAuthor().author + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sb.append(PREFIX_PUBLISHER + book.getPublisher().publisher + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        sb.append(PREFIX_STOCKING + book.getStocking().toString() + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the part of command string for the given {@code EditBookDescriptor}\u0027s details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String getEditBookDescriptorDetails(EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        descriptor.getIsbn().ifPresent(isbn -\u003e sb.append(PREFIX_ISBN).append(isbn.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        // to implement new attributes as well."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        if (descriptor.getCategories().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            Set\u003cCategory\u003e categories \u003d descriptor.getCategories().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                sb.append(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "                categories.forEach(s -\u003e sb.append(PREFIX_CATEGORY).append(s.categoryName).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 31,
      "-": 32,
      "Caiyi34777": 7,
      "HCY123902": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditBookDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Publisher;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Stocking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.book.Times;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A utility class to help with building EditBookDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class EditBookDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private EditBookDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder(EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.descriptor \u003d new EditBookDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns an {@code EditBookDescriptor} with fields containing {@code book}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder(Book book) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setName(book.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        descriptor.setTimes(book.getTimes());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setIsbn(book.getIsbn());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setEmail(book.getEmail());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setAddress(book.getAddress());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setCategories(book.getCategories());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        descriptor.setTimes(book.getTimes());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        descriptor.setStocking(book.getStocking());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        descriptor.setAuthor(book.getAuthor());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "        descriptor.setPublisher(book.getPublisher());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Name} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Isbn} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withIsbn(String isbn) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        descriptor.setIsbn(new Isbn(isbn));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     * Sets the {@code Times} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    public EditBookDescriptorBuilder withTimes(String times) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        descriptor.setTimes(new Times(times));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Email} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the {@code Address} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code EditBookDescriptor}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withCategories(String... categories) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        Set\u003cCategory\u003e categorySet \u003d Stream.of(categories).map(Category::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "        descriptor.setCategories(categorySet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Sets the {@code Author} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setAuthor(new Author(author));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "     * Sets the {@code Publisher} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptorBuilder withPublisher(String publisher) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        descriptor.setPublisher(new Publisher(publisher));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "     * Sets the {@code Stocking} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "    public EditBookDescriptorBuilder withStockings(String storage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            Stocking stocking \u003d ParserUtil.parseStocking(storage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            descriptor.setStocking(stocking);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            descriptor.setStocking(new Stocking(new HashMap\u003c\u003e()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public EditBookDescriptor build() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 4,
      "Stefan-Jiang": 10,
      "richardcom": 48,
      "-": 51,
      "Caiyi34777": 3,
      "HCY123902": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the middle index of the book in the {@code model}\u0027s book list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the last index of the book in the {@code model}\u0027s book list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the book in the {@code model}\u0027s book list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static Book getBook(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return model.getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBooks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STOCKING_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STOCKING_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A utility class containing a list of {@code Book} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class TypicalBooks {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book ALICE \u003d new BookBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            .withIsbn(\"94351253\").withTimes(\"12\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withCategories(\"friends\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book BENSON \u003d new BookBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withTimes(\"20\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            .withEmail(\"johnd@example.com\").withIsbn(\"98765432\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            .withCategories(\"owesMoney\", \"friends\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book CARL \u003d new BookBuilder().withName(\"Carl Kurz\").withIsbn(\"95352563\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            .withEmail(\"heinz@example.com\").withTimes(\"20\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withAddress(\"wall street\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book DANIEL \u003d new BookBuilder().withName(\"Daniel Meier\").withIsbn(\"87652533\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Caiyi34777"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withCategories(\"friends\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            .withAuthor(\"a\").withPublisher(\"pub\").withTimes(\"20\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book ELLE \u003d new BookBuilder().withName(\"Elle Meyer\").withIsbn(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            .withEmail(\"werner@example.com\").withTimes(\"20\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withAddress(\"michegan ave\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book FIONA \u003d new BookBuilder().withName(\"Fiona Kunz\").withIsbn(\"9482427\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            .withEmail(\"lydia@example.com\").withTimes(\"20\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withAddress(\"little tokyo\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book GEORGE \u003d new BookBuilder().withName(\"George Best\").withIsbn(\"9482442\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Stefan-Jiang"
        },
        "content": "            .withEmail(\"anna@example.com\").withTimes(\"20\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withAddress(\"4th street\").withAuthor(\"a\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withPublisher(\"pub\").withStocking(\"central library 10 science library 10\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // all newly added attributes need to be implemented here."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book HOON \u003d new BookBuilder().withName(\"Hoon Meier\").withIsbn(\"8482424\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withTimes(\"12\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withPublisher(\"pub\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book IDA \u003d new BookBuilder().withName(\"Ida Mueller\").withIsbn(\"8482131\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withTimes(\"12\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withPublisher(\"pub\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    // Manually added - Book\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book AMY \u003d new BookBuilder().withName(VALID_NAME_AMY).withIsbn(VALID_ISBN_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidsqf"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withCategories(VALID_CATEGORY_FRIEND)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withTimes(\"12\").withStocking(VALID_STOCKING_AMY).withAuthor(\"a\").withPublisher(\"pub\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Book BOB \u003d new BookBuilder().withName(VALID_NAME_BOB).withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withAuthor(\"a\").withPublisher(\"pub\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            .withTimes(\"12\").withCategories(VALID_CATEGORY_HUSBAND, VALID_CATEGORY_FRIEND)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HCY123902"
        },
        "content": "            .withStocking(VALID_STOCKING_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private TypicalBooks() {} // prevents instantiation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical books."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (Book book : getTypicalBooks()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ab.addBook(book);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static List\u003cBook\u003e getTypicalBooks() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidsqf": 10,
      "Stefan-Jiang": 7,
      "richardcom": 24,
      "-": 29,
      "Caiyi34777": 3,
      "HCY123902": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Index INDEX_FIRST_BOOK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Index INDEX_SECOND_BOOK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static final Index INDEX_THIRD_BOOK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 3,
      "-": 9
    }
  }
]
